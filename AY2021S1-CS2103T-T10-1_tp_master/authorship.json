[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T10-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T10-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-1/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "# Momentum"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Momentum is a project management application targeted at freelancers to help them better understand their time usage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Users can keep track of multiple projects in the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Within each project, users can schedule tasks to be done for it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Users can see statistics on how much time they are spending on each task, as well as each project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "To learn more about Momentum, see the **[Momentum Product Website](https://ay2021s1-cs2103t-t10-1.github.io/tp/)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 3,
      "khoodehui": 9,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "mainClassName \u003d \u0027seedu.momentum.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    archiveName \u003d \u0027projectbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Balasubramaniam Praveen"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/pr4aveen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/pr4aveen)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Functionality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Cheong Ying Yi Clara"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/claracheong4.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/claracheong4)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Farrell Nah Jun Hao"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cimg src\u003d\"images/boundtotheearth.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/boundtotheearth)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Functionality"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Kang Su Min"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/kkangs0226.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/kkangs0226)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Documentation and Code Quality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Functionality and Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Khoo De Hui"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/khoodehui.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](http://github.com/khoodehui)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Team Lead, Scheduling and Tracking"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 1,
      "khoodehui": 23,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ProjectListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "1. `Logic` uses the `ProjectBookParser` class to parse the user command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a project)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* stores the project book data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cProject\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `ProjectBook`, which `Project` references. This allows `ProjectBook` to only require one `Tag` object per unique `Tag`, instead of each `Project` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* can save the project book data in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Classes used by multiple components are in the `seedu.momentum.commons` package."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedProjectBook`. It extends `ProjectBook` with an undo/redo history, stored internally as an `projectBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* `VersionedProjectBook#commit()` — Saves the current project book state in its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* `VersionedProjectBook#undo()` — Restores the previous project book state from its history."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* `VersionedProjectBook#redo()` — Restores a previously undone project book state from its history."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitProjectBook()`, `Model#undoProjectBook()` and `Model#redoProjectBook()` respectively."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedProjectBook` will be initialized with the initial project book state, and the `currentStatePointer` pointing to that single project book state."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th project in the project book. The `delete` command calls `Model#commitProjectBook()`, causing the modified state of the project book after the `delete 5` command executes to be saved in the `projectBookStateList`, and the `currentStatePointer` is shifted to the newly inserted project book state."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new project. The `add` command also calls `Model#commitProjectBook()`, causing another modified project book state to be saved into the `projectBookStateList`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e If a command fails its execution, it will not call `Model#commitProjectBook()`, so the project book state will not be saved into the `projectBookStateList`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 4. The user now decides that adding the project was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoProjectBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous project book state, and restores the project book to that state."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e If the `currentStatePointer` is at index 0, pointing to the initial ProjectBook state, then there are no previous ProjectBook states to restore. The `undo` command uses `Model#canUndoProjectBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoProjectBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the project book to that state."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e If the `currentStatePointer` is at index `projectBookStateList.size() - 1`, pointing to the latest project book state, then there are no undone ProjectBook states to restore. The `redo` command uses `Model#canRedoProjectBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the project book, such as `list`, will usually not call `Model#commitProjectBook()`, `Model#undoProjectBook()` or `Model#redoProjectBook()`. Thus, the `projectBookStateList` remains unchanged."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitProjectBook()`. Since the `currentStatePointer` is not pointing at the end of the `projectBookStateList`, all project book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire project book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the project being deleted)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Freelancers"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Freelancers may take on multiple projects simultaneously, so they need to manage and track the time they spend on each project."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Freelancers want to know how much time they spend on a project in order to accurately bill their clients and set future rates."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Freelancers might want to know more about how they distribute their time and track the time spent on each project so that they can better understand their working style, and plan their time more efficiently."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Time tracking app"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Dashboard view for freelancer to get an overview of all projects"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Multiple groups to represent different categories to help in grouping of tasks such as freelance projects."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Predefined groups that are commonly used for freelancers, such as projects and self-learning/improvement"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Timer to track the duration of a task or Indicate start time and end time for a task, so that the user can price their rates and charge clients more accurately."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Reminder to start doing a task (only when application is open)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Users can generate reports of time usage after a week/any specified duration to understand their work style better and optimise their time usage so that they can plan their time better."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Users can also generate reports of their income over a period of time from various freelance projects"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Interesting/creative views for visualizing the reports/data."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                     | I want to …​                         | So that I can…​                                                         |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| -------- | ------------------------------------------- | ------------------------------------ | ----------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                    | see usage instructions               | refer to instructions when I forget how to use the App                  |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "| `* * *`  | user                                        | add a new project                    |                                                                         |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* * *`  | user                                        | view the project creation date                    |                                                                         |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* * *`  | user                                        | add and edit a deadline for a project                    |                                                                         |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "| `* * *`  | user                                        | delete a project                     | remove entries that I no longer need                                    |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "| `* * *`  | user                                        | find a project by name               | locate details of projects without having to go through the entire list |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "| `* *`    | user                                        | hide private contact details         | minimize chance of someone else seeing them by accident                 |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `*`      | user with many projects in the project book | sort projects by name                | locate a project easily                                                 |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* *`    | new user                                    | start and stop a timer for a project | track the time I spent on the project                                   |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "(For all use cases below, the **System** is the `Momentum` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Use case: Start and End a Timer**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "1.  User requests to start a timer for a specific project in the list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "2.  Momemtum starts the timer for the project."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "3.  User requests to end a timer for a specific project in the list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "4.  Momemtum ends the timer for the project."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "(For all use cases below, the **System** is the `ProjectBook` and the **Actor** is the `user`, unless specified"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " otherwise)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* 2a. There is an existing timer for the given project id."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  * a1. Momentum shows an error message."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* 3a. There is no ongoing timer for the given project id."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * a1. Momentum shows an error message."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* *a. The given project id is invalid."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * a1. Momentum shows an error message."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "**Use case: Delete a project**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1.  User requests to list projects"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2.  ProjectBook shows a list of projects"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "3.  User requests to delete a specific project in the list"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4.  ProjectBook deletes the project"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* 3a. The given project id is invalid."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * a1. Momentum  shows an error message."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2.  Should be able to hold up to 1000 projects without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4.  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* **Command Line Interface(CLI)**: Command Line Interface processes commands in the form of text"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "### Deleting a project"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1. Deleting a project while all projects are being shown"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "   1. Prerequisites: List all projects using the `list` command. Multiple projects in the list."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "      Expected: No project is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 12,
      "pr4aveen": 12,
      "claracheong4": 76,
      "-": 295
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   1. Run the `seedu.momentum.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [Momentum’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 53
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Momentum is a **desktop app** that **helps freelancers track time spent on different projects** and **gain insights on how their time is spent**. It is optimized for **Command Line Interface(CLI) users** so that frequent tasks can be done faster by typing in commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2. Download the latest `momentum.jar` from [here](https://github.com/se-edu/addressbook-level3/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your ProjectBook."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`project`**`n/Momentum d/CS2103T Team Project` : Adds a project named `Momentum` to the Project Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`edit`**`3 n/NewMomentum d/newDescription` : Update the 3rd project in the current list. The name will be changed to “NewMomentum” and the description will be changed to “NewDescription”."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "   * **`find`**`n/NewMomentum` : Find a project that has `NewMomentum` in its name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd project shown in the current list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "   * **`sort`**`type/deadline order/asc` : Sorts the list of projects by deadline in ascending order."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`/exit`** : Exits the app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c!-- ### Viewing help : `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `help` --\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Creating a Project: `project`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Create a project to be tracked by the application."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `project n/NAME [d/DESCRIPTION] [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [t/TAG]`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "A project can have any number of tags (including 0)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "A deadline of a project can include time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "A project can have an empty description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Example: `project n/Momentum d/CS2103T Team Project dd/2020-12-07 dt/11:01:12 t/impt`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Result: Creates a project named “Momentum” with a description “CS2103T Team Project”, a tag \"impt\" and deadline \"2020-10-07\" with time \"11:01:12\"."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Editing a Project: `edit`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Edit a project that has been previously created."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `edit PROJECT_ID [n/NAME] [d/DESCRIPTION] [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [t/TAG]`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Edits the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Removing a description or deadline by typing `d/` or `dd/` without specifying anything after it."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* When editing tags, the existing tags of the project will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* You can remove all the project’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Example: `project 3 n/NewMomentum d/NewDescription dd/2020-12-07 t/normal`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Result: Updates the project with id 3. The name will be changed to “NewMomentum”, the description will be changed to “NewDescription”, all the tags will be removed and a tag named normal is added, and the deadline will be changed to \"2020-12-07\"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Deleting a Project: `delete`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Deletes a project in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `delete PROJECT_ID`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Deletes the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Example: `delete 2`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Result: Deletes the second project in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### View"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "#### View All Projects : `list`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Shows a list of all projects in the project book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "#### Sort Projects : `sort`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Sorts the list of displayed projects in the application."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort [type/SORT_TYPE] [order/SORT_ORDER]`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* There are 3 types of sort."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `type/alpha` will sort the list of projects in alphabetical order."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `type/deadline` will sort the list of projects according to their deadlines."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `type/created` will sort the list of projects according to their date of creation."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* There are 2 sort orders."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `sort/asc` will sort the list of projects in ascending order."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `sort/dsc` will sort the list of projects in descending order."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "   "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "`type/alpha` and `order/asc` will be used as default if both sort type and order are not specified (i.e. command is `sort`)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Current sort type will be used if the `type` is not specified but `order` is specified."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "`order/asc` will be used as default if the `order` is not specified but `type` is specified."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "For `sort type/deadline`, projects without deadlines will be ordered alphabetically after the ordered list of projects with deadlines."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "For both `sort type/deadline` and `sort type/created`, projects with same deadline or same created date will be sorted alphabetically."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "The following are 3 projects in the project book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Project 1. Name: `Ant Hole`, Deadline: `2020-02-02`, Created Date: `2000-02-02`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Project 2. Name: `Brunch`, Deadline: `2010-01-01`, Created Date: `2002-09-09`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Project 3. Name: `Create Logo` , Deadline: `2040-04-04`, Created Date: `2001-01-01`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "##### Sorting by Default order "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Sorts projects in alphabetical, ascending order"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 1, Project 2, Project 3]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "##### Sorting With Only Type Specified "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort type/SORT_TYPE`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Sorts projects in a specified order"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Since order is not specified, default order is ascending"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/alpha`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 1, Project 2, Project 3]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/deadline`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 2, Project 1, Project 3]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/created`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 1, Project 3, Project 2]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "#### Sorting With Only Order Specified "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort order/SORT_ORDER`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Sorts projects in current project order."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* If there is no existing project order (when the application restarts), order will be alphabetical by default."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort order/dsc` (After application restarts for the first time)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 3, Project 2, Project 1]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example `sort order/asc` (Current sort type is Deadline)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 2, Project 1, Project 3]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "#### Sorting With Both Type and Order Specified"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Sorts projects in specified type and order."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Projects that cannot be ordered in a certain type will be ordered alphabetically."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/alpha order/dsc`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 3, Project 2, Project 1]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/deadline order/asc`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 2, Project 1, Project 3]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/created order/dsc`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 2, Project 3, Project 1]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "#### View a Project (_coming soon_)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `/p PROJECT_ID`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* View the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Example: `/p 2`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Result: Navigates to the project page of the second project in the list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "#### View Home (_coming soon_)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Go to home page."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `/home`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "#### View Settings (_coming soon_)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Go to settings page."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `/settings`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "#### Filtering Projects: `find`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searches for projects in the project book based on certain parameters."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Format: `find [match/FILTER_TYPE] [n/NAME [MORE_NAMES]...] [d/DESCRIPTION [MORE_DESCRIPTIONS]...] [t/TAG [MORE_TAGS]...]`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* There are two values for the `match` command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `match/all` requires **all** parameters to match their respective entries in the project for it to be shown."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `match/any` shows the project as long as any parameter matches the user\u0027s input."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "`match/any` will be used if the `match` type is not specified."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "If there are 3 projects in the project book:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1. Name: `Create Logo` , Description: `Make logo for startup XYZ`, Tags: `Design`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "2. Name: `Write Song`, Description: `80s rock music, three minutes`, Tags: `Music`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "3. Name: `Write Article`, Description: `Write and article about why Momentum is the best app out there`, Tags: `Press` and `Writing`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/any n/song article d/startup t/design` will return all three projects. This is because project 1 contains the keyword `startup` in its description and the tag `design`, project 2 contains the keyword `song` in its name and project 3 contains the keyword `article` in its name. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/all n/song article d/startup t/design` will not return any project as there is no project with `song` **and** `article` in its name **and** the `startup` in its description and the tag `design`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/any n/write d/rock` will return projects 2 and 3. This is because project 2 contains `write` in its name and `rock` in its description. Project 3 also contains the word `write` in its name."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/all n/write d/rock` will only return project 2. This is because project 2 is the only project that contains both `write` in its name and `rock` in its description. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searching by name: "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `n/` command checks whether a project has a certain name. There can be multiple names added to this command. For example, `n/car window` will check for the projects that contain `car` or `window` in their names."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Searching by name only requires a partial match. This means that a project with the name `carpet` and `car` can potentially be the result of searching for the term `car`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searching by description: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `d/` command checks whether a project has a certain description. There can be multiple descriptions added to this command. For example, `d/sunday october` will check for the projects that contain `sunday` or `october` in their description."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Searching by description only requires a partial match, similar to searching by name."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searching by tag: "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `t/` command checks whether a project has a certain tag. There can be multiple tags added to this command. For example, `t/freelance errands` will check for the projects that contain the tags `freelance` or `errands`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Searching by tags will require a full word match unlike searching by name or description. This means that searching for the tag `free` will not find a project with the tag `freelance`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searches for tags require a full match whilst searches partial matches are sufficient for searches by name and description."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "#### Starting a Timer for a Project: `start`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `/start PROJECT_ID`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* Starts a timer for the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* Only 1 timer can be running for a project at any time."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Example: `/start 2`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Result: Starts a timer for the second project in the list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "#### Stopping a Timer for a Project: `stop`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `/stop PROJECT_ID`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* Stops a running timer for the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* A timer can only be stopped if there is one already running."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Example: `/stop 2`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Result: Stops the timer for the second project in the list."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Exiting the Program : /`exit`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Format: `/exit`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Result: Exits the program."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer? \u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Momentum home folder."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Create** | `project n/NAME [d/DESCRIPTION] [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [t/TAG]​` \u003cbr\u003e e.g., `project n/Momentum d/CS2103T Team Project dd/2020-12-07 t/impt`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Edit** | `edit PROJECT_ID n/NAME [d/DESCRIPTION] [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [t/TAG]` \u003cbr\u003e e.g., `project 3 n/NewMomentum d/NewDescription dl/2020-12-07 t/normal`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Delete** | `delete PROJECT_ID` \u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "**Find** | `find [match/FILTER_TYPE] [n/NAME [MORE_NAMES]...] [d/DESCRIPTION [MORE_DESCRIPTIONS]...] [t/TAG [MORE_TAGS]...]` \u003cbr\u003e e.g., `find match/any n/Momentum d/new t/normal`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Navigation** (_coming soon_) | `list` \u003cbr\u003e `/project PROJECT_ID` \u003cbr\u003e e.g., `/p 2` \u003cbr\u003e `/settings`  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "**Start Timer** | `start PROJECT_ID` \u003cbr\u003e e.g., `start 2`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "**Stop Timer** | `stop PROJECT_ID` \u003cbr\u003e e.g., `stop 2`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Exit** | `/exit`"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 14,
      "pr4aveen": 44,
      "claracheong4": 79,
      "kkangs0226": 88,
      "-": 120
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "title: Momentum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Momentum is a desktop application for managing your projects and tasks.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* If you are interested in using Momentum, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* If you are interested about developing Momentum, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "khoodehui": 3,
      "-": 15
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## Project: Momentum Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Momentum - Level 3 is a desktop project book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 44
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Changes the remark of an existing project in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the project identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"by the index number used in the last project listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param index of the project in the filtered project list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param remark of the project to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of project data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the project’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a project."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Create a new `Remark` in `seedu.address.model.project`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each project."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Simply add the following to [`seedu.address.ui.ProjectCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public PersonCard(Person project, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    remark.setText(project.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Person projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Person editedProject \u003d new Person(projectToEdit.getName(), projectToEdit.getPhone(), projectToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                projectToEdit.getAddress(), remark, projectToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.setPerson(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedProject));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code projectToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private String generateSuccessMessage(Person projectToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return String.format(message, projectToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 19,
      "-": 375
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.project.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  \"projects\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       Person projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       Person editedProject \u003d createEditedPerson(projectToEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       if (!projectToEdit.isSamePerson(editedProject) \u0026\u0026 model.hasPerson(editedProject)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       model.setPerson(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedProject));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       projects.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6,
      "-": 244
    }
  },
  {
    "path": "src/main/java/seedu/momentum/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/momentum/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/momentum/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonProjectBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.ProjectBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ProjectBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBookStorage projectBookStorage \u003d new JsonProjectBookStorage(userPrefs.getProjectBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        storage \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s project book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The data from the sample project book will be used instead if {@code storage}\u0027s project book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * or an empty project book will be used instead if errors occur when reading {@code storage}\u0027s project book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Optional\u003cReadOnlyProjectBook\u003e projectBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReadOnlyProjectBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            projectBookOptional \u003d storage.readProjectBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (!projectBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ProjectBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            initialData \u003d projectBookOptional.orElseGet(SampleDataUtil::getSampleProjectBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ProjectBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            initialData \u003d new ProjectBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProjectBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            initialData \u003d new ProjectBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProjectBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Starting ProjectBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Project Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Clock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Represents a clock used by the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class Clock {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static ClockState clockState \u003d ClockState.NORMAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static DateTime currentDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Gets the current time according to the state of the clock."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return System time if normal, A fixed time if fixed, and The set time if manual."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static DateTime now() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (clockState \u003d\u003d ClockState.NORMAL) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new DateTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return currentDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Starts the clock with a fixed time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param fixedDateTime The time to start the clock at."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static void initFixed(DateTime fixedDateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d fixedDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        clockState \u003d ClockState.FIXED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Starts a manually adjustable clock."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param startDateTime The starting time of the clock."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static void initManual(DateTime startDateTime) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        clockState \u003d ClockState.MANUAL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Advances the clock\u0027s time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param amount Amount to advance by."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units Units of time to advance by."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static void advance(long amount, ChronoUnit units) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert(clockState \u003d\u003d ClockState.MANUAL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d currentDateTime.plus(amount, units);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /** Reverses the clock\u0027s time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param amount Amount to advance by."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units Units of time to advance by."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static void reverse(long amount, ChronoUnit units) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert(clockState \u003d\u003d ClockState.MANUAL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d currentDateTime.minus(amount, units);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Resets the Clock to a normal state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static void reset() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d new DateTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        clockState \u003d ClockState.NORMAL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Represents the state of the clock."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Fixed: The clock always gives the same time."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Manual: The clock\u0027s time can be manually adjusted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Normal: The clock\u0027s time follows system time."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public enum ClockState {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        FIXED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        MANUAL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        NORMAL"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 73,
      "claracheong4": 13
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a date in the project book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Date implements Instance\u003cLocalDate\u003e, Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Dates should be in ISO8601 format. e.g. 2011-12-03\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DateUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateUtil.FORMAT_DATA.parse(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Calculates the amount of time between two instances of time, in the provided units."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param time1 The earlier instance of time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param time2 The later instance of time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param units The units to the time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static long getTimeBetween(Date time1, Date time2, ChronoUnit units) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return units.between(time1.get(), time2.get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalDate get() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormatted() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.format(DateUtil.FORMAT_DATE_MEDIUM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.date.equals(((Date) other).get())); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (this.get().isBefore(other.get())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.get().isAfter(other.get())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 75,
      "kkangs0226": 11,
      "khoodehui": 13
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a WorkDuration\u0027s dateTime in the project book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DateTime implements Instance\u003cLocalDateTime\u003e, Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Dates and Times should be in ISO8601 format. e.g. 2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateTime A valid DateTime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a new DateTime that is after this DateTime be a specified amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param amount Amount to increase by."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit   Unit to increase with."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The new dateTime"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime plus(long amount, ChronoUnit unit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new DateTime(dateTime.plus(amount, unit));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a new DateTime that is before this DateTime by a specified amount."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param amount Amount to decrease by."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit   Unit to decrease with."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The new dateTime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime minus(long amount, ChronoUnit unit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new DateTime(dateTime.minus(amount, unit));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a given string is a valid dateTime."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeUtil.FORMAT_DATA.parse(test);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Checks if an instance in time is before this instance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param otherTime The time to check."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isBefore(DateTime otherTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return dateTime.isBefore(otherTime.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Checks if an instance in time is after this instance."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param otherTime The time to check."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isAfter(DateTime otherTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return dateTime.isAfter(otherTime.get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Calculates the amount of time between two instances of time, in the provided units."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param time1 The earlier instance of time."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param time2 The later instance of time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units The units to the time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static long getTimeBetween(DateTime time1, DateTime time2, ChronoUnit units) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return units.between(time1.get(), time2.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.toLocalDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.toLocalTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalDateTime get() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormatted() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.format(DateTimeUtil.FORMAT_DATE_TIME_MEDIUM);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateTime.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 dateTime.equals(((DateTime) other).get())); // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(DateTime other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        LocalDateTime thisLocalDateTime \u003d this.get();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        LocalDateTime otherLocalDateTime \u003d other.get();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (thisLocalDateTime.isBefore(otherLocalDateTime)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (thisLocalDateTime.isAfter(otherLocalDateTime)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 32,
      "claracheong4": 108,
      "kkangs0226": 14
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Instance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents an instance in time in the project book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface Instance\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an instance in time with type T."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The instance in time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    T get();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a formatted string representation of instance in time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The formatted instance in time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    String getFormatted();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String LOG_FILE \u003d \"projectbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_PROJECTS_LISTED_OVERVIEW \u003d \"%1$d projects listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.TimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a time in the project book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Time implements Instance\u003cLocalTime\u003e, Comparable\u003cTime\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Times should be in ISO8601 format. e.g. 10:15:30\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time A valid Time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d LocalTime.parse(time, TimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Time(LocalTime time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            TimeUtil.FORMAT_DATA.parse(test);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalTime get() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormatted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.format(TimeUtil.FORMAT_TIME_MEDIUM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.time.equals(((Time) other).get())); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(Time other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (this.get().isBefore(other.get())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.get().isAfter(other.get())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 75,
      "kkangs0226": 12
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods used for parsing and formatting LocalDateTime objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME_LONG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME_MEDIUM \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME_SHORT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATA \u003d DateTimeFormatter.ISO_DATE_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods used for parsing and formatting LocalDate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_LONG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_MEDIUM \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_SHORT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATA \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param sentence cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   Ignores case, but a partial match is sufficient."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       containsPartialIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       containsPartialIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       containsPartialIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //partial word match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param sentence cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static boolean containsPartialIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String preppedKeyword \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        checkArgument(!preppedKeyword.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        checkArgument(preppedKeyword.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return preppedSentence.contains(preppedKeyword);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 29,
      "claracheong4": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/TimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods used for parsing and formatting LocalTime objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_TIME_LONG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedTime(FormatStyle.LONG);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_TIME_MEDIUM \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_TIME_SHORT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATA \u003d DateTimeFormatter.ISO_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the ProjectBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see seedu.momentum.model.Model#getProjectBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    ReadOnlyProjectBook getProjectBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of projects"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the user prefs\u0027 project book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    StatisticGenerator getStatistic();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 3,
      "pr4aveen": 1,
      "claracheong4": 16,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.ProjectBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final StatisticGenerator statistic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBookParser projectBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statistic \u003d new StatisticManager(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBookParser \u003d new ProjectBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Command command \u003d projectBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            storage.saveProjectBook(model.getProjectBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statistic.updateStatistics();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticGenerator getStatistic() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return statistic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return model.getProjectBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return model.getProjectBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 10,
      "pr4aveen": 2,
      "claracheong4": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Adds a project to the project book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"project\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a project to the project book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + String.format(\"[%sDEADLINE_DATE [%sDEADLINE_TIME] ] \", PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + PREFIX_DESCRIPTION + \"random project\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Project}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public AddCommand(Project project) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 9,
      "claracheong4": 13,
      "kkangs0226": 3,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Clears the project book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Momentum has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.setProjectBook(new ProjectBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Deletes a project identified using it\u0027s displayed index from the project book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \": Deletes the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project projectToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 7,
      "claracheong4": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Edits the details of an existing project in the project book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the project identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"by the index number used in the displayed project list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + String.format(\"[%sDEADLINE_DATE [%sDEADLINE_TIME] ] \", PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_EDIT_PROJECT_SUCCESS \u003d \"Edited Project: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final EditProjectDescriptor editProjectDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param index                 of the project in the filtered project list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param editProjectDescriptor details to edit the project with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditCommand(Index index, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(editProjectDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.editProjectDescriptor \u003d new EditProjectDescriptor(editProjectDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project editedProject \u003d createEditedProject(projectToEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!projectToEdit.isSameProject(editedProject) \u0026\u0026 model.hasProject(editedProject)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editedProject));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates and returns a {@code Project} with the details of {@code projectToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * edited with {@code editProjectDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static Project createEditedProject(Project projectToEdit, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assert projectToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Name updatedName \u003d editProjectDescriptor.getName().orElse(projectToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Description updatedDescription \u003d editProjectDescriptor.getDescription().orElse(projectToEdit.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Date createdDate \u003d projectToEdit.getCreatedDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline updatedDeadline \u003d editProjectDescriptor.getDeadline().orElse(projectToEdit.getDeadline());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editProjectDescriptor.getTags().orElse(projectToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList durationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationList.setDurations(projectToEdit.getDurationList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new Project(updatedName, updatedDescription, createdDate, updatedDeadline, updatedTags,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                durationList, projectToEdit.getTimer());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 editProjectDescriptor.equals(e.editProjectDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Stores the details to edit the project with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * corresponding field value of the project."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static class EditProjectDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public EditProjectDescriptor() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public EditProjectDescriptor(EditProjectDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, deadline, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (!(other instanceof EditProjectDescriptor)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            EditProjectDescriptor e \u003d (EditProjectDescriptor) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "pr4aveen": 32,
      "claracheong4": 35,
      "kkangs0226": 15,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Project Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.FIND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Finds and lists all projects in project book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all projects whose names contain any or all of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + FIND_TYPE + \"FIND_TYPE ] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME_KEYWORD [MORE_NAME_KEYWORDS]... ] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION_KEYWORD [MORE_DESCRIPTION_KEYWORDS]... ] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG_KEYWORD [MORE_TAG_KEYWORDS]... ] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + FIND_TYPE + \"all \" + PREFIX_NAME + \"alice bob charlie \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + PREFIX_DESCRIPTION + \"likes dim sum \" + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final Predicate\u003cProject\u003e predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public FindCommand(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW, model.getFilteredProjectList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 19,
      "claracheong4": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Lists all projects in the project book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "claracheong4": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Sorts the projects displayed in a particular order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_ASCENDING_ORDER \u003d \"asc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_DESCENDING_ORDER \u003d \"dsc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_ALPHA_TYPE \u003d \"alpha\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_DEADLINE_TYPE \u003d \"deadline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_CREATED_TYPE \u003d \"created\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_ALPHA_TYPE \u003d \"alphabetical, \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_DEADLINE_TYPE \u003d \"deadline, \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_CREATED_TYPE \u003d \"created date, \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_DEFAULT_TYPE \u003d \"default alphabetical, ascending\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_ASCENDING_ORDER \u003d \"ascending\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_DESCENDING_ORDER \u003d \"descending\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts projects by specified type and order.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Default sort is of type: Alphabetical and order: Ascending. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + SORT_TYPE + \"SORT_TYPE ] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + SORT_ORDER + \"SORT_ORDER ] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + SORT_TYPE + \"alpha \" + SORT_ORDER + \"asc\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_TYPE_OR_ORDER \u003d \"Sort type can only be one of the following: \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Alphabetical: alpha; Deadline: deadline; Created Date: created. \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Sort order can only be one of the following: \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Ascending: asc; Descending: dsc. \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + SORT_TYPE + \"alpha \" + SORT_ORDER + \"asc\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_SORT_SUCCESS \u003d \"List has been sorted in %1$s%2$s order\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType sortType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private boolean isAscending;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private boolean isDefault;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Creates a SortCommand to sort the list of projects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType Type of sort applied to projects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending Boolean value to check if order of sort applied to projects is ascending."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isDefault Boolean value to check if SortCommand is default."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public SortCommand(SortType sortType, boolean isAscending, boolean isDefault) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.isAscending \u003d isAscending;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.isDefault \u003d isDefault;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String order \u003d isDefault"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ? OUTPUT_DEFAULT_TYPE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                : isAscending"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ? OUTPUT_ASCENDING_ORDER"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                : OUTPUT_DESCENDING_ORDER;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case ALPHA:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            type \u003d OUTPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            type \u003d OUTPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case CREATED:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            type \u003d OUTPUT_CREATED_TYPE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (isDefault) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            sortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.orderFilteredProjectList(sortType, isAscending);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_SUCCESS, type, order));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 sortType.equals(((SortCommand) other).sortType)) // field check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 isAscending \u003d\u003d (((SortCommand) other).isAscending) // field check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 isDefault \u003d\u003d (((SortCommand) other).isDefault); //field check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 105
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Starts a timer tracking a project identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            + \": Starts the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_START_TIMER_SUCCESS \u003d \"Started Project %1$s, at: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_EXISTING_TIMER_ERROR \u003d \"There is already a timer running for this project\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StartCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStart \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (projectToStart.isRunning()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_TIMER_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project newProject \u003d projectToStart.startTimer();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.setProject(projectToStart, newProject);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_START_TIMER_SUCCESS, targetIndex.getOneBased())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                + newProject.getTimer().getStartTime().getFormatted());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StartCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 63
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/StopCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Stops a previously started timer tracking a project identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StopCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            + \": Stops the project identified by the index number used in the displayed project list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_STOP_TIMER_SUCCESS \u003d \"Stopped Project: %s! Total Duration: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_NO_TIMER_ERROR \u003d \"There is no timer running for this project.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StopCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStop \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!projectToStop.isRunning()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TIMER_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project newProject \u003d projectToStop.stopTimer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.setProject(projectToStop, newProject);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_STOP_TIMER_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                newProject.getTimer().getTimeBetween(ChronoUnit.MINUTES)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof StopCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StopCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 64
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        PREFIX_DEADLINE_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            description \u003d Description.EMPTY_DESCRIPTION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            description \u003d ParserUtil.parseDescription("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Date createdDate \u003d new Date(Clock.now().getDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                argMultimap.getValue(PREFIX_DEADLINE_DATE),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                argMultimap.getValue(PREFIX_DEADLINE_TIME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project project \u003d new Project(name, description, createdDate, deadline, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new AddCommand(project);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 24,
      "kkangs0226": 11,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an Optional.empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "kkangs0226": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Prefix definitions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DATE \u003d new Prefix(\"dd/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_TIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Search parameters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Prefix FIND_TYPE \u003d new Prefix(\"match/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    // Sort parameters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Prefix SORT_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Prefix SORT_ORDER \u003d new Prefix(\"order/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 4,
      "claracheong4": 3,
      "kkangs0226": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        PREFIX_DEADLINE_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor editProjectDescriptor \u003d new EditCommand.EditProjectDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            editProjectDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            editProjectDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            editProjectDescriptor.setDeadline(ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    argMultimap.getValue(PREFIX_DEADLINE_DATE),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    argMultimap.getValue(PREFIX_DEADLINE_TIME)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editProjectDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!editProjectDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new EditCommand(index, editProjectDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6,
      "claracheong4": 17,
      "kkangs0226": 5,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.FIND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.BinaryOperator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.TagListContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String FIND_ARGUMENT_DELIMITER \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_TAG, FIND_TYPE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Prefix[] prefixesToParse \u003d new Prefix[] {PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_TAG};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty() || !anyPrefixPresent(argMultimap, prefixesToParse)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindType findType \u003d getMatchType(argMultimap); // only parses find type if the argument exists"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cPredicate\u003cProject\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e(); // list of all predicates that will be applied"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Prefix prefix : prefixesToParse) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            parseArguments(argMultimap, prefix, predicateList, findType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new FindCommand(combinePredicates(findType, predicateList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Predicate\u003cProject\u003e combinePredicates(FindType findType, List\u003cPredicate\u003cProject\u003e\u003e predicateList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        BinaryOperator\u003cPredicate\u003cProject\u003e\u003e operationType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            operationType \u003d Predicate::and;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Find any is the default type"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            operationType \u003d Predicate::or;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return predicateList.stream().reduce(operationType).orElse(x -\u003e true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private void parseArguments (ArgumentMultimap argMultimap, Prefix prefix,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "             List\u003cPredicate\u003cProject\u003e\u003e predicateList, FindType findType) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (argMultimap.getValue(prefix).isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String args \u003d argMultimap.getValue(prefix).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(trimmedArgs.split(FIND_ARGUMENT_DELIMITER));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (prefix.equals(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            predicateList.add(new NameContainsKeywordsPredicate(findType, keywords));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else if (prefix.equals(PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            predicateList.add(new DescriptionContainsKeywordsPredicate(findType, keywords));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else if (prefix.equals(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            predicateList.add(new TagListContainsKeywordsPredicate(findType, keywords));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private FindType getMatchType(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (argMultimap.getValue(FIND_TYPE).isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return FindType.ANY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String findTypeArgument \u003d argMultimap.getValue(FIND_TYPE).get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        findTypeArgument \u003d findTypeArgument.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return FindType.valueOf(findTypeArgument.toUpperCase());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns false if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static boolean anyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 100,
      "claracheong4": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Parses {@code Optional\u003cString\u003e date} and {@code Optional\u003cString\u003e time}into a {@code Deadline}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static Deadline parseDeadline(Optional\u003cString\u003e date, Optional\u003cString\u003e time) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (date.isEmpty() || date.get().isBlank()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedDate \u003d date.get().trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Date.isValid(trimmedDate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (time.isEmpty() || time.get().isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline(trimmedDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedTime \u003d time.get().trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Time.isValid(trimmedTime)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Deadline(trimmedDate, trimmedTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 31,
      "kkangs0226": 4,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ProjectBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        case StopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new StopCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 8,
      "claracheong4": 13,
      "kkangs0226": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_ASCENDING_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_CREATED_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_DESCENDING_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ArgumentTokenizer.tokenize(args, SORT_TYPE, SORT_ORDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String sortOrder \u003d parseSortOrder(argMultimap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        boolean isAscending \u003d sortOrder.equals(INPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        SortType sortType \u003d parseSortType(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        boolean isDefault \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(SORT_TYPE).isEmpty() \u0026\u0026 argMultimap.getValue(SORT_ORDER).isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            isDefault \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            sortType \u003d SortType.NULL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new SortCommand(sortType, isAscending, isDefault);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private String parseSortOrder(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(SORT_ORDER).isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return INPUT_ASCENDING_ORDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String sortOrder \u003d argMultimap.getValue(SORT_ORDER).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortOrder \u003d sortOrder.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (sortOrder.equals(INPUT_ASCENDING_ORDER) || sortOrder.equals(INPUT_DESCENDING_ORDER)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return sortOrder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_INVALID_SORT_TYPE_OR_ORDER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType parseSortType(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(SORT_TYPE).isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.NULL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String sortType \u003d argMultimap.getValue(SORT_TYPE).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortType \u003d sortType.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case INPUT_ALPHA_TYPE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.ALPHA;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case INPUT_DEADLINE_TYPE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.DEADLINE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case INPUT_CREATED_TYPE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.CREATED;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_INVALID_SORT_TYPE_OR_ORDER));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 86
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/StartCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Parses input arguments and creates a new StartCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * and returns a StartCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new StartCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 29
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/StopCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Parses input arguments and creates a new StopCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StopCommandParser implements Parser\u003cStopCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StopCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * and returns a StopCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StopCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new StopCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 30
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/PeriodicTotalTimeStatistic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Tracks the total time spent on each project for a specific period of time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class PeriodicTotalTimeStatistic extends Statistic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ChronoUnit period;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ChronoUnit units;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ObservableList\u003cStatisticEntry\u003e timeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code PeriodicTotalTimeStatistic}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param period Period of time to track."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units Units for the total time calculated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public PeriodicTotalTimeStatistic(ChronoUnit period, ChronoUnit units) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(period, units);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.units \u003d units;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code PeriodicTotalTimeStatistic} with specified data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param period Period of time to track."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units Units for the total time calculated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param timeList Data for this statistic."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public PeriodicTotalTimeStatistic(ChronoUnit period,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                      ChronoUnit units,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                      ObservableList\u003cStatisticEntry\u003e timeList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(period, units, timeList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.units \u003d units;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timeList \u003d timeList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void calculate(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        DateTime weekStart \u003d Clock.now().minus(1, period);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        DateTime weekEnd \u003d Clock.now();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //Only calculate statistics for projects visible to the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cProject\u003e projects \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timeList.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (Project project : projects) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            long totalDuration \u003d calculateTimeSpent(project, weekStart, weekEnd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            StatisticEntry entry \u003d new StatisticEntry(project.getName().fullName, totalDuration);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            timeList.add(entry);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private long calculateTimeSpent(Project project, DateTime weekStart, DateTime weekEnd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cWorkDuration\u003e durations \u003d project.getDurationList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        long totalDuration \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (WorkDuration duration : durations) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            DateTime startTime \u003d duration.getStartTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            DateTime stopTime \u003d duration.getStopTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (stopTime.isBefore(weekStart) || startTime.isAfter(weekEnd)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (startTime.isBefore(weekStart) \u0026\u0026 stopTime.isBefore(weekEnd)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                // Duration is cut in two by the week"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                totalDuration +\u003d DateTime.getTimeBetween(weekStart, stopTime, units);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                // Whole Duration is in the week"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                totalDuration +\u003d duration.getTimeBetween(units);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return totalDuration;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObservableList\u003cStatisticEntry\u003e getDisplayList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic that \u003d (PeriodicTotalTimeStatistic) o;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return period \u003d\u003d that.period"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 units \u003d\u003d that.units"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 Objects.equals(timeList, that.timeList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return Objects.hash(period, timeList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 121
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/Statistic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Represents a statistic tracked by the app and the instructions to calculate it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public abstract class Statistic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Calculates the statistic being tracked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param model The data required to calculate the statistic."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public abstract void calculate(Model model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public abstract ObservableList\u003cStatisticEntry\u003e getDisplayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/StatisticEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Encapsulates a piece of statistics data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StatisticEntry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private double value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code StatisticEntry}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param label The label for the statistic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param value The statistic value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticEntry(String label, double value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(label);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return String.format(\"(%s, %f)\", label, value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry that \u003d (StatisticEntry) o;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return label.equals(that.label)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 value \u003d\u003d that.value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return Objects.hash(label, value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 57
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/StatisticGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * API of a statistics generator"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public interface StatisticGenerator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Recalculates all the statistics being tracked."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void updateStatistics();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns a list containing the amount of time spent on each project in the past week."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return A list of StatisticEntry, each entry containing the project name and time spent."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    ObservableList\u003cStatisticEntry\u003e getWeeklyTimePerProjectStatistic();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 21
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/StatisticManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * The main statistics manager of the app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * This class contains the specifications of statistics being tracked by the app,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * and methods to generate those statistics"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StatisticManager implements StatisticGenerator {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Statistics being tracked by the app"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Statistic weeklyTotalTimePerProjectStatistic \u003d new PeriodicTotalTimeStatistic(ChronoUnit.WEEKS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Maintain an array of the above statistics for easy iteration"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Statistic[] statistics \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        weeklyTotalTimePerProjectStatistic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code StatisticManager} that tracks statistics form the specified model."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param model The Model to track."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticManager(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code StatisticManager} with a specified model and statistics data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param model The Model to track."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param statistics The data to set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticManager(Model model, Statistic[] statistics) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (Statistic statistic : statistics) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            statistic.calculate(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObservableList\u003cStatisticEntry\u003e getWeeklyTimePerProjectStatistic() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return weeklyTotalTimePerProjectStatistic.getDisplayList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticManager that \u003d (StatisticManager) o;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return Objects.equals(model, that.model)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 Arrays.equals(statistics, that.statistics);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int result \u003d Objects.hash(model, weeklyTotalTimePerProjectStatistic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        result \u003d 31 * result + Arrays.hashCode(statistics);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 82
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the user prefs\u0027 project book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the user prefs\u0027 project book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void setProjectBookFilePath(Path projectBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Replaces project book data with the data in {@code projectBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void setProjectBook(ReadOnlyProjectBook projectBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /** Returns the ProjectBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    ReadOnlyProjectBook getProjectBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the project book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    boolean hasProject(Project project);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Deletes the given project."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The project must exist in the project book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void deleteProject(Project target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code project} must not already exist in the project book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the given project {@code target} with {@code editedProject}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code target} must exist in the project book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the project"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /** Returns an unmodifiable view of the filtered project list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Updates the filter of the filtered project list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Orders the list of projects in a way given by the {@code sortType}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @throws NullPointerException if {@code sortType} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void orderFilteredProjectList(SortType sortType, boolean isAscending);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 13,
      "claracheong4": 16,
      "kkangs0226": 9,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents the in-memory model of the project book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBook projectBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private Predicate\u003cProject\u003e currentPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType currentSortType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private boolean currentSortIsAscending;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Initializes a ModelManager with the given projectBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ModelManager(ReadOnlyProjectBook projectBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireAllNonNull(projectBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.fine(\"Initializing with project book: \" + projectBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBook \u003d new ProjectBook(projectBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(this.projectBook.getProjectList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentPredicate \u003d PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentSortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentSortIsAscending \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this(new ProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return userPrefs.getProjectBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath(Path projectBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(projectBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(projectBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBook(ReadOnlyProjectBook projectBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBook.resetData(projectBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook.hasProject(project);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.renameProject(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.addProject(project);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        orderFilteredProjectList(currentSortType, currentSortIsAscending);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.setProject(target, editedProject);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Project} backed by the internal list of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code versionedProjectBook}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentPredicate \u003d predicate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void orderFilteredProjectList(SortType orderType, boolean isAscending) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireAllNonNull(orderType, isAscending);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentSortIsAscending \u003d isAscending;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentSortType \u003d orderType;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        projectBook.setOrder(orderType, isAscending);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        updateFilteredProjectList(currentPredicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook.equals(other.projectBook)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 filteredProjects.equals(other.filteredProjects);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 15,
      "claracheong4": 30,
      "kkangs0226": 18,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Wraps all data at the project-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Duplicates are not allowed (by .isSameProject comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBook implements ReadOnlyProjectBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates an ProjectBook using the Projects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook(ReadOnlyProjectBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the contents of the project list with {@code projects}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.projects.setProjects(projects);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Resets the existing data of this {@code ProjectBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData(ReadOnlyProjectBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /// sort operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of the list of projects according to given {@code sortType} and {@code isAscending}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType type of sort."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending order of sort."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder(SortType sortType, boolean isAscending) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(sortType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        projects.setOrder(sortType, isAscending);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //// project-level operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the project book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Adds a project to the project book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The project must not already exist in the project book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projects.add(p);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code target} must exist in the project book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the project"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projects.setProject(target, editedProject);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Removes {@code key} from this {@code ProjectBook}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code key} must exist in the project book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void renameProject(Project key) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projects.asUnmodifiableObservableList().size() + \" projects\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Set\u003cTag\u003e getProjectTags() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        getProjectList().forEach(project -\u003e tags.addAll(project.getTags()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof ProjectBook // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 projects.equals(((ProjectBook) other).projects));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return projects.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 24,
      "claracheong4": 20,
      "kkangs0226": 14,
      "khoodehui": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ReadOnlyProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Unmodifiable view of an project book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface ReadOnlyProjectBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an unmodifiable view of the projects list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * This list will not contain any duplicate projects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Returns the collection of all tags that the user has entered for the projects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    Set\u003cTag\u003e getProjectTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 7,
      "khoodehui": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Path projectBookFilePath \u003d Paths.get(\"data\" , \"projectbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        setProjectBookFilePath(newUserPrefs.getProjectBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath(Path projectBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(projectBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBookFilePath \u003d projectBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 projectBookFilePath.equals(o.projectBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(guiSettings, projectBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + projectBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project\u0027s deadline in the project book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Deadline implements Comparable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d Date.MESSAGE_CONSTRAINTS + \"\\n\" + Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Optional\u003cDate\u003e date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Optional\u003cTime\u003e time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs an empty deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d Optional.empty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline(String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(Date.isValid(date), Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d Optional.of(new Date(date));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline(String date, String time) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(date, time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(Date.isValid(date), Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(Time.isValid(time), Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d Optional.of(new Date(date));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d Optional.of(new Time(time));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.isEmpty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Date getDate() throws NoSuchElementException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean hasTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.isPresent();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Time getTime() throws NoSuchElementException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormattedDeadline() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return isEmpty() ? \"No deadline set\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            : this.date.map(Date::getFormatted).orElse(\"\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + this.time.map(time -\u003e \" \" + time.getFormatted()).orElse(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Gets the number of days to the date of the deadline, from the current time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Number of days to deadline."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public long daysToDeadline() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        //return Date.getTimeBetween(Clock.now().getDate(), getDate(), ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return ChronoUnit.DAYS.between(Clock.now().getDate(), getDate().get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.map(Date::toString).orElse(\"\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + this.time.map(Time::toString).orElse(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.date.equals(((Deadline) other).date)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.time.equals(((Deadline) other).time)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(this.date, this.time);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(Deadline other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Date thisDate \u003d this.getDate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Date otherDate \u003d other.getDate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (thisDate.get().isBefore(otherDate.get())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (thisDate.get().isAfter(otherDate.get())) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return sameDateCompare(other);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Compares time of two deadlines with same date."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param other other deadline."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer to indicate order."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private int sameDateCompare(Deadline other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!this.hasTime() \u0026\u0026 other.hasTime()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.hasTime() \u0026\u0026 !other.hasTime()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.hasTime() \u0026\u0026 other.hasTime()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Time thisTime \u003d this.getTime();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Time otherTime \u003d other.getTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return thisTime.compareTo(otherTime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 95,
      "kkangs0226": 37,
      "khoodehui": 14
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Represent a Project\u0027s description in the project book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description will be removed if blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Description EMPTY_DESCRIPTION \u003d new Description(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param description A description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return value.equals(EMPTY_DESCRIPTION.value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 42,
      "khoodehui": 4
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project\u0027s name in the project book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String thisName \u003d this.fullName.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String otherName \u003d other.fullName.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return thisName.compareTo(otherName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "kkangs0226": 8,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Project.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project in the project book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class Project {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Date createdDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Timer timer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final UniqueDurationList durations;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code Project}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param description A description of the project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDate A date associated with the creation of the project."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param deadline A deadline associated with the project."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param tags A set of tags associated to the project."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param durations A list of {@code WorkDuration} associated with the project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param timer A timer associated with the project."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project(Name name, Description description, Date createdDate, Deadline deadline, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                   UniqueDurationList durations, Timer timer) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.durations \u003d durations;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a new {@code Project}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDate A date associated with the creation of the project"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param deadline A deadline associated with the project."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param description A description of the project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param tags A set of tags associated to the project."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project(Name name, Description description, Date createdDate, Deadline deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.durations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Date getCreatedDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return createdDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Gets Deadline and name for {@code DeadLineCompare} comparator."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Returns null if deadline is empty as {@code Comparator.nullsLast} method is used."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public HashMap\u003cString, Object\u003e getNullOrDeadline() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (deadline.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name name \u003d getName();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Deadline deadline \u003d getDeadline();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        HashMap\u003cString, Object\u003e nameDeadlineMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        nameDeadlineMap.put(\"name\", name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        nameDeadlineMap.put(\"deadline\", deadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return nameDeadlineMap;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns an unmodifiable view of the durations list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObservableList\u003cWorkDuration\u003e getDurationList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return durations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns a copy of this project with its timer started."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return A copy of this project, but with its timer started"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Project startTimer() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer newTimer \u003d timer.start();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, createdDate, deadline, tags, durations, newTimer);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns a copy of this project with its timer stopped, then adds the timed duration into"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return A copy of this project, but with its timer stopped"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Project stopTimer() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer newTimer \u003d timer.stop();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        WorkDuration duration \u003d new WorkDuration(newTimer.getStartTime(), newTimer.getStopTime());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList newDurations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        newDurations.setDurations(durations);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        newDurations.add(duration);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, createdDate, deadline, tags, newDurations, newTimer);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Timer getTimer() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return timer;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Checks if the project\u0027s timer is currently running."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return timer.isRunning();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both projects of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a weaker notion of equality between two projects."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isSameProject(Project otherProject) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (otherProject \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return otherProject !\u003d null"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getName().equals(getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getCreatedDate().equals(getCreatedDate())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getDeadline().equals(getDeadline());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both projects have the same identity and data fields."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a stronger notion of equality between two projects."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(other instanceof Project)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project otherProject \u003d (Project) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return otherProject.getName().equals(getName())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 otherProject.getTags().equals(getTags())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 otherProject.durations.equals(durations)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getCreatedDate().equals(getCreatedDate())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherProject.getDeadline().equals(getDeadline());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(name, description, createdDate, deadline, tags, durations, timer);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(\" Created Date: \")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(getCreatedDate())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 74,
      "pr4aveen": 12,
      "claracheong4": 40,
      "kkangs0226": 27,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/SortType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public enum SortType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    ALPHA,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    CREATED,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    NULL"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 8
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/UniqueProjectList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.comparators.CreatedDateCompare;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.comparators.DeadlineCompare;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.comparators.NameCompare;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * A list of projects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A project is considered unique by comparing using {@code Project#isSameProject(Project)}. As such, adding and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * updating of projects uses Project#isSameProject(Project) for equality so as to ensure that the project being added or"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * updated is unique in terms of identity in the UniqueProjectList. However, the removal of a project uses"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Project#equals(Object) so as to ensure that the project with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * @see Project#isSameProject(Project)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortType DEFAULT_SORT_TYPE \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType sortType \u003d DEFAULT_SORT_TYPE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the list contains an equivalent project as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Adds a project to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The project must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void add(Project toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing project in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Removes the equivalent project from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The project must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects(UniqueProjectList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the contents of this list with {@code projects}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!projectsAreUnique(projects)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of the list of projects according to given {@code sortType} and {@code isAscending}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType type of sort."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending order of sort."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder(SortType sortType, boolean isAscending) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(sortType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case ALPHA:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrderAlphaType(isAscending);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrderDeadlineType(isAscending);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case CREATED:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrderCreatedDateType(isAscending);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case NULL:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrderNullType(isAscending);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            // Will always be one of the above. Default does nothing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of list of projects by alphabetical order, ascending or descending based on user input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending order of sort specified by user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private void setOrderAlphaType(boolean isAscending) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Comparator\u003cProject\u003e nameCompare \u003d new NameCompare();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        nameCompare \u003d isAscending ? nameCompare : nameCompare.reversed();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        internalList.sort(nameCompare);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of list of projects by deadline order, ascending or descending based on user input."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending order of sort specified by user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private void setOrderDeadlineType(boolean isAscending) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Comparator\u003cProject\u003e nameCompare \u003d new NameCompare();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Comparator\u003cHashMap\u003cString, Object\u003e\u003e deadlineCompare \u003d new DeadlineCompare();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        deadlineCompare \u003d isAscending ? deadlineCompare : deadlineCompare.reversed();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortType \u003d SortType.DEADLINE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        internalList.sort(Comparator.comparing(Project::getNullOrDeadline, Comparator.nullsLast(deadlineCompare))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .thenComparing(nameCompare));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of list of projects by created date order, ascending or descending based on user input."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending order of sort specified by user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private void setOrderCreatedDateType(boolean isAscending) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Comparator\u003cProject\u003e createdDateCompare \u003d new CreatedDateCompare();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        createdDateCompare \u003d isAscending ? createdDateCompare : createdDateCompare.reversed();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.sortType \u003d SortType.CREATED;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        internalList.sort(createdDateCompare);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of the list of projects to current sort type with specified order"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * if sort type has not been specified by user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending order of sort specified by user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private void setOrderNullType(boolean isAscending) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch(this.sortType) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case ALPHA:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrder(SortType.ALPHA, isAscending);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrder(SortType.DEADLINE, isAscending);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case CREATED:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setOrder(SortType.CREATED, isAscending);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            // Will always be one of the above. Default does nothing."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if {@code projects} contains only unique projects."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 131,
      "claracheong4": 6,
      "kkangs0226": 97
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/CreatedDateCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Compares date created of two projects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class CreatedDateCompare implements Comparator\u003cProject\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Compares the date created of two projects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p1 first project to compare."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p2 second project to compare."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compare(Project p1, Project p2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Date p1Date \u003d p1.getCreatedDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Date p2Date \u003d p2.getCreatedDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        NameCompare nameCompare \u003d new NameCompare();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (p1Date.get().isBefore(p2Date.get())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (p1Date.get().isAfter(p2Date.get())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return nameCompare.compare(p1, p2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 35
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/DeadlineCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Compares deadline of two projects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DeadlineCompare implements Comparator\u003cHashMap\u003cString, Object\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Compares deadline of two projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p1 first project to compare."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p2 second project to compare."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compare(HashMap\u003cString, Object\u003e p1, HashMap\u003cString, Object\u003e p2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Deadline p1Deadline \u003d (Deadline) p1.get(\"deadline\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Deadline p2Deadline \u003d (Deadline) p2.get(\"deadline\");;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name p1Name \u003d (Name) p1.get(\"name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name p2Name \u003d (Name) p2.get(\"name\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int deadlineCompareToValue \u003d p1Deadline.compareTo(p2Deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (deadlineCompareToValue \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return p1Name.compareTo(p2Name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return deadlineCompareToValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 35
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/NameCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class NameCompare implements Comparator\u003cProject\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Compares name of two projects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p1 first project to compare."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p2 second project to compare."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compare(Project p1, Project p2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name p1Name \u003d p1.getName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name p2Name \u003d p2.getName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return p1Name.compareTo(p2Name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 22
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/exceptions/DuplicateProjectException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Signals that the operation will result in duplicate Projects (Projects are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 10,
      "claracheong4": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/exceptions/ProjectNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Signals that the operation is unable to find the specified project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 5,
      "claracheong4": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Tests that a {@code Project}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cProject\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Predicate to check whether the {@code Description} of a {@code Project} contains a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * certain keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean test(Project project) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Predicate\u003cString\u003e predicate \u003d keyword -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                StringUtil.containsPartialIgnoreCase(project.getDescription().value, keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().allMatch(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().anyMatch(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)) // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 findType \u003d\u003d ((DescriptionContainsKeywordsPredicate) other).findType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 50
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/FindType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public enum FindType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ANY,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ALL"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Tests that a {@code Project}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cProject\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Predicate to check whether the {@code Name} of a {@code Project} contains a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * certain keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public NameContainsKeywordsPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean test(Project project) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Predicate\u003cString\u003e predicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            keyword -\u003e StringUtil.containsPartialIgnoreCase(project.getName().fullName, keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().allMatch(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().anyMatch(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)) // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 findType \u003d\u003d ((NameContainsKeywordsPredicate) other).findType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 27,
      "claracheong4": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/TagListContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Tests that a {@code Project}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TagListContainsKeywordsPredicate implements Predicate\u003cProject\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Predicate to check whether the {@code Tag} of a {@code Project} contains a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * certain keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public TagListContainsKeywordsPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean test(Project project) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String tagString \u003d buildTagString(project.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Predicate\u003cString\u003e predicate \u003d keyword -\u003e StringUtil.containsWordIgnoreCase(tagString, keyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().allMatch(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().anyMatch(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                || (other instanceof TagListContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagListContainsKeywordsPredicate) other).keywords)) // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 findType \u003d\u003d ((TagListContainsKeywordsPredicate) other).findType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Converts a set of {@code Tag} to a string where each entry is followed by a space."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This is the format used by {@code StringUtil} methods."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags set of tags."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @return string representation of tags."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private String buildTagString(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            sb.append(tag.tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 68
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Tag in the project book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/Timer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Represents a timer in momentum."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class Timer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private DateTime startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private DateTime stopDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private boolean isRunning;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a timer with default settings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Timer() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.startDateTime \u003d Clock.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.stopDateTime \u003d Clock.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.isRunning \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a timer with the provided data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param startDateTime The dateTime when the timer was started."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param stopDateTime The dateTime when the timer was stopped."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param isRunning Whether the timer is running."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Timer(DateTime startDateTime, DateTime stopDateTime, boolean isRunning) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.stopDateTime \u003d stopDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.isRunning \u003d isRunning;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Start the timer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Timer start() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert (!isRunning);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new Timer(Clock.now(), Clock.now(), true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Stop the timer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Timer stop() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert (isRunning);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Timer(startDateTime, Clock.now(), false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime getStartTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assert (startDateTime !\u003d null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime getStopTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assert (stopDateTime !\u003d null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return stopDateTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the length of dateTime tracked in this timer, in (@code unit) units."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit The units for the length of dateTime."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The length of dateTime in the provided units."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public long getTimeBetween(ChronoUnit unit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert (!isRunning);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return unit.between(startDateTime.get(), stopDateTime.get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return isRunning;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer other \u003d (Timer) o;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return startDateTime.equals(other.startDateTime)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 Objects.equals(startDateTime, other.startDateTime)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 Objects.equals(stopDateTime, other.stopDateTime)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 Objects.equals(isRunning, other.isRunning);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(startDateTime, stopDateTime, isRunning);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 75,
      "claracheong4": 25
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/UniqueDurationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DuplicateDurationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DurationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * A list of durations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * A duration is considered unique by comparing using {@code duration#isSameDuration(WorkDuration)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * and updating of durations uses WorkDuration#isSameDuration(WorkDuration) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * duration being added is unique."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * @see WorkDuration#isSameDuration(WorkDuration)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class UniqueDurationList implements Iterable\u003cWorkDuration\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final ObservableList\u003cWorkDuration\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final ObservableList\u003cWorkDuration\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns true if the list contains an equivalent timer as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean contains(WorkDuration toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDuration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Adds a timer to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * The timer must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void add(WorkDuration toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DuplicateDurationException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Replaces the duration {@code target} in the list with {@code editedDuration}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * The timer identity of {@code editedDuration} must not be the same as another existing duration in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setDuration(WorkDuration target, WorkDuration editedDuration) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(target, editedDuration);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DurationNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!target.isSameDuration(editedDuration) \u0026\u0026 contains(editedDuration)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DuplicateDurationException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.set(index, editedDuration);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Removes the equivalent timer from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * The timer must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void remove(WorkDuration toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DurationNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setDurations(UniqueDurationList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Replaces the contents of this list with {@code WorkDurations}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * {@code durations} must not contain duplicate durations."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setDurations(List\u003cWorkDuration\u003e durations) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(durations);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!timersAreUnique(durations)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DuplicateDurationException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.setAll(durations);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObservableList\u003cWorkDuration\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Iterator\u003cWorkDuration\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof UniqueDurationList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDurationList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private boolean timersAreUnique(List\u003cWorkDuration\u003e durations) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (int i \u003d 0; i \u003c durations.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            for (int j \u003d i + 1; j \u003c durations.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                if (durations.get(i).isSameDuration(durations.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 135
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/WorkDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a duration of dateTime spent working on a project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class WorkDuration {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final DateTime stopDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code WorkDuration}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param startDateTime A valid start dateTime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param stopDateTime A valid stop dateTime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public WorkDuration(DateTime startDateTime, DateTime stopDateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.stopDateTime \u003d stopDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime getStartTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTime getStopTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return stopDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the length of dateTime tracked in this duration, in (@code unit) units."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit The units for the length of dateTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The length of dateTime in the provided units."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public long getTimeBetween(ChronoUnit unit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return unit.between(startDateTime.get(), stopDateTime.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if both durations have the same start and stop dateTime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isSameDuration(WorkDuration otherDuration) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (otherDuration \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return otherDuration !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 otherDuration.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 otherDuration.getStopTime().equals(getStopTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof WorkDuration // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 isSameDuration((WorkDuration) other)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(startDateTime, stopDateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 49,
      "claracheong4": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/exceptions/DuplicateDurationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Signals that the operation will result in duplicate Timers (Timers are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DuplicateDurationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public DuplicateDurationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(\"Operation would result in duplicate timers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 11
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/exceptions/DurationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Signals that the operation is unable to find the specified timer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DurationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 6
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods for populating {@code ProjectBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static Project[] getSampleProjects() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new Project[]{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"description\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Date(\"2019-10-04\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-10-04\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"description\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Date(\"2019-10-10\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-10-10\", \"01:01:21\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"description\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Date(\"2019-06-22\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"David Li\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"description\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Date(\"2019-11-04\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-11-04\", \"08:10:21\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    Description.EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Date(\"2019-10-24\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-10-24\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    Description.EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Date(\"2019-01-04\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static ReadOnlyProjectBook getSampleProjectBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook sampleProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Project sampleProject : getSampleProjects()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            sampleProjectBook.addProject(sampleProject);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return sampleProjectBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns a UniqueDurationList containing the list of strings given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static UniqueDurationList getDurationList(WorkDuration... durations) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList durationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationList.setDurations(Arrays.asList(durations));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return durationList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 11,
      "pr4aveen": 3,
      "claracheong4": 43,
      "kkangs0226": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Jackson-friendly version of {@link Deadline}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                               @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts a given {@code Deadline} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!source.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (source.hasTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts this Jackson-friendly adapted duration object into the model\u0027s {@code Deadline} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted duration."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Date.isValid(date)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Time.isValid(time)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Deadline(date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 68
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedProject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String createdDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final JsonAdaptedDeadline deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final List\u003cJsonAdaptedWorkDuration\u003e durations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final JsonAdaptedTimer timer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              @JsonProperty(\"createdDate\") String createdDate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              @JsonProperty(\"deadline\") JsonAdaptedDeadline deadline,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"durations\") List\u003cJsonAdaptedWorkDuration\u003e durations,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"timer\") JsonAdaptedTimer timer) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (durations !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.durations.addAll(durations);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        createdDate \u003d source.getCreatedDate().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(source.getDeadline());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations.addAll(source.getDurationList().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .map(JsonAdaptedWorkDuration::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timer \u003d new JsonAdaptedTimer(source.getTimer());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted project."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final List\u003cTag\u003e projectTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            projectTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Date.isValid(createdDate)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final Date modelCreatedDate \u003d new Date(createdDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final Deadline modelDeadline \u003d deadline \u003d\u003d null ? new Deadline() : deadline.toModelType();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(projectTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        final List\u003cWorkDuration\u003e projectDurations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (JsonAdaptedWorkDuration duration : durations) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            projectDurations.add(duration.toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList modelDurations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        modelDurations.setDurations(projectDurations);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        final Timer modelTimer \u003d timer \u003d\u003d null ? new Timer() : timer.toModelType();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(modelName, modelDescription, modelCreatedDate, modelDeadline, modelTags, modelDurations,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                modelTimer);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 27,
      "pr4aveen": 13,
      "claracheong4": 25,
      "kkangs0226": 6,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedTimer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Jackson-friendly version of {@link Timer}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class JsonAdaptedTimer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Duration\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String stopTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Boolean isRunning;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code JsonAdaptedWorkDuration} with the given duration details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedTimer(@JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                   @JsonProperty(\"stopTime\") String stopTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                   @JsonProperty(\"isRunning\") Boolean isRunning) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.stopTime \u003d stopTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.isRunning \u003d isRunning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts a given {@code WorkDuration} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedTimer(Timer source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        startTime \u003d source.getStartTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        stopTime \u003d source.getStopTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        isRunning \u003d source.isRunning();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts this Jackson-friendly adapted duration object into the model\u0027s {@code Timer} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted duration."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Timer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTime.isValid(startTime)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTime modelStartDateTime \u003d new DateTime(startTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (stopTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTime.isValid(stopTime)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTime modelStopDateTime \u003d new DateTime(stopTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (isRunning \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isRunning\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Timer(modelStartDateTime, modelStopDateTime, isRunning);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 63,
      "claracheong4": 15
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedWorkDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class JsonAdaptedWorkDuration {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Duration\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String stopTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code JsonAdaptedWorkDuration} with the given duration details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedWorkDuration(@JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"stopTime\") String stopTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.stopTime \u003d stopTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts a given {@code WorkDuration} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedWorkDuration(WorkDuration source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        startTime \u003d source.getStartTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        stopTime \u003d source.getStopTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts this Jackson-friendly adapted duration object into the model\u0027s {@code WorkDuration} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted duration."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public WorkDuration toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTime.isValid(startTime)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTime modelStartDateTime \u003d new DateTime(startTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (stopTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTime.isValid(stopTime)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTime modelStopDateTime \u003d new DateTime(stopTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new WorkDuration(modelStartDateTime, modelStopDateTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 56,
      "claracheong4": 15
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonProjectBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * A class to access ProjectBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonProjectBookStorage implements ProjectBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonProjectBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return readProjectBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Similar to {@link #readProjectBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Optional\u003cJsonSerializableProjectBook\u003e jsonProjectBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                filePath, JsonSerializableProjectBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!jsonProjectBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.of(jsonProjectBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        saveProjectBook(projectBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Similar to {@link #saveProjectBook(ReadOnlyProjectBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(projectBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectBook(projectBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 80
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonSerializableProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * An Immutable ProjectBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "@JsonRootName(value \u003d \"projectbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "class JsonSerializableProjectBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Projects list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code JsonSerializableProjectBook} with the given projects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonSerializableProjectBook(@JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts a given {@code ReadOnlyProjectBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableProjectBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonSerializableProjectBook(ReadOnlyProjectBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts this project book into the model\u0027s {@code ProjectBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (projectBook.hasProject(project)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            projectBook.addProject(project);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 7,
      "claracheong4": 19,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/ProjectBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a storage for {@link ProjectBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface ProjectBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns ProjectBook data as a {@link ReadOnlyProjectBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see #getProjectBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cReadOnlyProjectBook\u003e readProjectBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Saves the given {@link ReadOnlyProjectBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param projectBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see #saveProjectBook(ReadOnlyProjectBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 46
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface Storage extends ProjectBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 32
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Manages storage of ProjectBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ProjectBookStorage projectBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ProjectBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public StorageManager(ProjectBookStorage projectBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBookStorage \u003d projectBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBookStorage.getProjectBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return readProjectBook(projectBookStorage.getProjectBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBookStorage.readProjectBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        saveProjectBook(projectBook, projectBookStorage.getProjectBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBookStorage.saveProjectBook(projectBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a storage for {@link seedu.momentum.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Saves the given {@link seedu.momentum.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         * @see seedu.momentum.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/DurationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * An UI component that displays information of a {@code WorkDuration}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DurationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"DurationListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public final WorkDuration duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label stopTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code ProjectCode} with the given {@code WorkDuration} to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public DurationCard(WorkDuration duration, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        startTime.setText(\"Start: \" + duration.getStartTime().getFormatted());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        stopTime.setText(\"Stop: \" + duration.getStopTime().getFormatted());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!(other instanceof DurationCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        DurationCard card \u003d (DurationCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return duration.equals(card.duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 60,
      "claracheong4": 2
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/DurationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DurationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"DurationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DurationListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ListView\u003cWorkDuration\u003e durationListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code DurationListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public DurationListPanel(ObservableList\u003cWorkDuration\u003e durationList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationListView.setItems(durationList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationListView.setCellFactory(listView -\u003e new DurationListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code WorkDuration} using a {@code DurationCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    class DurationListViewCell extends ListCell\u003cWorkDuration\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        protected void updateItem(WorkDuration duration, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            super.updateItem(duration, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (empty || duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(new DurationCard(duration, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 49
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t10-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "khoodehui": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StatListPanel statListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private MenuItem testStatMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StackPane statListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StackPane infoDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        TagsDisplay tagsDisplay \u003d new TagsDisplay(logic.getProjectBook().getProjectTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        infoDisplayPlaceholder.getChildren().add(tagsDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ObservableList\u003cStatisticEntry\u003e stats \u003d logic.getStatistic().getWeeklyTimePerProjectStatistic();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListPanel \u003d new StatListPanel(stats);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListPanelPlaceholder.getChildren().add(statListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectListPanel getProjectListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return projectListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see seedu.momentum.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 4,
      "pr4aveen": 6,
      "claracheong4": 8,
      "khoodehui": 13,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/ProjectCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private HBox description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private HBox createdDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private HBox deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code ProjectCard} with the given {@code Project} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        name.setText(project.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!project.getDescription().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            description.getChildren().add(new Label(project.getDescription().value));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        createdDate.getChildren().add(new Label(\"Created: \" + project.getCreatedDate().getFormatted()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Label deadlineLabel \u003d new Label(\"Due: \" + project.getDeadline().getFormattedDeadline());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setDeadlineStyle(deadlineLabel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        deadline.getChildren().add(deadlineLabel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        project.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void setDeadlineStyle(Label deadline) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String style \u003d \"-fx-text-fill: \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (project.getDeadline().isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            style +\u003d \"-fx-cool-gray-0\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            long daysToDeadline \u003d project.getDeadline().daysToDeadline();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (daysToDeadline \u003e 7) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                style +\u003d \"-fx-green\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else if (daysToDeadline \u003c 4) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                style +\u003d \"-fx-red\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                style +\u003d \"-fx-yellow\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        deadline.setStyle(style);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(other instanceof ProjectCard)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "pr4aveen": 10,
      "claracheong4": 2,
      "kkangs0226": 1,
      "khoodehui": 36,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/ProjectListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates a {@code ProjectListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 46,
      "claracheong4": 3
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/StatCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * An UI component that displays information of a {@code StatisticEntry}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class StatCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String FXML \u003d \"StatCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public final StatisticEntry statisticEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code StatCard} with the given {@code statisticEntry} to display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatCard(StatisticEntry statisticEntry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.statisticEntry \u003d statisticEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        label.setText(statisticEntry.getLabel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        value.setText(formatToString(statisticEntry.getValue()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private String formatToString(double value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int hours \u003d (int) Math.floor(value / 60);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int minutes \u003d (int) value % 60;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (hours \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            output +\u003d String.format(\"%d hr \", hours);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (minutes \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            output +\u003d String.format(\"%d min\", minutes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof StatCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StatCard card \u003d (StatCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return statisticEntry.equals(card.statisticEntry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 21,
      "khoodehui": 44
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/StatListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Panel containing a list of time spent."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class StatListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String FXML \u003d \"StatListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ListView\u003cStatisticEntry\u003e statListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code StatListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatListPanel(ObservableList\u003cStatisticEntry\u003e statisticList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListView.setItems(statisticList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListView.setCellFactory(listView -\u003e new StatListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code StatisticEntry} using a {@code StatisticCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    class StatListViewCell extends ListCell\u003cStatisticEntry\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        protected void updateItem(StatisticEntry statisticEntry, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            super.updateItem(statisticEntry, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (empty || statisticEntry \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                setGraphic(new StatCard(statisticEntry).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 9,
      "khoodehui": 35
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/TagsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * A UI component to display the current tags that exist inside the project book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class TagsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String FXML \u003d \"TagsDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final Set\u003cTag\u003e tagsSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code TagsDisplay}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tagsSet Set of tags in the project book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public TagsDisplay(Set\u003cTag\u003e tagsSet) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.tagsSet \u003d tagsSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        fillTags();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void fillTags() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tagsSet.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DurationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel fx:id\u003d\"stopTime\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 33
    }
  },
  {
    "path": "src/main/resources/view/DurationListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cListView fx:id\u003d\"durationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"1010.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Momentum\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cScene stylesheets\u003d\"@Momentum.css\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cmenus\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/menus\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"33.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                      \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cGridPane prefHeight\u003d\"0.0\" prefWidth\u003d\"70.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints percentHeight\u003d\"10.0\" valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints percentHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cLabel styleClass\u003d\"app-logo\" text\u003d\"Momentum\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cSplitPane dividerPositions\u003d\"0.3\" orientation\u003d\"VERTICAL\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                \u003citems\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"infoDisplayPlaceholder\" styleClass\u003d\"content-box\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"statListPanelPlaceholder\" styleClass\u003d\"c\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                          \u003cVBox fx:id\u003d\"statList\" styleClass\u003d\"content-box\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                \u003c/items\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cGridPane prefHeight\u003d\"82.0\" prefWidth\u003d\"241.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"56.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints percentHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-box\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"result-box\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cVBox styleClass\u003d\"project-list\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 77,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"4.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" text\u003d\"1.\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox fx:id\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets left\u003d\"12.0\" right\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cSeparator orientation\u003d\"VERTICAL\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" spacing\u003d\"4.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox fx:id\u003d\"createdDate\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox fx:id\u003d\"deadline\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "khoodehui": 46,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" text\u003d\"Welcome to Momentum! If you are new, enter \u0026quot;help\u0026quot; for the user guide.\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cGridPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cLabel fx:id\u003d\"label\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cSeparator orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cLabel fx:id\u003d\"value\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 28
    }
  },
  {
    "path": "src/main/resources/view/StatListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cVBox styleClass\u003d\"content-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"content-box-title\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cLabel text\u003d\"Time Spent (Weekly)\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cListView fx:id\u003d\"statListView\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 17
    }
  },
  {
    "path": "src/main/resources/view/TagsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"content-box-title\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cLabel text\u003d\"Tags\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets bottom\u003d\"8.0\" left\u003d\"24.0\" right\u003d\"24.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/padding\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 32
    }
  },
  {
    "path": "src/main/resources/view/TestStatWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"TestStat\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cPieChart id\u003d\"piechart\" fx:id\u003d\"piechart\" layoutX\u003d\"10\" layoutY\u003d\"110\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 27
    }
  },
  {
    "path": "src/test/java/seedu/momentum/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/ClockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class ClockTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void advance_manual_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertDoesNotThrow(() -\u003e Clock.advance(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void advance_notManual_throwsAssertionError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e Clock.advance(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void reverse_manual_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertDoesNotThrow(() -\u003e Clock.reverse(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void reverse_notManual_throwsAssertionError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e Clock.reverse(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_fixed_returnCorrectTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, Clock.now());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_manualStartTime_returnCorrectTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, Clock.now());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_manualAdvancedTime_returnCorrectTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.advance(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY_ADD_HOUR, Clock.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_manualReversedTime_returnCorrectTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY.plus(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reverse(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, Clock.now());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 66
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2019-09-23\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_DATE \u003d \"2019-09-25\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date((String) null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String invalidDate \u003d \"asfd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null date time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValid(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Date.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Date.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Date.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Date.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Date.isValid(\"12/02/12*\")); // wrong format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Date.isValid(\"2019-30-23\")); // not a real date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // valid date time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(Date.isValid(VALID_DATE)); // typical time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedDate_formatsCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Date date \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(date.get().format(DateUtil.FORMAT_DATE_MEDIUM), date.getFormatted());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Date is later"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Date(VALID_DATE).compareTo(new Date(VALID_LATER_DATE)), -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Date is earlier"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Date(VALID_LATER_DATE).compareTo(new Date(VALID_DATE)), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both Date same date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Date(VALID_DATE).compareTo(new Date(\"2019-09-23\")), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 48,
      "kkangs0226": 13
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_DATE_TIME \u003d \"2020-10-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime((String) null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String invalidDateTime \u003d \"asfd\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValid(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTime.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTime.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTime.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTime.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTime.isValid(\"12/02/12*\")); // wrong format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTime.isValid(\"2020-30-23T16:55:12.83012\")); // not a real date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DateTime.isValid(VALID_DATE_TIME)); // typical date time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateTime dateTime \u003d new DateTime(\"2020-09-23T16:55:12.83012\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(dateTime.get().format(DateTimeUtil.FORMAT_DATE_TIME_MEDIUM), dateTime.getFormatted());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Time is later"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new DateTime(VALID_DATE_TIME).compareTo(new DateTime(VALID_LATER_DATE_TIME)), -1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Time is earlier"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new DateTime(VALID_LATER_DATE_TIME).compareTo(new DateTime(VALID_DATE_TIME)), 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both Time same time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new DateTime(VALID_DATE_TIME).compareTo(new DateTime(\"2020-09-23T16:55:12.83012\")), 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 46,
      "kkangs0226": 16
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.TimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"10:15:30\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_TIME \u003d \"10:15:35\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time((String) null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String invalidTime \u003d \"asfd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null time time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValid(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid time time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Time.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Time.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Time.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Time.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Time.isValid(\"10:15:30*\")); // wrong format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(Time.isValid(\"52:15:30\")); // not a real time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // valid time time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(Time.isValid(VALID_TIME)); // typical time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedTime_formatsCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Time time \u003d new Time(VALID_TIME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(time.get().format(TimeUtil.FORMAT_TIME_MEDIUM), time.getFormatted());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Time is later"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Time(VALID_TIME).compareTo(new Time(VALID_LATER_TIME)), -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Time is earlier"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Time(VALID_LATER_TIME).compareTo(new Time(VALID_TIME)), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both Time same time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Time(VALID_TIME).compareTo(new Time(\"10:15:30\")), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 48,
      "kkangs0226": 13
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final Index fifthProjectIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(fifthProjectIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //---------------- Tests for containsPartialIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e StringUtil.containsPartialIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e StringUtil.containsPartialIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e StringUtil.containsPartialIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsPartialIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(StringUtil.containsPartialIgnoreCase(\"\", \"abc\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(StringUtil.containsPartialIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(StringUtil.containsPartialIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bBb ccc\", \"Bbb\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // extra spaces"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // word has spaces"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 76,
      "claracheong4": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonProjectBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage projectBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new JsonProjectBookStorage(temporaryFolder.resolve(\"projectBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Setup LogicManager with JsonProjectBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage projectBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new JsonProjectBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionProjectBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(AMY).withTags()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withEmptyDeadline().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.addProject(expectedProject);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredProjectList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static class JsonProjectBookIoExceptionThrowingStub extends JsonProjectBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private JsonProjectBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 4,
      "claracheong4": 34,
      "kkangs0226": 2,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_newProject_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().withName(\"TEST\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.addProject(validProject);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(new AddCommand(validProject), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validProject), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Tests if add command places project in correct order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_addCommand_placesProjectInOrder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project dana \u003d new ProjectBuilder().withName(\"Dana\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        AddCommand addDanaCommand \u003d new AddCommand(dana);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // alphabetical order -\u003e Dana gets placed in between Carl and Daniel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.addProject(dana);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(addDanaCommand, model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, dana), expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project projectInList \u003d model.getProjectBook().getProjectList().get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(new AddCommand(projectInList), model, AddCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 7,
      "claracheong4": 12,
      "kkangs0226": 18,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ModelStubAcceptingProjectAdded modelStub \u003d new ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validProject).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validProject), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(validProject), modelStub.projectsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validProject);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validProject);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PROJECT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project alice \u003d new ProjectBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project bob \u003d new ProjectBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setProjectBookFilePath(Path projectBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setProjectBook(ReadOnlyProjectBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void orderFilteredProjectList(SortType sortType, boolean isAscending) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * A Model stub that contains a single project."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        private final Project project;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ModelStubWithProject(Project project) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            this.project \u003d project;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return this.project.isSameProject(project);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * A Model stub that always accept the project being added."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends ModelStub {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final ArrayList\u003cProject\u003e projectsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return projectsAdded.stream().anyMatch(project::isSameProject);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            projectsAdded.add(project);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new ProjectBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 39,
      "claracheong4": 16,
      "kkangs0226": 4,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void execute_emptyProjectBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void execute_nonEmptyProjectBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.setProjectBook(new ProjectBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 32
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"Loves coffee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"Hates coffee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_CREATED_DATE_AMY \u003d \"2019-12-02\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_CREATED_DATE_BOB \u003d \"2019-10-02\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_DATE_AMY \u003d \"2020-12-02\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_DATE_BOB \u003d \"2020-10-02\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_TIME_AMY \u003d \"11:42:53\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEADLINE_DATE_DESC_AMY \u003d \" \" + PREFIX_DEADLINE_DATE + VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEADLINE_DATE_DESC_BOB \u003d \" \" + PREFIX_DEADLINE_DATE + VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEADLINE_TIME_DESC_AMY \u003d \" \" + PREFIX_DEADLINE_TIME + VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String INVALID_DEADLINE_DATE_DESC \u003d \" \" + PREFIX_DEADLINE_DATE + \"2020-91-64\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String INVALID_DEADLINE_TIME_DESC \u003d \" \" + PREFIX_DEADLINE_TIME + \"09:91:12\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INVALID_SORT_TYPE \u003d \" \" + SORT_TYPE + \"nomnom\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INVALID_SORT_ORDER \u003d \" \" + SORT_ORDER + \"can you not\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_ASCENDING_SORT_ORDER \u003d \" \" + SORT_ORDER + \"asc\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DESCENDING_SORT_ORDER \u003d \" \" + SORT_ORDER + \"dsc\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_ALPHA_SORT_TYPE \u003d \" \" + SORT_TYPE + \"alpha\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DEADLINE_SORT_TYPE \u003d \" \" + SORT_TYPE + \"deadline\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_CREATED_DATE_SORT_TYPE \u003d \" \" + SORT_TYPE + \"created\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final EditCommand.EditProjectDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final EditCommand.EditProjectDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DESC_AMY \u003d new EditProjectDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DESC_BOB \u003d new EditProjectDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * - the project book, filtered project list and selected project in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook expectedProjectBook \u003d new ProjectBook(actualModel.getProjectBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cProject\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedProjectBook, actualModel.getProjectBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the project at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code model}\u0027s project book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static void showProjectAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project project \u003d model.getFilteredProjectList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final String[] splitName \u003d project.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            new NameContainsKeywordsPredicate(FindType.ANY, Collections.singletonList(splitName[0])));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(1, model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 15,
      "claracheong4": 37,
      "kkangs0226": 15,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project projectToDelete \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, projectToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showNoProject(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getProjectList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private void showNoProject(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(model.getFilteredProjectList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 22,
      "claracheong4": 18,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project editedProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder(editedProject).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0), editedProject);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index indexLastProject \u003d Index.fromOneBased(model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project lastProject \u003d model.getFilteredProjectList().get(indexLastProject.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBuilder projectInList \u003d new ProjectBuilder(lastProject);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedProject \u003d projectInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastProject, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.setProject(lastProject, editedProject);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, new EditProjectDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project editedProject \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project projectInFilteredList \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project editedProject \u003d new ProjectBuilder(projectInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditProjectDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.setProject(model.getFilteredProjectList().get(0), editedProject);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProjectUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project firstProject \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder(firstProject).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PROJECT, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProjectFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // edit project in filtered list into a duplicate in project book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project projectInList \u003d model.getProjectBook().getProjectList().get(INDEX_SECOND_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditProjectDescriptorBuilder(projectInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_invalidProjectIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditProjectDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * but smaller than size of project book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_invalidProjectIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getProjectList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditProjectDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditProjectDescriptor copyDescriptor \u003d new EditCommand.EditProjectDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PROJECT, copyDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PROJECT, DESC_AMY)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PROJECT, DESC_BOB)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 47,
      "claracheong4": 37,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/EditProjectDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class EditProjectDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptorWithSameValues \u003d new EditCommand.EditProjectDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditProjectDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        editedAmy \u003d new EditProjectDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 5,
      "claracheong4": 6,
      "kkangs0226": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.FindCommandParser.FIND_ARGUMENT_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.DANIEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ELLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.FIONA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.TagListContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String TEST_NAMES \u003d \"Kurz Elle Kunz\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String TEST_DESCRIPTIONS \u003d \"starbucks elephants cats\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String TEST_TAGS \u003d \"friends owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_zeroKeywords_noProjectFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ANY, \" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void anyMatch_multipleNameKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ANY, TEST_NAMES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleNameKeywords_noProjectsFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ALL, TEST_NAMES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleNameKeywords_oneProjectsFound() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ALL, \"CA rL Ku Rz\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.singletonList(CARL), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void anyMatch_multipleDescriptionKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                prepareDescriptionPredicate(FindType.ANY, TEST_DESCRIPTIONS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE, FIONA), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleDescriptionKeywords_noProjectsFound() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                prepareDescriptionPredicate(FindType.ALL, TEST_DESCRIPTIONS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleDescriptionKeywords_oneProjectFound() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                prepareDescriptionPredicate(FindType.ALL, \"likes star bucks\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.singletonList(FIONA), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void anyMatch_multipleTagKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate predicate \u003d prepareTagListPredicate(FindType.ANY, TEST_TAGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleTagKeywords_oneProjectFound() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate predicate \u003d prepareTagListPredicate(FindType.ALL, TEST_TAGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.singletonList(BENSON), model.getFilteredProjectList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new NameContainsKeywordsPredicate(findType, Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private DescriptionContainsKeywordsPredicate prepareDescriptionPredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(findType,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses {@code userInput} into a {@code TagListContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private TagListContainsKeywordsPredicate prepareTagListPredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new TagListContainsKeywordsPredicate(findType,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 117,
      "claracheong4": 12,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "claracheong4": 10,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.MESSAGE_SORT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_ASCENDING_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_CREATED_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_DEFAULT_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_DESCENDING_ORDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.CREATED_DATE_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.CREATED_DATE_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEADLINE_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEADLINE_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEFAULT_SORT_COMMAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(ALPHA_ASCENDING_COMMAND.equals(ALPHA_ASCENDING_COMMAND));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        SortCommand alphaAscending \u003d new SortCommand(SortType.ALPHA, true, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(ALPHA_ASCENDING_COMMAND.equals(alphaAscending));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both default -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // DEFAULT_SORT sort type is set to SortType.ALPHA"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        SortCommand defaultSort \u003d new SortCommand(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DEFAULT_SORT_COMMAND.equals(defaultSort));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // one default, one not default"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND.equals(DEFAULT_SORT_COMMAND));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different sort types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND.equals(DEADLINE_ASCENDING_COMMAND));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different sort orders -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND.equals(ALPHA_DESCENDING_COMMAND));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_defaultSort_sortedInDefaultOrder() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, EMPTY_STRING, OUTPUT_DEFAULT_TYPE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(DEFAULT_SORT_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_alphabeticalAscending_sortedInAlphabeticalAscendingOrder() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, OUTPUT_ALPHA_TYPE, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(ALPHA_ASCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_alphabeticalDescending_sortedInAlphabeticalDescendingOrder() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, OUTPUT_ALPHA_TYPE, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(ALPHA_DESCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_deadlineAscending_sortedInDeadlineAscendingOrder() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.DEADLINE, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, OUTPUT_DEADLINE_TYPE, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(DEADLINE_ASCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_deadlineDescending_sortedInDeadlineDescendingOrder() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.DEADLINE, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, OUTPUT_DEADLINE_TYPE, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(DEADLINE_DESCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_createdDateAscending_sortedInCreatedDateAscendingOrder() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.CREATED, true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, OUTPUT_CREATED_TYPE, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(CREATED_DATE_ASCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_createdDateDescending_sortedInCreatedDateDescendingOrder() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.CREATED, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, OUTPUT_CREATED_TYPE, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(CREATED_DATE_DESCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_nullSortTypeAscendingNonDefault_sortedInCurrentSortTypeAscendingOrder() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.orderFilteredProjectList(SortType.DEADLINE, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.DEADLINE, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, EMPTY_STRING, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_nullSortTypeDescendingNonDefault_sortedInCurrentSortTypeDscendingOrder() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.orderFilteredProjectList(SortType.CREATED, true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.CREATED, false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS, EMPTY_STRING, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(model.getFilteredProjectList(), expectedModel.getFilteredProjectList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 147
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/StartCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Contains unit tests for {@code StartCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStart \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project startedProject \u003d projectToStart.startTimer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedModel.setProject(projectToStart, startedProject);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                String.format(StartCommand.MESSAGE_START_TIMER_SUCCESS, INDEX_FIRST_PROJECT.getOneBased())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                + startedProject.getTimer().getStartTime().getFormatted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(startCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_alreadyRunning_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStart \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.setProject(projectToStart, projectToStart.startTimer());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(startCommand, model, StartCommand.MESSAGE_EXISTING_TIMER_ERROR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStart \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project startedProject \u003d projectToStart.startTimer();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                String.format(StartCommand.MESSAGE_START_TIMER_SUCCESS, INDEX_FIRST_PROJECT.getOneBased())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        + startedProject.getTimer().getStartTime().getFormatted();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getProjectList().size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(startCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startFirstCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startSecondCommand \u003d new StartCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(startFirstCommand.equals(startFirstCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startFirstCommandCopy \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(startFirstCommand.equals(startFirstCommandCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(startFirstCommand.equals(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(startFirstCommand.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(startFirstCommand.equals(startSecondCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 122
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/StopCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Contains unit tests for {@code StartCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StopCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStop \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project startedProject \u003d projectToStop.startTimer();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(StopCommand.MESSAGE_STOP_TIMER_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                INDEX_FIRST_PROJECT.getOneBased(), 60);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.setProject(projectToStop, startedProject);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.advance(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedModel.setProject(startedProject, startedProject.stopTimer());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(stopCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredProjectList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(stopCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_noTimer_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(stopCommand, model, StopCommand.MESSAGE_NO_TIMER_ERROR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToStop \u003d model.getFilteredProjectList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(StopCommand.MESSAGE_STOP_TIMER_SUCCESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                INDEX_FIRST_PROJECT.getOneBased(), 60);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project startedProject \u003d projectToStop.startTimer();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.setProject(projectToStop, startedProject);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.advance(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedModel.setProject(startedProject, startedProject.stopTimer());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(stopCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getProjectList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(stopCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopFirstCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopSecondCommand \u003d new StopCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(stopFirstCommand.equals(stopFirstCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopFirstCommandCopy \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(stopFirstCommand.equals(stopFirstCommandCopy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(stopFirstCommand.equals(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(stopFirstCommand.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(stopFirstCommand.equals(stopSecondCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 127
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(BOB).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DESCRIPTION_DESC_BOB + DEADLINE_DATE_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DESCRIPTION_DESC_BOB + DEADLINE_DATE_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB + DEADLINE_DATE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project expectedProjectMultipleTags \u003d new ProjectBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + DEADLINE_DATE_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedProjectMultipleTags));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(AMY).withEmptyDescription().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DEADLINE_DATE_DESC_AMY + DEADLINE_TIME_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // no deadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withEmptyDeadline().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // no time in deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withDeadline(VALID_DEADLINE_DATE_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DESCRIPTION_DESC_AMY + DEADLINE_DATE_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withTags().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DESCRIPTION_DESC_AMY + DEADLINE_DATE_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + DEADLINE_TIME_DESC_AMY, new AddCommand(expectedProject));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DESCRIPTION_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid deadline with invalid date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_DEADLINE_DATE_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid deadline with invalid time"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + INVALID_DEADLINE_DATE_DESC + INVALID_DEADLINE_TIME_DESC"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid deadline with invalid date and time"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_DEADLINE_DATE_DESC"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + INVALID_DEADLINE_TIME_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESCRIPTION_DESC_BOB + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 4,
      "claracheong4": 67,
      "kkangs0226": 15,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "claracheong4": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DATE_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS); // invalid date in deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, \"1\" + DEADLINE_DATE_DESC_AMY + INVALID_DEADLINE_TIME_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Time.MESSAGE_CONSTRAINTS); // invalid time in deadline"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Project} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND + NAME_DESC_AMY + DESCRIPTION_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + DEADLINE_DATE_DESC_AMY + DEADLINE_TIME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditProjectDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // deadline with date"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withDeadline(VALID_DEADLINE_DATE_BOB).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // deadline with date and time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DATE_DESC_BOB + DEADLINE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_DEADLINE_TIME_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor \u003d new EditProjectDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND + DESCRIPTION_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand.EditProjectDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //                new EditProjectDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        // other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        descriptor \u003d new EditProjectDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //              .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 42,
      "claracheong4": 50,
      "kkangs0226": 24,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.FIND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.TagListContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME + \"         \","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // invalid match type"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, FIND_TYPE + \"fail\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // non empty preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"preamble \" + PREFIX_NAME + \"name\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // prefixes (other than /match) missing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, FIND_TYPE + \"all\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String userInput \u003d \" %sfirst second  \" + FIND_TYPE + \"all\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // no leading and trailing whitespaces (name)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(FindType.ALL, keywords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, String.format(userInput, PREFIX_NAME), expectedFindCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // no leading and trailing whitespaces (desc)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new FindCommand(new DescriptionContainsKeywordsPredicate(FindType.ALL, keywords));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, String.format(userInput, PREFIX_DESCRIPTION), expectedFindCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // no leading and trailing whitespaces (tag)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new FindCommand(new TagListContainsKeywordsPredicate(FindType.ALL, keywords));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, String.format(userInput, PREFIX_TAG), expectedFindCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \"\\nfirst \\nsecond \" + FIND_TYPE + \"\\nall\", expectedFindCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 47,
      "claracheong4": 5,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2021-42-12\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_TIME \u003d \"42:12:12\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Loves to eat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2021-12-12\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"12:12:12\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(INDEX_FIRST_PROJECT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(INDEX_FIRST_PROJECT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_DATE), Optional.empty()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_DATE), Optional.of(INVALID_TIME)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DATE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadline,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseDeadline(Optional.of(VALID_DATE), Optional.empty()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedDeadline \u003d new Deadline(VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadline,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseDeadline(Optional.of(VALID_DATE), Optional.of(VALID_TIME)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadline,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseDeadline(Optional.of(dateWithWhitespace), Optional.of(timeWithWhitespace)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 34,
      "kkangs0226": 9,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ProjectBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.EditProjectDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBookParser parser \u003d new ProjectBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project project \u003d new ProjectBuilder().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ProjectUtil.getAddCommand(project));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new AddCommand(project), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditProjectDescriptor descriptor \u003d new EditProjectDescriptorBuilder(project).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + INDEX_FIRST_PROJECT.getOneBased() + \" \" + ProjectUtil.getEditProjectDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PROJECT, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(FindType.ANY, keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        SortCommand command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                + SORT_ORDER + SortCommand.INPUT_ASCENDING_ORDER + \" \" + SORT_TYPE + INPUT_ALPHA_TYPE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new SortCommand(SortType.ALPHA, true, false), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand command \u003d (StartCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                StartCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(new StartCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parseCommand_stop() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand command \u003d (StopCommand) parser.parseCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                StopCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(new StopCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 16,
      "pr4aveen": 12,
      "claracheong4": 23,
      "kkangs0226": 14,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_ALPHA_SORT_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_ASCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_SORT_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_SORT_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.CREATED_DATE_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEADLINE_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String MESSAGE_INVALID_SORT_TYPE_OR_ORDER \u003d String.format("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_INVALID_SORT_TYPE_OR_ORDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String MESSAGE_NON_EMPTY_PREAMBLE_FAILURE \u003d String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final SortCommand DEFAULT_SORT_COMMAND \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.NULL, true, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_emptyArg_returnsDefaultSortCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, \" \", DEFAULT_SORT_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_missingSortType_returnsOrderedSortCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Ascending order"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, VALID_ASCENDING_SORT_ORDER, NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Descending order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, VALID_DESCENDING_SORT_ORDER, NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_missingSortOrder_returnsTypedAscendingSortCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Alphabetical type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, VALID_ALPHA_SORT_TYPE, ALPHA_ASCENDING_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Deadline type"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, VALID_DEADLINE_SORT_TYPE, DEADLINE_ASCENDING_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Created date type"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, VALID_CREATED_DATE_SORT_TYPE, CREATED_DATE_ASCENDING_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_allFieldsSpecified_returnsSortCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String userInput \u003d VALID_ALPHA_SORT_TYPE + VALID_DESCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseSuccess(parser, userInput, ALPHA_DESCENDING_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_invalidSortType_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, INVALID_SORT_TYPE, MESSAGE_INVALID_SORT_TYPE_OR_ORDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_invalidSortOrder_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, INVALID_SORT_ORDER, MESSAGE_INVALID_SORT_TYPE_OR_ORDER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_nonEmptyPreambleNoArguments_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble without sort type and sort order"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String userInput \u003d PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble with valid sort type and sort order"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d PREAMBLE_NON_EMPTY + VALID_ALPHA_SORT_TYPE + VALID_ASCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble with valid sort type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d PREAMBLE_NON_EMPTY + VALID_ALPHA_SORT_TYPE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble with valid sort order"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d PREAMBLE_NON_EMPTY + VALID_ASCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 109
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/StartCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StartCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private StartCommandParser parser \u003d new StartCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_validArgs_returnsStartCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StartCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 24
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/StopCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StopCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private StopCommandParser parser \u003d new StopCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_validArgs_returnsStopCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StopCommand(INDEX_FIRST_PROJECT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 24
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/PeriodicTotalTimeStatisticTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_WEEKLY_TIME_PER_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class PeriodicTotalTimeStatisticTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void constructor_nullPeriod_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new PeriodicTotalTimeStatistic(null, ChronoUnit.MINUTES));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void constructor_nullUnits_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new PeriodicTotalTimeStatistic(ChronoUnit.WEEKS, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void calculate_typicalProjects_correctData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY_ADD_DAY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic stat \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new PeriodicTotalTimeStatistic(ChronoUnit.WEEKS, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        stat.calculate(TEST_MODEL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TEST_WEEKLY_TIME_PER_PROJECT, stat);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void calculate_notInPeriod_correctData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY_ADD_YEAR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic stat \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new PeriodicTotalTimeStatistic(ChronoUnit.WEEKS, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        stat.calculate(TEST_MODEL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic expectedStat \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new PeriodicTotalTimeStatistic(ChronoUnit.WEEKS, ChronoUnit.MINUTES,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        FXCollections.observableArrayList("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Alpha\", 0),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Beta\", 0),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Charlie\", 0),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Delta\", 0)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        ));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedStat, stat);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 57
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/StatisticEntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StatisticEntryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void constructor_nullLabel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StatisticEntry(null, 0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void getLabel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry entry \u003d new StatisticEntry(\"Label\", 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(\"Label\", entry.getLabel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry entry \u003d new StatisticEntry(\"Label\", 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(1, entry.getValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry entry \u003d new StatisticEntry(\"Label\", 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expected \u003d String.format(\"(%s, %f)\", \"Label\", 0.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expected, entry.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label1value1 \u003d new StatisticEntry(\"Label1\", 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label1value2 \u003d new StatisticEntry(\"Label1\", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label2value1 \u003d new StatisticEntry(\"Label2\", 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label2value2 \u003d new StatisticEntry(\"Label2\", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Same object, returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(label1value1.equals(label1value1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Same label, same value, returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(label1value1.equals(new StatisticEntry(\"Label1\", 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Same label, different value, returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(label1value1.equals(label1value2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Different label, same value, returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(label1value1.equals(label2value1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Different label, different value, returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(label1value1.equals(label2value2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 59
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/StatisticManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_STATISTICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_WEEKLY_TIME_PER_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalTimes.DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StatisticManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(DAY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void updateStatistics() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticGenerator statisticGenerator \u003d new StatisticManager(TEST_MODEL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statisticGenerator.updateStatistics();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TEST_STATISTICS, statisticGenerator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void getWeeklyTimePerProjectStatistic() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticGenerator statisticGenerator \u003d new StatisticManager(TEST_MODEL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statisticGenerator.updateStatistics();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TEST_WEEKLY_TIME_PER_PROJECT.getDisplayList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                statisticGenerator.getWeeklyTimePerProjectStatistic());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 37
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/StatisticTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalWorkDuration.DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Dummy data used for testing statistic generation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Contains pre-calculated \"correct\" statistics to be compared to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StatisticTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    //Projects"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project ALPHA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Alpha\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Alpha Project\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withTags(\"CompanyA\", \"CompanyB\", \"CompanyC\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project BETA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Beta\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project CHARLIE \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Charlie\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project DELTA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Delta\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Delta Project\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Model TEST_MODEL \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Statistics"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final PeriodicTotalTimeStatistic TEST_WEEKLY_TIME_PER_PROJECT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new PeriodicTotalTimeStatistic(ChronoUnit.WEEKS, ChronoUnit.MINUTES,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    FXCollections.observableArrayList("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Alpha\", 60),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Beta\", 0),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Charlie\", 60),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Delta\", 60)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Statistic[] TEST_STATISTIC_LIST \u003d {TEST_WEEKLY_TIME_PER_PROJECT};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final StatisticGenerator TEST_STATISTICS \u003d new StatisticManager(TEST_MODEL, TEST_STATISTIC_LIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static ProjectBook getTypicalProjectBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            projectBook.addProject(project);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALPHA, BETA, CHARLIE, DELTA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 70
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new ProjectBook(), new ProjectBook(modelManager.getProjectBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(Paths.get(\"momentum/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(Paths.get(\"new/momentum/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setProjectBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath_validPath_setsProjectBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Path path \u003d Paths.get(\"momentum/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        modelManager.setProjectBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(path, modelManager.getProjectBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasProject(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectNotInProjectBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(modelManager.hasProject(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectInProjectBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        modelManager.addProject(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(modelManager.hasProject(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredProjectList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBookBuilder().withProject(ALICE).withProject(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook differentProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        modelManager \u003d new ModelManager(projectBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(projectBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different projectBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentProjectBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        modelManager.updateFilteredProjectList("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        modelManager.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        differentUserPrefs.setProjectBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 12,
      "claracheong4": 27,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/ProjectBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjectsOrders.getOrderedProjectBookByDeadlineAscending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(Collections.emptyList(), projectBook.getProjectList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData_withValidReadOnlyProjectBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook newData \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(newData, projectBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData_withDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Two projects with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        List\u003cProject\u003e newProjects \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBookStub newData \u003d new ProjectBookStub(newProjects);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e projectBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_withSortTypeNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        boolean isAscending \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectBook.setOrder(null, isAscending));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_withValidSortType_ordersProjectBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ProjectBook unorderedProjectBook \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ProjectBook orderedProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        orderedProjectBook.setProjects(getOrderedProjectBookByDeadlineAscending());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        unorderedProjectBook.setOrder(SortType.DEADLINE, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(orderedProjectBook, unorderedProjectBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectBook.hasProject(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectNotInProjectBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(projectBook.hasProject(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectInProjectBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.addProject(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(projectBook.hasProject(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectWithSameIdentityFieldsInProjectBook_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.addProject(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(projectBook.hasProject(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e projectBook.getProjectList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * A stub ReadOnlyProjectBook whose projects list can violate interface constraints."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static class ProjectBookStub implements ReadOnlyProjectBook {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private final ObservableList\u003cProject\u003e projects \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBookStub(Collection\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.projects.setAll(projects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return projects;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public Set\u003cTag\u003e getProjectTags() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            getProjectList().forEach(project -\u003e tags.addAll(project.getTags()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 99,
      "kkangs0226": 18,
      "khoodehui": 10
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setProjectBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"10:15:30\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2019-09-23\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_TIME \u003d \"10:15:35\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_DATE \u003d \"2019-09-25\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_TIME \u003d \"10:86:30\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2019-97-23\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Deadline emptyDeadline \u003d new Deadline();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Deadline deadlineWithDate \u003d new Deadline(VALID_DATE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Deadline deadlineWithDateAndTime \u003d new Deadline(VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(VALID_DATE, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, VALID_TIME));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(\"\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(INVALID_DATE, INVALID_TIME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(VALID_TIME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isEmpty() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(emptyDeadline.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(deadlineWithDate.isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(deadlineWithDateAndTime.isEmpty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(emptyDeadline.hasTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(deadlineWithDate.hasTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(deadlineWithDateAndTime.hasTime());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedDeadline_formatsCorrectly() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(\"No deadline set\", emptyDeadline.getFormattedDeadline());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadlineWithDate.getDate().getFormatted(), deadlineWithDate.getFormattedDeadline());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedDeadlineStr \u003d deadlineWithDateAndTime.getDate().getFormatted()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + \" \" + deadlineWithDateAndTime.getTime().getFormatted();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadlineStr, deadlineWithDateAndTime.getFormattedDeadline());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(\"\", emptyDeadline.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadlineWithDate.getDate().toString(), deadlineWithDate.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedDeadlineStr \u003d deadlineWithDateAndTime.getDate().toString()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + deadlineWithDateAndTime.getTime().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadlineStr, deadlineWithDateAndTime.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has later date -\u003e returns -1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE).compareTo(new Deadline(VALID_LATER_DATE)), -1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has earlier date -\u003e returns 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_LATER_DATE).compareTo(new Deadline(VALID_DATE)), 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first and second Deadline have same date -\u003e returns 0"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE).compareTo(new Deadline(\"2019-09-23\")), 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, later time -\u003e returns -1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME).compareTo("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new Deadline(VALID_DATE, VALID_LATER_TIME)), -1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_LATER_TIME).compareTo("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new Deadline(VALID_DATE, VALID_TIME)), 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, SAME time -\u003e returns 0"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME).compareTo("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new Deadline(\"2019-09-23\", \"10:15:30\")), 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void sameDateCompare_returnsCorrectValue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, later time -\u003e returns -1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME).compareTo("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new Deadline(VALID_DATE, VALID_LATER_TIME)), -1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_LATER_TIME).compareTo("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new Deadline(VALID_DATE, VALID_TIME)), 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, SAME time -\u003e returns 0"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME).compareTo("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new Deadline(\"2019-09-23\", \"10:15:30\")), 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 65,
      "kkangs0226": 41,
      "khoodehui": 1
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 12
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name aaa \u003d new Name(\"AAA\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name bbb \u003d new Name(\"bbb\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name aaaLower \u003d new Name(\"aaa\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second name alphabetically later"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(aaa.compareTo(bbb) \u003c 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second name alphabetically earlier"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(bbb.compareTo(aaa) \u003e 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // names are same alphabetically"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(aaa.compareTo(aaaLower) \u003d\u003d 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "kkangs0226": 18,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/ProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e project.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void isSameProject() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(ALICE.isSameProject(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(ALICE.isSameProject(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different created date -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withCreatedDate(VALID_CREATED_DATE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDeadline(VALID_DEADLINE_DATE_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedBob \u003d new ProjectBuilder(BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(BOB.isSameProject(editedBob));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project aliceCopy1 \u003d new ProjectBuilder(ALICE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project aliceCopy2 \u003d new ProjectBuilder(ALICE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(aliceCopy1.equals(aliceCopy2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different created date -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withCreatedDate(VALID_CREATED_DATE_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDeadline(VALID_DEADLINE_DATE_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 3,
      "pr4aveen": 17,
      "claracheong4": 30,
      "kkangs0226": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/UniqueProjectListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.TypicalProjectsOrders;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class UniqueProjectListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final UniqueProjectList uniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_projectNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(uniqueProjectList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_projectInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(uniqueProjectList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_projectWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(uniqueProjectList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void add_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void add_duplicateProject_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e uniqueProjectList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_nullTargetProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProject(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_nullEditedProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProject(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_targetProjectNotInList_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(ProjectNotFoundException.class, () -\u003e uniqueProjectList.setProject(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectIsSameProject_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.setProject(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.setProject(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueProjectList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.setProject(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueProjectList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectHasNonUniqueIdentity_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e uniqueProjectList.setProject(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove_projectDoesNotExist_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(ProjectNotFoundException.class, () -\u003e uniqueProjectList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove_existingProject_removesProject() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_nullUniqueProjectList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProjects((UniqueProjectList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_uniqueProjectList_replacesOwnListWithProvidedUniqueProjectList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueProjectList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.setProjects(expectedUniqueProjectList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setProjects((List\u003cProject\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cProject\u003e projectList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueProjectList.setProjects(projectList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueProjectList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueProjectList, uniqueProjectList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_listWithDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cProject\u003e listWithDuplicateProjects \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateProjectException.class, () -\u003e uniqueProjectList.setProjects(listWithDuplicateProjects));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_nullSortType_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueProjectList.setOrder(null, true));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_alphabeticalAscendingSortType_sortsListAlphabeticallyAscending() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        uniqueProjectList.setOrder(SortType.ALPHA, true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByAlphabeticalAscending());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(uniqueProjectList, expectedUniqueProjectList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_alphabeticalDescendingSortType_sortsListAlphabeticallyDescending() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        uniqueProjectList.setOrder(SortType.ALPHA, false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByAlphabeticalDescending());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(uniqueProjectList, expectedUniqueProjectList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_deadlineAscendingSortType_sortsListDeadlineAscending() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        uniqueProjectList.setOrder(SortType.DEADLINE, true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByDeadlineAscending());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(uniqueProjectList, expectedUniqueProjectList);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_deadlineDescendingSortType_sortsListDeadlineDescending() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        uniqueProjectList.setOrder(SortType.DEADLINE, false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByDeadlineDescending());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(uniqueProjectList, expectedUniqueProjectList);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_createdDateAscendingSortType_sortsListCreatedDateAscending() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        uniqueProjectList.setOrder(SortType.CREATED, true);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByCreatedDateAscending());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(uniqueProjectList, expectedUniqueProjectList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_createdDateDescendingSortType_sortsListCreatedDateDescending() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        uniqueProjectList.setOrder(SortType.CREATED, false);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList expectedUniqueProjectList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByCreatedDateDescending());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(uniqueProjectList, expectedUniqueProjectList);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e uniqueProjectList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 157,
      "claracheong4": 8,
      "kkangs0226": 83
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/comparators/CreatedDateCompareTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Tests if the {@code Project}\u0027s date created can be compared to another {@code Project}\u0027s date created correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class CreatedDateCompareTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ANCIENT_DATE_PROJECT \u003d new ProjectBuilder().withName(\"Egyptian Pyramid\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"0001-01-01\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project FUTURE_DATE_PROJECT \u003d new ProjectBuilder().withName(\"UFO\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"3000-01-01\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_CREATED_DATE_NAME_ALPHABETICALLY_EARLIER \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_CREATED_DATE_NAME_ALPHABETICALLY_LATER \u003d new ProjectBuilder().withName(\"ZZZ\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_CREATED_DATE_NAME_ALPHABETICALLY_SAME \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final CreatedDateCompare CREATED_DATE_COMPARATOR \u003d new CreatedDateCompare();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has later created date -\u003e returns -1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(CREATED_DATE_COMPARATOR.compare(ALICE, FUTURE_DATE_PROJECT), -1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has earlier created date -\u003e returns 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(CREATED_DATE_COMPARATOR.compare(ALICE, ANCIENT_DATE_PROJECT), 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically later -\u003e returns negative number"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(CREATED_DATE_COMPARATOR.compare(ALICE, SAME_CREATED_DATE_NAME_ALPHABETICALLY_LATER) \u003c 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically earlier -\u003e returns positive number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(CREATED_DATE_COMPARATOR.compare(ALICE, SAME_CREATED_DATE_NAME_ALPHABETICALLY_EARLIER) \u003e 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically same -\u003e returns 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(CREATED_DATE_COMPARATOR.compare(ALICE, SAME_CREATED_DATE_NAME_ALPHABETICALLY_SAME), 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 55
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/comparators/DeadlineCompareTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Tests if the {@code Project}\u0027s deadline can be compared to another {@code Project}\u0027s deadline created correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DeadlineCompareTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ANCIENT_DEADLINE_PROJECT \u003d new ProjectBuilder().withName(\"Egyptian Pyramid\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"0001-01-01\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"0001-02-02\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project FUTURE_DEADLINE_PROJECT \u003d new ProjectBuilder().withName(\"UFO\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"3000-01-01\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"3000-02-02\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DATE_NO_TIME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"2020-11-05\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DATE_EARLIER_TIME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"01:01:01\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DATE_LATER_TIME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"23:23:23\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DEADLINE_NAME_ALPHABETICALLY_EARLIER \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"11:11:11\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DEADLINE_NAME_ALPHABETICALLY_LATER \u003d new ProjectBuilder().withName(\"ZZZ\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"11:11:11\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DEADLINE_NAME_ALPHABETICALLY_SAME \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"11:11:11\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final DeadlineCompare DEADLINE_COMPARATOR \u003d new DeadlineCompare();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has later deadline date -\u003e returns -1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FUTURE_DEADLINE_PROJECT.getNullOrDeadline()), -1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has earlier deadline date -\u003e returns 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ANCIENT_DEADLINE_PROJECT.getNullOrDeadline()), 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first project has no time, second project has time -\u003e returns -1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(SAME_DATE_NO_TIME.getNullOrDeadline(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE.getNullOrDeadline()), -1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first project has time, second project has no time -\u003e returns 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DATE_NO_TIME.getNullOrDeadline()), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have time and second project has later time -\u003e returns -1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(), SAME_DATE_LATER_TIME.getNullOrDeadline()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                -1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have time and second project has earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DATE_EARLIER_TIME.getNullOrDeadline()), 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have same date and time and second project name is alphabetically later"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // -\u003e returns negative number"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DEADLINE_NAME_ALPHABETICALLY_LATER.getNullOrDeadline()) \u003c 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have same date and time and second project name is alphabetically earlier"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // -\u003e returns positive number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DEADLINE_NAME_ALPHABETICALLY_EARLIER.getNullOrDeadline()) \u003e 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have same date and time name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // -\u003e returns zero"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DEADLINE_NAME_ALPHABETICALLY_SAME.getNullOrDeadline()), 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 96
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/comparators/NameCompareTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Tests if the {@code Project}\u0027s name can be compared to another {@code Project}\u0027s name correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class NameCompareTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project AAA_NAME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ZZZ_NAME \u003d new ProjectBuilder().withName(\"ZZZ\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_NAME \u003d new ProjectBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final NameCompare NAME_COMPARATOR \u003d new NameCompare();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project name is alphabetically later -\u003e returns negative number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(NAME_COMPARATOR.compare(ALICE, ZZZ_NAME) \u003c 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically earlier -\u003e returns positive number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(NAME_COMPARATOR.compare(ALICE, AAA_NAME) \u003e 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first and second project have same name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(NAME_COMPARATOR.compare(ALICE, SAME_NAME), 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 41
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_KEYWORD \u003d Collections.singletonList(\"coding\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"likes\", \"coding\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONE_MATCHING_KEYWORD \u003d Arrays.asList(\"coding\", \"starbucks\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MIXED_CASE_KEYWORDS \u003d Arrays.asList(\"lIkEs\", \"cOdiNg\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORDS \u003d Arrays.asList(\"nothing\", \"matches\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_NAME \u003d Arrays.asList(\"Alice\", \"Pauline\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_TAG \u003d Collections.singletonList(\"friends\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAnyPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondAnyPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAllPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondAllPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAnyPredicateCopy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicateCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAllPredicateCopy \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(secondAnyPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(secondAllPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_descriptionContainsKeywords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (Any)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (Any)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (Any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (Any)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (All)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (All)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (All)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (All)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (Any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match description (Any)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match description (Any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (All)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match description (All)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match description (All)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 128
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_KEYWORD \u003d Collections.singletonList(\"Alice\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"Alice\", \"Pauline\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONE_MATCHING_KEYWORD \u003d Arrays.asList(\"Alice\", \"Bob\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MIXED_CASE_KEYWORDS \u003d Arrays.asList(\"AlIcE\", \"PaUlInE\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORDS \u003d Arrays.asList(\"nothing\", \"matches\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_DESCRIPTION \u003d Arrays.asList(\"Likes\", \"Coding\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_TAG \u003d Collections.singletonList(\"friends\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAnyPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate secondAnyPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAllPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate secondAllPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAnyPredicateCopy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicateCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAllPredicateCopy \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(secondAnyPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(secondAllPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_nameContainsKeywords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (Any)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (Any)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (Any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (Any)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (All)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (All)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (All)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (All)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (Any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match name (Any)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match name (Any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (All)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match name (All)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match name (All)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 91,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/TagListContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TagListContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_KEYWORD \u003d Collections.singletonList(\"friends\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"friends\", \"owesMoney\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONE_MATCHING_KEYWORD \u003d Arrays.asList(\"dogs\", \"owesMoney\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MIXED_CASE_KEYWORDS \u003d Arrays.asList(\"fRiEnDs\", \"oWeSmOneY\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORDS \u003d Arrays.asList(\"nothing\", \"matches\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_NAME \u003d Arrays.asList(\"Benson\", \"Meier\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_DESCRIPTION \u003d Collections.singletonList(\"dogs\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAnyPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate secondAnyPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAllPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate secondAllPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAnyPredicateCopy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicateCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAllPredicateCopy \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(secondAnyPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(secondAllPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_tagListContainsKeywords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (Any)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (Any)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (Any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (Any)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (All)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (All)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (All)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (All)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_tagListDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (Any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match tags (Any)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match tags (Any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (All)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match tags (All)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match tags (All)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 128
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/timer/TimerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TimerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void start_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer \u003d new Timer().start();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer expectedTimer \u003d new Timer(TypicalTimes.DAY, TypicalTimes.DAY, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedTimer, timer);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void isRunning_timerStarted_true() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer \u003d new Timer().start();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer expectedTimer \u003d new Timer(TypicalTimes.DAY, TypicalTimes.DAY, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedTimer.isRunning(), timer.isRunning());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void isRunning_timerNotStarted_false() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer expectedTimer \u003d new Timer(TypicalTimes.DAY, TypicalTimes.DAY, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedTimer.isRunning(), timer.isRunning());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void stop_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer \u003d new Timer().start().stop();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer expectedTimer \u003d new Timer(TypicalTimes.DAY, TypicalTimes.DAY, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedTimer, timer);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void getStartTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer \u003d new Timer().start();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, timer.getStartTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void getStopTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer \u003d new Timer().start().stop();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, timer.getStopTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer1 \u003d new Timer();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer timer2 \u003d new Timer();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(timer1, timer1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(timer1, timer2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer differentStart \u003d new Timer(TypicalTimes.DAY_ADD_DAY, TypicalTimes.DAY, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertNotEquals(timer1, differentStart);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer differentEnd \u003d new Timer(TypicalTimes.DAY, TypicalTimes.DAY_ADD_WEEK, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertNotEquals(timer1, differentEnd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Timer differentIsRunning \u003d new Timer(TypicalTimes.DAY, TypicalTimes.DAY, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertNotEquals(timer1, differentIsRunning);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 78
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/timer/UniqueDurationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DuplicateDurationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DurationNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalWorkDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class UniqueDurationListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final UniqueDurationList uniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void contains_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void contains_durationNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(uniqueDurationList.contains(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void contains_durationInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(uniqueDurationList.contains(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void add_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void add_duplicateDuration_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(DuplicateDurationException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void remove_projectDoesNotExist_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(DurationNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.remove(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void remove_existingProject_removesProject() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.remove(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList expectedUniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedUniqueDurationList, uniqueDurationList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_nullUniqueProjectList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.setDurations((UniqueDurationList) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_uniqueProjectList_replacesOwnListWithProvidedUniqueProjectList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList expectedUniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedUniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_MONTH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.setDurations(expectedUniqueDurationList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedUniqueDurationList, uniqueDurationList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.setDurations((List\u003cWorkDuration\u003e) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cWorkDuration\u003e durationList \u003d Collections.singletonList(TypicalWorkDuration.DURATION_ONE_MONTH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.setDurations(durationList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList expectedUniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedUniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_MONTH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedUniqueDurationList, uniqueDurationList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_listWithDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cWorkDuration\u003e listWithDuplicateDurations \u003d Arrays.asList(TypicalWorkDuration.DURATION_ONE_DAY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(DuplicateDurationException.class, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.setDurations(listWithDuplicateDurations));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 108
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/timer/WorkDurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalWorkDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class WorkDurationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void isSameDuration() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        new ProjectBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        Project editedAlice \u003d editedAlice \u003d new ProjectBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        WorkDuration durationCopy \u003d new WorkDuration(TypicalWorkDuration.DURATION_ONE_DAY.getStartTime(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                TypicalWorkDuration.DURATION_ONE_DAY.getStopTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(durationCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(TypicalWorkDuration.DURATION_ONE_MONTH));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different startTime -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        WorkDuration diffStart \u003d new WorkDuration(new DateTime(LocalDateTime.now()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                TypicalWorkDuration.DURATION_ONE_DAY.getStopTime());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(diffStart));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different stopTime -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        WorkDuration diffEnd \u003d new WorkDuration(TypicalWorkDuration.DURATION_ONE_DAY.getStartTime(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new DateTime(LocalDateTime.now()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(diffEnd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 61,
      "claracheong4": 3
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonAdaptedDeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-42-99\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_TIME \u003d \"65:21:02\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2020-02-09\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"05:21:02\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_validDeadlineDetails_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(VALID_DATE, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadline.toModelType(), expectedDeadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedDeadline \u003d new Deadline(VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadline.toModelType(), expectedDeadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(INVALID_DATE, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(VALID_DATE, INVALID_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(INVALID_DATE, INVALID_TIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, deadline::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 45
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.storage.JsonAdaptedProject.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class JsonAdaptedProjectTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_CREATED_DATE \u003d \"2019-42-99\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DEADLINE_DATE \u003d \"2020-42-99\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DEADLINE_TIME \u003d \"65:21:02\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_STOP_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_CREATED_DATE \u003d BENSON.getCreatedDate().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final JsonAdaptedDeadline VALID_DEADLINE \u003d new JsonAdaptedDeadline(BENSON.getDeadline());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final List\u003cJsonAdaptedWorkDuration\u003e VALID_DURATIONS \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            BENSON.getDurationList().stream().map(JsonAdaptedWorkDuration::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final JsonAdaptedTimer VALID_TIMER \u003d new JsonAdaptedTimer(BENSON.getTimer());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void toModelType_validProjectDetails_returnsProject() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(BENSON, project.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(INVALID_NAME, VALID_DESCRIPTION, VALID_CREATED_DATE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_DEADLINE, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(null, VALID_DESCRIPTION, VALID_CREATED_DATE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_DEADLINE, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidCreatedDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, INVALID_CREATED_DATE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_DEADLINE, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedDeadline invalidJsonAdaptedDeadline \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new JsonAdaptedDeadline(INVALID_DEADLINE_DATE, INVALID_DEADLINE_TIME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, INVALID_CREATED_DATE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                invalidJsonAdaptedDeadline, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_CREATED_DATE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_DEADLINE, invalidTags, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, project::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidDurations_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cJsonAdaptedWorkDuration\u003e invalidDurations \u003d new ArrayList\u003c\u003e(VALID_DURATIONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        invalidDurations.add(new JsonAdaptedWorkDuration(INVALID_START_TIME, INVALID_STOP_TIME));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_CREATED_DATE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_DEADLINE, VALID_TAGS, invalidDurations, VALID_TIMER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, project::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 14,
      "pr4aveen": 2,
      "claracheong4": 44,
      "kkangs0226": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedTimerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.storage.JsonAdaptedWorkDuration.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class JsonAdaptedTimerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String VALID_TIME \u003d \"2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_validTimerDetails_returnsTimer() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, VALID_TIME, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Timer expectedTimer \u003d new Timer(new DateTime(VALID_TIME), new DateTime(VALID_TIME), false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(timer.toModelType(), expectedTimer);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(INVALID_TIME, VALID_TIME, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(null, VALID_TIME, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, INVALID_TIME, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, null, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullIsRunning_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, VALID_TIME, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isRunning\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 57,
      "claracheong4": 6
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedWorkDurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.storage.JsonAdaptedWorkDuration.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalWorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class JsonAdaptedWorkDurationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String VALID_TIME \u003d \"2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final List\u003cJsonAdaptedWorkDuration\u003e VALID_DURATIONS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            BENSON.getDurationList().stream().map(JsonAdaptedWorkDuration::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_validDurationDetails_returnsDuration() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d new JsonAdaptedWorkDuration(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(TypicalWorkDuration.DURATION_ONE_DAY.getStartTime().get().getSecond(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                duration.toModelType().getStartTime().get().getSecond());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(TypicalWorkDuration.DURATION_ONE_DAY.getStopTime().get().getSecond(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                duration.toModelType().getStopTime().get().getSecond());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new JsonAdaptedWorkDuration(INVALID_TIME, VALID_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d new JsonAdaptedWorkDuration(null, VALID_TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new JsonAdaptedWorkDuration(VALID_TIME, INVALID_TIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new JsonAdaptedWorkDuration(VALID_TIME, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 56,
      "claracheong4": 9
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonProjectBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonProjectBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonProjectBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void readProjectBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readProjectBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private java.util.Optional\u003cReadOnlyProjectBook\u003e readProjectBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new JsonProjectBookStorage(Paths.get(filePath)).readProjectBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(readProjectBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProjectBook(\"notJsonFormatProjectBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    public void readProjectBook_invalidProjectProjectBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        assertThrows(DataConversionException.class, () -\u003e readProjectBook(\"invalidProjectProjectBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    public void readProjectBook_invalidAndValidProjectProjectBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        assertThrows(DataConversionException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //              () -\u003e readProjectBook(\"invalidAndValidProjectProjectBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void readAndSaveProjectBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempProjectBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook original \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage jsonProjectBookStorage \u003d new JsonProjectBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        jsonProjectBookStorage.saveProjectBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReadOnlyProjectBook readBack \u003d jsonProjectBookStorage.readProjectBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        original.addProject(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        original.renameProject(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        jsonProjectBookStorage.saveProjectBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        readBack \u003d jsonProjectBookStorage.readProjectBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        original.addProject(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        jsonProjectBookStorage.saveProjectBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        readBack \u003d jsonProjectBookStorage.readProjectBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook_nullProjectBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProjectBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Saves {@code projectBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void saveProjectBook(ReadOnlyProjectBook projectBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new JsonProjectBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    .saveProjectBook(projectBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProjectBook(new ProjectBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 111
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonSerializableProjectBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonSerializableProjectBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableProjectBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path TYPICAL_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalProjectsProjectBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path DUPLICATE_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateProjectProjectBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_typicalProjectsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonSerializableProjectBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PROJECT_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonSerializableProjectBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook typicalProjectsProjectBook \u003d TypicalProjects.getTypicalProjectBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(projectBookFromFile, typicalProjectsProjectBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    public void toModelType_invalidProjectFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        JsonSerializableProjectBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PROJECT_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //                JsonSerializableProjectBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_duplicateProjects_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonSerializableProjectBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PROJECT_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonSerializableProjectBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableProjectBook.MESSAGE_DUPLICATE_PROJECT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 46
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(Paths.get(\"projectbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage projectBookStorage \u003d new JsonProjectBookStorage(getTempFilePath(\"pb\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        storageManager \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void projectBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         * {@link JsonProjectBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonProjectBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook original \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        storageManager.saveProjectBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReadOnlyProjectBook retrieved \u003d storageManager.readProjectBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getProjectBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertNotNull(storageManager.getProjectBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/EditProjectDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class to help with building EditProjectDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class EditProjectDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private EditCommand.EditProjectDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditProjectDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor \u003d new EditCommand.EditProjectDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditProjectDescriptorBuilder(EditCommand.EditProjectDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditProjectDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an {@code EditProjectDescriptor} with fields containing {@code project}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditProjectDescriptorBuilder(Project project) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor \u003d new EditCommand.EditProjectDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor.setName(project.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        descriptor.setDescription(project.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setDeadline(project.getDeadline());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor.setTags(project.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Name} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditProjectDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the {@code Description} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public EditProjectDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public EditProjectDescriptorBuilder withDeadline(String date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setDeadline(new Deadline(date));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditProjectDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public EditProjectDescriptorBuilder withDeadline(String date, String time) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setDeadline(new Deadline(date, time));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditProjectDescriptor}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditProjectDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditCommand.EditProjectDescriptor build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 52,
      "claracheong4": 23,
      "kkangs0226": 10
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/ProjectBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * A utility class to help with building ProjectBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " *     {@code ProjectBook projectBook \u003d new ProjectBookBuilder().withProject(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ProjectBook projectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBookBuilder(ProjectBook projectBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBook \u003d projectBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Adds a new {@code Project} to the {@code ProjectBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBookBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.addProject(project);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 34
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/ProjectBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Likes coding\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEFAULT_CREATED_DATE \u003d \"2019-11-05\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEFAULT_DEADLINE_DATE \u003d \"2020-11-05\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEFAULT_DEADLINE_TIME \u003d \"11:11:11\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Date createdDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private UniqueDurationList durations;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates a {@code ProjectBuilder} with the default details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        createdDate \u003d new Date(DEFAULT_CREATED_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE_DATE, DEFAULT_DEADLINE_TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Initializes the ProjectBuilder with the data of {@code projectToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        name \u003d projectToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        description \u003d projectToCopy.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        createdDate \u003d projectToCopy.getCreatedDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d projectToCopy.getDeadline();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(projectToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (WorkDuration duration : projectToCopy.getDurationList()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            durations.add(duration);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timer \u003d projectToCopy.getTimer();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Name} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the {@code Description} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ProjectBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the {@code Description} of the {@code Project} that we are building to an empty string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withEmptyDescription() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d Description.EMPTY_DESCRIPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code CreatedDate} of the {@code Project} that we are building with current date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withCurrentCreatedDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDate \u003d new Date(Clock.now().getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code CreatedDate} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withCreatedDate(String createdDate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDate \u003d new Date(createdDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building with an empty deadline."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withEmptyDeadline() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withDeadline(String date) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d new Deadline(date);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withDeadline(String date, String time) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d new Deadline(date, time);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the {@code durations} into a {@code UniqueDurationList} and set it to the {@code Project} that we"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ProjectBuilder withDurations(WorkDuration... durations) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.durations \u003d SampleDataUtil.getDurationList(durations);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the {@code timer} into a {@code Timer} and set it to the {@code Project} that we"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ProjectBuilder withTimer(Timer timer) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, createdDate, deadline, tags, durations, timer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 30,
      "pr4aveen": 50,
      "claracheong4": 59,
      "kkangs0226": 20
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/ProjectUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand.EditProjectDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class for Project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an add command string for adding the {@code project}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static String getAddCommand(Project project) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getProjectDetails(project);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the part of command string for the given {@code project}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static String getProjectDetails(Project project) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        sb.append(PREFIX_NAME + project.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + project.getDescription().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline deadline \u003d project.getDeadline();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!deadline.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            sb.append(PREFIX_DEADLINE_DATE + deadline.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (deadline.hasTime()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                sb.append(PREFIX_DEADLINE_TIME + deadline.getTime().toString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        project.getTags().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the part of command string for the given {@code EditProjectDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static String getEditProjectDescriptorDetails(EditProjectDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (descriptor.getDeadline().isPresent() \u0026\u0026 !descriptor.getDeadline().isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Deadline deadline \u003d descriptor.getDeadline().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            sb.append(PREFIX_DEADLINE_DATE + deadline.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (deadline.hasTime()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                sb.append(PREFIX_DEADLINE_TIME + deadline.getTime().toString() + \" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 11,
      "claracheong4": 24,
      "kkangs0226": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/SortCommandUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand DEFAULT_SORT_COMMAND \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.NULL, true, true);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand ALPHA_ASCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.ALPHA, true, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand ALPHA_DESCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.ALPHA, false, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand DEADLINE_ASCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.DEADLINE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand DEADLINE_DESCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.DEADLINE, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand CREATED_DATE_ASCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.CREATED, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand CREATED_DATE_DESCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.CREATED, false, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.NULL, true, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            new SortCommand(SortType.NULL, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 34
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the middle index of the project in the {@code model}\u0027s project list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProjectList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the last index of the project in the {@code model}\u0027s project list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProjectList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the project in the {@code model}\u0027s project list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static Project getProject(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return model.getFilteredProjectList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 7,
      "claracheong4": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Index INDEX_FIRST_PROJECT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Index INDEX_SECOND_PROJECT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Index INDEX_THIRD_PROJECT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 3,
      "claracheong4": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalProjects.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class containing a list of {@code Project} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TypicalProjects {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project ALICE \u003d new ProjectBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Likes coding\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"11:11:11\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project BENSON \u003d new ProjectBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Likes dogs\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-11-05\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"12:43:12\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(TypicalWorkDuration.DURATION_ONE_DAY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withTimer(TypicalTimers.DAY).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project CARL \u003d new ProjectBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes poodles\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-08-02\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project DANIEL \u003d new ProjectBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes cats\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-05-21\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ELLE \u003d new ProjectBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes elephants\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-07-21\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-07-21\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project FIONA \u003d new ProjectBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes starbucks\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-03-21\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-03-21\", \"05:02:09\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project GEORGE \u003d new ProjectBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes you\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-07-28\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project HOON \u003d new ProjectBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project IDA \u003d new ProjectBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Manually added - Project\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project AMY \u003d new ProjectBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project BOB \u003d new ProjectBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private TypicalProjects() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an {@code ProjectBook} with all the typical projects."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static ProjectBook getTypicalProjectBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            projectBook.addProject(project);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "pr4aveen": 13,
      "claracheong4": 50,
      "kkangs0226": 7,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalProjectsOrders.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class TypicalProjectsOrders {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static List\u003cProject\u003e getOrderedProjectBookByAlphabeticalAscending() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static List\u003cProject\u003e getOrderedProjectBookByAlphabeticalDescending() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static List\u003cProject\u003e getOrderedProjectBookByDeadlineAscending() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static List\u003cProject\u003e getOrderedProjectBookByDeadlineDescending() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static List\u003cProject\u003e getOrderedProjectBookByCreatedDateAscending() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static List\u003cProject\u003e getOrderedProjectBookByCreatedDateDescending() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static UniqueProjectList getUniqueProjectList(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueProjectList uniqueProjectList \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : projects) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            uniqueProjectList.add(p);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return uniqueProjectList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 103
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalTimers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TypicalTimers {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Timer DAY \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new Timer(TypicalTimes.DAY, TypicalTimes.DAY_ADD_DAY, false);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Timer HOUR \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new Timer(TypicalTimes.DAY, TypicalTimes.DAY_ADD_HOUR, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Timer WEEK \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new Timer(TypicalTimes.DAY, TypicalTimes.DAY_ADD_WEEK, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 12
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalTimes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TypicalTimes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTime DAY \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTime(LocalDateTime.of(2019, 1, 1, 0, 0));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTime DAY_ADD_HOUR \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTime(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTime DAY_ADD_DAY \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTime(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.DAYS));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTime DAY_ADD_WEEK \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTime(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.WEEKS));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTime DAY_ADD_MONTH \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTime(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.MONTHS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTime DAY_ADD_YEAR \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTime(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.YEARS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 13,
      "claracheong4": 13
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalWorkDuration.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TypicalWorkDuration {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_DAY \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_DAY);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_HOUR \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_HOUR);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_WEEK \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_WEEK);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_MONTH \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_MONTH);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_YEAR \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_YEAR);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 17
    }
  },
  {
    "path": "src/test/java/seedu/momentum/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/momentum/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import seedu.momentum.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cfx:root type\u003d\"seedu.momentum.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 5
    }
  }
]
