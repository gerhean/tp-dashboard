[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W13-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W13-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "# GrAB3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "such as their appointments, revenue, and expenses - into a single application. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- GrAB3 has a Graphical User Interface (GUI), but it is optimised for use with a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- [User Guide](./docs/UserGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- [Developer Guide](./docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "- [About Us](./docs/AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 10,
      "galvinleow": 1,
      "-": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u003cimg src\u003d\"images/galvinleow.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "[[github](http://github.com/galvinleow)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "[[portfolio](team/galvinleow.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "* Responsibilities: UG, Scheduling"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### Wei Kit Khoong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cimg src\u003d\"images/khoongwk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "[[github](http://github.com/khoongwk)] "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "[[portfolio](team/khoongwk.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Chang Rui Feng"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "\u003cimg src\u003d\"images/ruifengg.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "[[github](http://github.com/RuiFengg)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "[[portfolio](team/ruifengg.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### Hans Sebastian Tirtaputra"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cimg src\u003d\"images/hansebastian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "[[github](http://github.com/hansebastian)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "[[portfolio](team/hansebastian.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Tan Yan Lyn"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u003cimg src\u003d\"images/yanlynnnnn.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "[[github](https://github.com/yanlynnnnn)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "[[portfolio](team/yanlynnnnn.md)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 5,
      "khoongwk": 5,
      "hansebastian": 4,
      "galvinleow": 13,
      "-": 37
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "# GrAB3 Developer Guide"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## Table of Contents:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [2. Setting up, getting started](#2-setting-up-getting-started)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [3. Design](#3-design)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [5. Documentation](#5-documentation)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [6. Logging](#6-logging)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [7. Testing](#7-testing)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [8. Configuration](#8-configuration)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [9. DevOps](#9-dev-ops)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix C: Use Cases](#appendix-c-use-cases)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix D: Non Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix F: Instructions for Manual Testing](#appendix-f-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * [Appendix G: Effort](#appendix-g-effort)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 1. **Introduction**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "**GrAB3** is a desktop business management application meant for home-based beauty salon owners who want to consolidate all"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "the information related to their business, such as upcoming appointments, their list of clients, as well as profits recorded. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "It focuses on the Command Line Interface (CLI) while providing users with a simple and clean Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Thus, the main interaction with **GrAB3**. will be done through commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "The features of GrAB3 include:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Keeping track of existing/new clients."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Scheduling of upcoming appointments with clients."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Recording of revenue from services provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Recording of business-related expenses."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Calculation of business profit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "The purpose of this Developer Guide is to help you understand the design and implementation of **GrAB3**, "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "so that you can get started on your contributions to **GrAB3**."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 2. **Setting up, getting started**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 3. **Design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 3.2 UI component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 3.3 Logic component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a client)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 3.4 Model component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cClient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Client` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Client` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 3.5 Storage component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 3.6 Common classes"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 4. **Implementation**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th client in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new client. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Step 4. The user now decides that adding the client was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the client being deleted)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 5. **Documentation**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Refer to the guide [here](Documentation.md)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 6. **Logging**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Refer to the guide [here](Logging.md)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 7. **Testing**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Refer to the guide [here](Testing.md)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 8. **Configuration**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Refer to the guide [here](Configuration.md)."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 9. **Dev-ops**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Refer to the guide [here](DevOps.md)."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## **Appendix A: Product Scope**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Independent home-based business owner."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Has little knowledge of business management software."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Prefers to have relevant business components in a single application."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Is a fast typist."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Prefers typing over using mouse input."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Consolidates everything a home-based business needs such as appointments, clients, expenses, revenue and services into one place"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Saves significant time for the business owner, who previously had to manage details across his/her contacts, excel sheets, and inventory notebooks."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Does not require extensive technical knowledge compared to other business management software."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Displays expenses and revenue in a simple format for users to view."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## **Appendix B: User Stories**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                          | I want to …​                                                                                                             | So that I can…​                                                                                                      |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| -------- | ----------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Meticulous home-based beauty salon owner        | Keep track of my total monthly revenue                                                                                  | Have a good idea of how my business is doing                                                                        |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Budget-minded home-based beauty salon owner     | Keep track of my total monthly business-related expenses                                                                | Adjust the pricing of my services accordingly                                                                       |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Business-minded home-based beauty salon owner   | Keep track of my total monthly profit                                                                                   | Understand if my business is profitable and if it falls within a healthy profit margin                              |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Forgetful home-based beauty salon owner         | Find a service based on its name/keyword                                                                                | Easily refer to the price/duration of the service to answer client queries                                          |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Edit a service                                                                                                          | Change details about a specific service accordingly, such as adjusting the price/duration                           |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Delete a service                                                                                                        | Remove a service that I am no longer offering                                                                       |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Add a service                                                                                                           | Enter a new service that I recently decided to offer                                                                |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | List my services                                                                                                        | View all the services that I am currently offering                                                                  |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Organized home-based beauty salon owner         | Keep track of all my clients                                                                                            | To find my clients easily when I want to contact them                                                               |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Add a client                                                                                                            | Record a new client that has not visited my salon before                                                            |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Edit a client                                                                                                           | Change details about a specific client, such as their new contact information                                       |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Find a client by their name or phone number                                                                             | Determine if the client has visited my salon before, and find their contact details from their name or vice versa   |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Organized home-based beauty salon owner         | Keep track of all my appointments, including the date and time of the appointment, service provided, and client served, | Organize my work schedule and avoid double-booking of appointments                                                  |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Add an appointment                                                                                                      | Enter a new appointment made into my appointment schedule                                                           |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Edit an appointment                                                                                                     | Change appointment details, such as date/time if the appointment is postponed                                       |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Delete an appointment                                                                                                   | Remove an appointment from my schedule if the client cancels or does not turn up                                    |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Forgetful home-based beauty salon owner         | Find an appointment                                                                                                     | Easily refer to the appointment details to answer client queries                                                    |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | Mark an appointment as done                                                                                             | Add a record for revenue earned from that appointment                                                               |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Home-based beauty salon owner                   | List my revenues                                                                                                        | View all the revenue entries that I have                                                                            |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* * *`  | Forgetful home-based beauty salon owner         | Find a revenue                                                                                                          | See exactly how much revenue a certain type of service is bringing in                                               |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* *`    | Home-based beauty salon owner                   | Add an expense                                                                                                          | Record a new expense that I have made                                                                               |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* *`    | Home-based beauty salon owner                   | Tag my expense                                                                                                          | Organise my expenses according to the categories they fall under, such as an expense related to a particular service|"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* *`    | Home-based beauty salon owner                   | Edit an expense                                                                                                         | Change the details of an expense, in the case that I input the wrong price/description of the expense               |"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* *`    | Home-based beauty salon owner                   | Delete an expense                                                                                                       | Remove an expense that I may have added mistakenly                                                                  |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* *`    | Home-based beauty salon owner                   | Sort my expenses based on their price                                                                                   | Have an idea of which expenses incur the most/least cost to my business                                             |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `* *`    | Home-based beauty salon owner                   | List my expenses                                                                                                        | View all the expense entries that I have                                                                            |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `*    `  | Busy home-based beauty salon owner              | Have a built-in help guide                                                                                              | Familiarize myself with the application quickly                                                                     |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `*    `  | Home-based beauty salon owner                   | Clear all the information in the application                                                                            | Restart all my beauty salon related records from scratch                                                            |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `*    `  | Prudent home-based beauty salon owner           | Have a breakdown of my total monthly expenses based on the type of expense                                              | Minimize my expenditure on certain types of expenses                                                                |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `*    `  | Resourceful home-based beauty salon owner       | Have a breakdown of my total monthly revenue based on the type of service provided                                      | Have an idea of which services generate more revenue and adjust the services I provide accordingly                  |"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## **Appendix C: Use Cases**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "(For all use cases below, the **System** is `GrAB3` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Appointment List"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC01: Add an appointment into the appointment list**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: Appointment list must exist**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: A new appointment will be added to the appointment list**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "0.  User adds appointment into appointment list."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  GrAB3 shows the updated list of appointments."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "* 2a. The specified module code is invalid."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    * 2a1. GrAB3 shows an error message."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### Client List"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC02: Add a client to client list**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: A client must exist**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: A new client will added to the client list** "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  User requests to add a new client into the client list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "2.  GrAB3 shows the updated client list"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "* 1a. Client description is empty."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    * 1a1. GrAB3 shows an error message."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC03: Delete a client**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: client schedule must exist**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: The client specified by the user will be deleted**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  User requests to list all clients."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "2.  GrAB3 displays a list of clients."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "3.  User requests to delete a specific client from the list generated."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "4.  GrAB3 shows the updated list after deletion of the client."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "* 3a. The specified client does not exist."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    * 3a1. GrAB3 shows an error message."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC04: Edit a client**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: Client exists in TaskSchedule**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: Client specified by user gets edited**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  User requests to list all clients."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "2.  GrAB3 shows a list of clients."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "3.  User requests to edit the description of a specific client from that list."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "4.  GrAB3 shows the updated client."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    * 3a1. GrAB3 shows an error message."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Expense List"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC04: Sort expenses by ascending/descending order**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: Expenses exist in expense list**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: View of expenses sorted in order specified by user **"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  User requests to list all expenses."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "2.  GrAB3 shows a list of expenses."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "3.  User requests to sort the expenses by ascending order."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "4.  GrAB3 shows the sorted list view."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Revenue List"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC05: Clear the revenue list**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: Revenues exist in revenue list**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: An empty revenue list **"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  User requests to list all revenues."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "2.  GrAB3 shows a list of revenues."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "3.  User requests to clear the list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "4.  GrAB3 shows the updated list."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Service List"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**UC06: Delete a service **"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Preconditions: Service exists in service list**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Guarantees: Updated list with service specified by user deleted **"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1.  User requests to list all services."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "2.  GrAB3 shows a list of services."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "3.  User delete a service."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "4.  GrAB3 shows the updated list view."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Others"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* System Requirements:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * GrAB3 should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * GrAB3 should be optimized for keyboard input and can function without the use of a mouse."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "      However, a mouse would improve the user experience."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * The computer running the Java Virtual Machine (JVM) should have sufficient disk space to"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "      accommodate the user\u0027s data stored in the system. It should also have sufficient RAM"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "      and CPU power to run the JVM smoothly."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Performance Requirements:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * GrAB3 should be able to start up and load existing the user\u0027s stored data sufficiently fast (\u003c 10s). "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * Context switching / menu navigation through the use of either text commands or button clicks should be sufficiently fast (\u003c 10s). "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Usability:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    * GrAB3 should be user-friendly for any client who can use a computer and does not require prior technical knowledge."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * The user interface of GrAB3 should look intuitive and simple to navigate. It should not look cluttered with too many panels."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Reliability:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * GrAB3 should not crash in the event of incorrect user input - this should be handled safely with exceptions.  "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* Scalability:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    * GrAB3 should be able to handle thousands of appointments, clients, expenses and all other recorded entries by a user."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     No expansion of hardware capabilities or software modifications should be required."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "* **JVM**: Java Virtual Machine - Java code that is compiled is run in the virtual machine."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## **Appendix F: Instructions for manual testing**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Deleting a client"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1. Deleting a client while all clients are being shown"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "   1. Prerequisites: List all clients using the `list` command. Multiple clients in the list."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "      Expected: No client is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## Appendix G: Effort"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{to be added...}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 126,
      "khoongwk": 95,
      "hansebastian": 1,
      "yanlynnnnn": 32,
      "-": 303
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Are you an independent home-based beauty salon owner, scrambling between your calendar, client contacts, "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "and notebook to keep track of all your appointments, revenue and expenses? "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Do you spend hours tabulating all your revenue and expenses just to get an idea of how your business is doing?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Fret not, our application, GrAB3, will reduce the hassle of managing your business and saves your valuable time. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "such as their appointments, revenue and expenses - into a single application. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "The application uses a Command Line Interface (CLI)..."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Download the latest `GrAB3.jar` from [here](https://github.com/AY2021S1-CS2103T-W13-3/tp/releases)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your GrAB3."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1.Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  ~~* **`listmodules`** : Lists all module provided by the university.~~"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  ~~* **`setup`**`n/John Doe sd/22-09-2020 ed/29-11-2020 ay/AY20/21 Sem 1` : Adds a user named `John Doe` and academic year `AY20/21 Sem 1` that spans from `22-09-2020` to `29-11-2020`.~~"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  ~~* **`listtaskschedule`**`2` : List all the user tasks in task schedule for Week 2.~~"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  ~~* **`exit`** : Exits the app.~~"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## 3. About"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### 3.1 Structure of this document"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### 3.2 Reading this document"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 3.2.1 Terminology related to the GUI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 3.2.2 General Symbols and Syntax "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "The table below explains the general syntax used throughout the user guide."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| Syntax |  What it means |"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|----------|-------------|"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| `command` |  A grey highlighted block specifies a executable command that can be entered into the command box.  |"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| 💡 | The light bulb indicates that the enclosed text is a tip. |"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source: \u003c/div\u003e  | An exclamation mark indicates that the following text is important. |"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 3.2.3 Command Syntax and Usage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  e.g. in `setup n/USERNAME`, `USERNAME` is a parameter which can be used as `setup n/John Doe`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  e.g `tn/TASKNAME [t/TAG]` can be used as `tn/CCA lunch meeting t/CCA` or as `tn/CCA lunch meeting`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "* Items with `…​` after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/CCA`, `t/CCA t/Fintech Society` etc."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  e.g. if the command specifies `tn/TASKNAME du/DURATION`, `du/DURATION tn/TASKNAME` is also acceptable."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "This section contains all the information about the features of *GrAB3*. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Enter the command into the _Command Box_ to use each feature or sub-feature."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Feature 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#### Feature 1 parameter"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Command parameter explanation}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Feature command 1 `Feature command 1`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `Format`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Format explanation / limitation}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example description/ case scenario}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example action}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example Outcome details}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## 4.1 Services Management"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "This feature allows you to manage the services that your home-based beauty salon provides. You can record the "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "following information about your services: `TITLE`, `DURATION` and `PRICE`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.1 Service Management Command Parameters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Before you dive into using the feature, you may want to have a look at the common parameters used in this feature."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "The table below shows a list of command parameters that will be used in this feature."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "| Parameter Name | Description | Example"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|---------|---------|---------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`TITLE`| The title of the service you are providing. It must be alphanumeric words not more than 50 characters long.|E.g `Lash Lift`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`DURATION`| The duration of the service in hours. \u003cbr\u003e \u003cbr\u003e It be in half hour intervals.| E.g `1.5`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`PRICE`| The revenue received from the service. \u003cbr\u003e \u003cbr\u003e It must be in dollars.| E.g `5.50`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`SERVICE_CODE`| The service code is the code that identifies a particular type of service provided. \u003cbr\u003e \u003cbr\u003e It must be an alphanumeric word of 5 characters long. | E.g. If you have added an eyelash extension service into GrAB3 and its service code is `SC001`. \u003cbr\u003e \u003cbr\u003e Typing `SC001` would refers to the eyelash extension service."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.2 Add a new service: `addsvc`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "You can use this command to add a new service GrAB3."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Format: `addsvc t/TITLE d/DURATION p/PRICE`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "* Refer to [Service Management Command Parameters](#service-management-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Let\u0027s say you have a service with the following information you want to add into GrAB3. You can follow these instructions."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "| Service | |"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`TITLE`| Lash Lift |"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`DURATION`| 0.5 |"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|`PRICE`| 38 |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Adding the above service:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. Type `addsvc t/Lash Lift d/0.5 p/38` into the *Command Box*."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. The Result Display will show success message."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. GrAB3 will switch to the Services Tab."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. You can now see all your services including the newly added service."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.3 Edit an existing service: `editsvc`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "You can use this command to edit an existing service in GrAB3."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Format: `editsvc s/SERVICE_CODE [t/TITLE]* [d/DURATION]* [p/PRICE]*`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "* Refer to [Service Management Command Parameters](#service-management-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Let\u0027s say you have entered the wrong duration for an added service and want to change it to 0.5 hours instead"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "of 1 hour. You can follow these instructions."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Editing an existing service:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. Type `editsvc s/SC001 d/0.5` into the *Command Box*."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. GrAB3 will switch to the Services Tab."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. You can now see all your services including the edited service."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.4 Delete an existing service: `deletesvc`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "You can use this command to delete an existing service in GrAB3."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Format: `deletesvc s/SERVICE_CODE`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "* Refer to [Service Management Command Parameters](#service-management-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Let\u0027s say you are no longer providing a particular service and want to delete it from GrAB3. You can follow these"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "instructions."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Deleting an existing service:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. Type `deletesvc s/SC001` into the *Command Box*."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. GrAB3 will switch to the Services Tab."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. You can now see that the service with service code SC001 has been deleted from GrAB3."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.5 Find a service by keyword: `findsvc`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "You can use this command to find services by keywords. GrAB3 will search for your services using the service title."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Format: `findsvc KEYWORD`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "* Refer to [Service Management Command Parameters](#service-management-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Let\u0027s say you want to find all the services that contain nail in its title from the list of services. You can"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "follow these instructions."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Finding a service:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. Type `findsvc nail` into the *Command Box*."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. GrAB3 will switch to the Services Tab."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. You can now see the services in your list of services that contain nail in its title."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.6 List all existing services: `listsvc`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "You can use this command to navigate to the Services Tab and display all your added services in GrAB3."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Format: `listsvc`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "* Refer to [Service Management Command Parameters](#service-management-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Let\u0027s say you are in another tab and want to look at the list of all services. You can follow these instructions."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Listing all services:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. Type `listsvc` into the *Command Box*."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. GrAB3 will switch to the Services Tab."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. You can now see all your services."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "#### 4.1.7 Clear all existing services: `clearsvc`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "You can use this command to clear and delete the all the services in GrAB3."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Format: `clearsvc`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "* Refer to [Service Management Command Parameters](#service-management-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Let\u0027s say you want to delete all the services from your list of services and start from an empty list of services. You can"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "follow these instructions."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Clearing all services:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. Type `clearsvc` into the *Command Box*."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "2. GrAB3 will switch to the Services Tab."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "3. You can see that the list of services is now empty."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## 6.1 Appointment Tracker"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Scheduling appointments is an essential part of your beauty salon and"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "GrAB3 makes it easy to keep track of your upcoming appointments with"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "your customers. You can add appointments for a particular service and"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "client, mark it as done, and GrAB3 will automatically credit the revenue"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "into the revenue tracker."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.1 Appointment Tracker Command Parameters"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "This feature uses a number of parameters, which are detailed below."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Parameter Name | Description | Example"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------|---------"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`DATE`  | The date of the appointment. \u003cbr\u003e \u003cbr\u003e It must be in the format of `dd-MM-yyyy`. | E.g. Typing `28-09-2020` would mean 28 September 2020."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`TIME` | The time of the appointment. \u003cbr\u003e \u003cbr\u003e It must be in the format of `HH:MM` | E.g. Typing `17:30` would mean 5:30 PM.  \u003cbr\u003e \u003cbr\u003e E.g. Typing `0900` would mean 9:00 AM."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`MONTH` | The month of the appointment. \u003cbr\u003e \u003cbr\u003e It must be in the format of a 3 letter phrase representing the month. | E.g. Typing `Jan` would mean January.  \u003cbr\u003e \u003cbr\u003e E.g. Typing `Dec` would mean December."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`SERVICE_CODE`| The service code is the code that identifies the type of service provided. \u003cbr\u003e \u003cbr\u003e It must be alphanumeric words of 5 characters long. | E.g. If you have added an eyelash extension service into GrAB3 and its service code is `SC001`. \u003cbr\u003e \u003cbr\u003e Typing `SC001` would refers to the eyelash extension service."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`PHONE_NUMBER` | The phone number of the client. \u003cbr\u003e \u003cbr\u003e It must be a 8-digit number starting with 6, 8, or 9.| E.g. Typing `81281234` or `91235678` is a valid phone number.  \u003cbr\u003e \u003cbr\u003e E.g. Typing `999`or `800012345` would not be a recognised number."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`NAME` | The name of the client booking the appointment. \u003cbr\u003e \u003cbr\u003e It must consist alphanumeric characters not more than 100 characters long. | E.g. If a client with the name `Hartin Menz` called to book an appointment, the same name `Hartin Menz` would be used as the parameter for `NAME`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`INDEX` | The index of the appointment in the displayed list. \u003cbr\u003e \u003cbr\u003e It must be a valid index number. | E.g. Typing `2` would mean the appointment with index-2 in the displayed list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.2 Add an appointment: `addapt`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "When a new or existing client calls to make a booking for your services, use this"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "command to add details of the appointment into the appointment tracker."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `addapt dt/DATE t/TIME s/SERVICE_CODE p/PHONE_NUMBER`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say your client called to make an appointment."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "You can follow these instructions to add his/her appointment details into GrAB3."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Appointment | |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`DATE`| 28-10-2020 |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`TIME`| 13:00 |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`SERVICE_CODE`| SC001 |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`PHONE_NUMBER`| 83232656 |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `addapt dt/28-10-2020 t/13:00 s/SC001 p/83232656` in the command box."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You can now see all your appointments including the newly added appointment."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "### 6.1.3 List all appointments: `listapt`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Use this command to see your list of all your upcoming appointments."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `listapt`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you want to list all your appointments stored in GrAB3."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "You can follow these instructions."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `listapt`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You can now see all your appointments stored in GrAB3."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.4 Find an appointment: `findapt`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Use this command to find a specific appointment which matches the description you provide"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "to GrAB3."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `findapt [p/PHONE_NUMBER]* [n/NAME]* [dt/DATE]* [s/SERVICE_CODE]* [m/MONTH]*`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you have a number of appointments stored in GrAB3 and you want to search for a particular one."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "You can follow these instructions to list all the appointments which match your search criteria(s)."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Appointment | |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`PHONE_NUMBER`| 82341245 |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`SERVICE_CODE`| SC002 |"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`MONTH`| Mar |"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `findapt p/82341245 s/SC002 m/Mar` in the command box."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You can now see all your appointments made by the number `82341245` in the"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "month of March and is of the service `SC002`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.5 Edit an appointment: `editapt`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "When a new or existing client calls to edit a booking he or she had made, use this"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "command to edit details of the appointment."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `editapt INDEX [dt/DATE] [t/TIME] [p/PHONE_NUMBER]`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you searched for the appointment which you want to edit in GrAB3."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "You searched for the appointment in GrAB3 with `listapt` or `findapt`,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "and you want to edit it with the following details:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Appointment | |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`INDEX`| 1 |"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`DATE`| 28-10-2020 |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`TIME`| 13:00 |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`PHONE_NUMBER`| 93451222 |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `editapt 1 dt/28-10-2020 t/13:00 p/93451222` in the command box."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You will see your edited appointment displayed alongside other appointments in your tracker."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.6 Mark an appointment as done: `done`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "After an appointment with a client has been completed, use this command to credit the revenue from the service and remove the appointment"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "from the list of upcoming appointments."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `done INDEX`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you just finished an appointment with a client. After finding the appointment in GrAB3"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "with `listapt` or `findapt`, you can follow these instructions to mark that appointment as done."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Appointment | |"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`INDEX`| 5 |"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `done 5` in the command box."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You will see your appointment marked as done, displayed alongside other appointments in your tracker."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.7 Mark an appointment as not done: `undone`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "In the event that an appointment was marked as done by accident, you can"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "use this command to revert this and ensure your appointment is still"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "scheduled to take place."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `undone INDEX`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you just marked an appointment as done by accident. You searched for that"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "appointment with `listapt` or `findapt` and the one you want to change is . You then follow these instructions to undo it."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Appointment | |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`INDEX`| 3 |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `undone 3` in the command box."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You will see your appointment marked as not done, alongside other appointments in your tracker."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.8 Delete an existing appointment: `deleteapt`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "If a client informs you that he or she wants to cancel an appointment, you can"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "use this command to delete that particular command from the appointment tracker."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `deleteapt INDEX`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you a client called to cancel his/her appointment. After finding the appointment in GrAB3"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "with `listapt` or `findapt`, you can follow these instructions to delete that appointment."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "| Appointment | |"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|--------- |"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|`INDEX`| 2 |"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `delete 2` in the command box."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You will see the rest of your appointments in your tracker, with the one with index 2 removed."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "### 6.1.9 Clear all appointments: `clearapt`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "In the event that you want to reset the entire list of appointments"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "in GrAB3, you may use this command to delete all prior and upcoming"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "appointments with your clients."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Format : `clearapt`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e :information_source:\u003c/div\u003e | Refer to [Appointment Tracker Command Parameters](#611-appointment-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "|---------|---------"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Let\u0027s say you want to clear all appointments stored in GrAB3."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "You can follow these instructions to do so."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Type `clearapt` in the command box."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. Press `Enter` on your keyboard."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. GrAB3 will switch to the appointment tab."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "1. You will no appointments listed in the tracker."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Revenue Tracker"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "GrAB3 knows that revenue tracking is very important for your business."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Thus, this feature allows you to track the revenue that you have generated effortlessly."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Revenue will be automatically recorded when an appointment is indicated as done."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#### Revenue Tracker Command Parameters"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Before you dive into using the feature, you may want to have a look at the common parameter used in this feature."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "The table below shows a list of command parameters that will be used in this feature."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "| Parameter Name | Description | Example"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|---------|---------|---------"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|`DATE`  | The revenue earned date. \u003cbr\u003e \u003cbr\u003e It must be in the format of `dd-MM-yyyy`. | E.g. Typing `28-09-2020` would mean 28 September 2020."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|`SERVICE_CODE`| The service code is the code that identifies a particular type of service provided. \u003cbr\u003e \u003cbr\u003e It must be alphanumeric words of 5 characters long. | E.g. If you have added an eyelash extension service into GrAB3 and its service code is `SC001`. \u003cbr\u003e \u003cbr\u003e Typing `SC001` would refers to the eyelash extension service."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|`ORDER` | The order refers to ascending or descending. \u003cbr\u003e \u003cbr\u003e It must be in the format of `asc` or `desc` | E.g. Typing `asc` would mean ascending.  \u003cbr\u003e \u003cbr\u003e E.g. Typing `desc` would mean descending."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Find a Revenue : `findrev`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can use this command to find revenues by \u0027date\u0027 or \u0027service code\u0027 in GrAB3."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `findrev [dt/DATE]* [s/SERVICE_CODE]*`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "* Refer to [Revenue Tracker Command Parameters](#revenue-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You have just stopped operations for the day, and you wish to view all the revenues generated for today (29-09-2020)."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can follow the steps below to get the list of revenues for the day."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `findrev dt/29-09-2020` into the _Command Box_."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Press `Enter` to execute. "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome : "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. It will display a success message ~~in the _Dashboard_.~~"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAB3 will list out all the revenue for 29-09-2020 in the _Revenue_ tab.  "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Sort Revenues: `sortrev`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can use this command to sort the list of revenue in ascending or descending order by value in GrAB3."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `sortrev ORDER`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "* Refer to [Revenue Tracker Command Parameters](#revenue-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You wish to view your revenue from highest to lowest cost to determine which revenue contributes most to your profits."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can follow the steps below to sort your list of revenues."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `sortrev desc` into the _Command Box_."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Press `Enter` to execute. "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome : "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. It will display a successful message ~~in the _Dashboard_.~~"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAB3 will list out all the revenue entries sorted from highest to lowest cost in the _Revenue_ tab."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### List Revenues : `listrev`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can use this command to list all your revenue entries in GrAB3."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `listrev`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You wish to list your revenues to view all the earnings that you currently have."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can follow the steps below to list your all your revenue entries."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `listrev` into the _Command Box_."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Press `Enter` to execute. "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome : "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. It will display a successful message ~~in the _Dashboard_.~~"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAB3 will list out all your revenue entries in the _Revenue_ tab."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Clear Expenses : `clearrev`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can use this command to clear all revenue entries in GrAB3."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `clearrev`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You wish to remove all revenues entries in GrAB3 and restart your revenue management from scratch."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can follow the steps below to clear all your revenue entries."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `clearrev` into the _Command Box_."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Press `Enter` to execute. "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome : "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. It will display a successful message ~~in the _Dashboard_.~~"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAB3 will clear all the revenue data."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Breakdown Revenue : `breakdownrev`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can use this command to breakdown revenue into their relevant categories, based on their \u0027service code\u0027."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `breakdownrev`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You wish to see which type of service generated the most revenue for your business, to possibly determine the business direction for there. "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "You can follow the steps below to view a breakdown of your revenues."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `breakdownrev` into the _Command Box_."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Press `Enter` to execute. "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome : "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. It will display a successful message ~~in the _Dashboard_.~~"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAB3 will display a Pie Chart that categorizes revenues based on their \u0027service code\u0027, along with the total cost of all expenses in each category."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "### Expense Tracker"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "GrAB3 knows that expense tracking in important in managing business expenditure."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Thus, this feature allows you to track all the expenses you may incur during your business operations."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "#### Expense Tracker Command Parameters"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Before you dive into using the feature, you may want to have a look at the common parameters used in this feature."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "The table below shows a list of command parameters that will be used."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "| Parameter Name | Description | Example"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|---------|---------|---------"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`DESCRIPTION`  | The description of the expense. \u003cbr\u003e\u003cbr\u003e It must be alphanumeric words not more than 50 characters long. | E.g. Typing `conditioner` would mean an expense on a bottle of conditioner."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`IS_FIXED`| The indication of whether an expense is a fixed or variable expense. \u003cbr\u003e \u003cbr\u003e It must be in the format of `t` or `f` | E.g. Typing `t` would mean the expense is fixed \u003cbr\u003e \u003cbr\u003e E.g. Typing `f` would mean the expense is variable."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`VALUE` | The value refers to the monetary value of the expense. \u003cbr\u003e \u003cbr\u003e It must consist only of numeric characters and a decimal point, and must have exactly two decimal places. | E.g. Typing `10.00` would mean the expense costs $10.00."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`DATE` | The date of the expense. \u003cbr\u003e \u003cbr\u003e It must be in the format of `dd-MM-yyyy`. | E.g. Typing `28-09-2020` would mean 28 September 2020."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`TAG` | The tag you want to attach to the expense. \u003cbr\u003e \u003cbr\u003e It must be a single alphanumeric word not more than 30 characters long. | E.g. Typing `equipment` would mean that the expense is tagged as an equipment."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`INDEX` | The index of the expense in the displayed list. \u003cbr\u003e \u003cbr\u003e It must be a valid index number. | E.g. Typing `2` would mean the expense with index-2 in the displayed list."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|`ORDER` | The order refers to ascending or descending. \u003cbr\u003e \u003cbr\u003e It must be in the format of `asc` or `desc` | E.g. Typing `asc` would mean ascending.  \u003cbr\u003e \u003cbr\u003e E.g. Typing `desc` would mean descending."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Add an Expense `addexp`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to add a new expense to GrAB3."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `addexp d/DESCRIPTION f/IS_FIXED v/VALUE dt/DATE [t/TAG]`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* Refer to [Expense Tracker Command Parameters](#expense-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You just purchased a bottle of conditioner for your client\u0027s hair treatment today for $15 (28-10-2020)."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to add the expense to GrAB3."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `addexp d/conditioner f/f v/15.00 dt/28-10-2020 t/hairsupplies` in to _Command Box_."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. GrAB3 will display a success message."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Edit an Expense `editexp`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to edit an expense in GrAB3."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `editexp INDEX [d/DESCRIPTION] [f/IS_FIXED] [v/VALUE] [dt/DATE] [t/TAG]`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "**:information_source: Notes:**\u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* You must enter at least one optional parameter."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* The new value entered will overwrite the existing value."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* Refer to [Expense Tracker Command Parameters](#expense-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You misspelled the description of an expense when adding it into GrAB3 and wish to change it to \"Eyelash Curler\"."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to edit the expense."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `editexp 2 d/Eyelash Curler` into the _Command Box_."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. GrAB3 will display a success message."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Delete an Expense `deleteexp`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to delete an expense in GrAB3."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `deleteexp INDEX`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* Refer to [Expense Tracker Command Parameters](#expense-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You mistakenly entered the same expense twice and wish to delete one of the entries. "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to delete the expense."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `deleteexp 3` into the _Command Box_."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. GrAB3 will display a success message."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Find an Expense `findexp`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to find an expense in GrAB3."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `findexp [d/DESCRIPTION]* [dt/DATE]* [f/IS_FIXED]* [t/TAG]*`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "**:information_source: Notes:**\u003cbr\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* You must enter at least one optional parameter."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* Refer to [Expense Tracker Command Parameters](#expense-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You have just stopped operations for the day, and wish to check the total expenses incurred today (08-09-2020)."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to get a list of expenses for the day."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `findexp dt/08-09-2020` into the _Command Box_."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. It will display a success message. "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. GrAB3 will list out all the expenses for 08-09-2020."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Sort Expenses `sortexp`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to sort expenses in GrAB3."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `sortexp ORDER`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " "
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "* Refer to [Expense Tracker Command Parameters](#expense-tracker-command-parameters) for more details about each parameter."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You wish to view your expenses from highest to lowest cost to determine which expenses are contributing most to your total expenditure."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to sort your list of expenses."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `sortexp desc` into the _Command Box_."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. It will display a success message."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. GrAB3 will list out all the expenses sorted from highest to lowest cost."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### List Expenses `listexp`"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to list all your expenses in GrAB3."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `listexp`"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You wish to list your expenses to view all the expense entries that you currently have."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to list your expenses."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `listexp` into the _Command Box_."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. It will display a success message."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. GrAB3 will list out all your expenses."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "##### Clear Expenses `clearexp`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to clear all expenses in GrAB3."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `clearexp`"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You wish to remove all expense entries in GrAB3 and restart your expense management from scratch."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to clear all your expenses."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `clearexp` into the _Command Box_."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. It will display a success message."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "##### Breakdown Expenses `breakdownexp`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can use this command to breakdown expenses into their relevant categories, based on their \u0027tags\u0027."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Format : `breakdownexp`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Example :"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You wish to see which types of expenses incur the most cost to your business, to minimize future expenditure."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "You can follow the steps below to view a breakdown of your expenses."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Steps :"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `breakdownexp` into the _Command Box_."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Outcome :"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "1. It will display a success message."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. GrAB3 will display a Pie Chart that categorizes expenses based on their \u0027tags\u0027, along with the total cost of all expenses in each category."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Others"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Others Command Parameter"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Command parameter explanation}"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#### Viewing help : `help`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Show a message explaining how to access the help page."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `help [COMMAND]`"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Format explanation / limitation}"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "If you are unsure of the commands that GrAB3 offered. You can follow the steps below to get a full list of all the commands."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps: "
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `help` into the _Command Box_."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome: "
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAb3 will switch to the _Help_ tab."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#### Exit GrAB3 : `exit`"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `exit`"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "If you wish to exit GrAb3. "
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Steps: "
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. Type `exit` into the _Command Box_."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "2. Press `Enter` to execute."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Outcome: "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "1. GrAb3 will close its window."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example outcome screenshot}"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Saving the Data - Can consider moving to about."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "GrAB3 data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Future Feature Enhancement v2.0"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description} "
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Feature 1"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#### Feature command 1 `Feature command 1`"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Description}"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Format : `Format`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Format explanation / limitation}"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example description/ case scenario}"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Example action}"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous GrAB3 home folder."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Feature"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "{Feature command table} "
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "### Service Management "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|Action | Format | Examples"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|---------|---------|---------"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|**Add** | `addsvc t/TITLE d/DURATION p/PRICE` | `addsvc t/Lash Lift d/0.5 p/38`"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|**Edit** | `editsvc s/SERVICE_CODE [t/TITLE]* [d/DURATION]* [p/PRICE]*` | `editsvc s/SC001 d/0.5`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|**Delete** | `deletesvc s/SERVICE_CODE` | `deletesvc s/SC001`"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|**Find** | `findsvc KEYWORD` | `findsvc nail`"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|**List** | `listsvc` | "
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "|**Clear** | `clearexp` | "
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Revenue Tracker"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|Action | Format | Examples"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|---------|---------|---------"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|**Find** | `findrev [dt/DATE]* [sc/SERVICE_CODE]*` | `findrev dt\\28-09-2020`"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|**Sort**       | `sortrev ORDER`                                                  | `sortexp desc`"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|**List**       | `listrev`                                                        | "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|**Clear**      | `clearrev`                                                       | "
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "|**Breakdown**  | `breakdownrev`                                                   | "
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "### Expense Tracker"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|Action | Format | Examples"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|---------------|------------------------------------------------------------------|------------------------------------------------------------------"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Add**        | `addexp d/DESCRIPTION f/IS_FIXED v/VALUE dt/DATE [t/TAG]`        | `addexp d/conditioner f/f v/15.00 dt/28-10-2020 t/hairsupplies`"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Edit**       | `INDEX [d/DESCRIPTION] [f/IS_FIXED] [v/VALUE] [dt/DATE] [t/TAG]` | `editexp 2 d/Eyelash Curler`"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Delete**     | `deleteexp INDEX`                                                | `deleteexp 3`"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Find**       | `[d/DESCRIPTION]* [dt/DATE]* [f/IS_FIXED]* [t/TAG]*`             | `findexp dt/08-09-2020`"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Sort**       | `sortexp ORDER`                                                  | `sortexp desc`"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**List**       | `listexp`                                                        | "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Clear**      | `clearexp`                                                       | "
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "|**Breakdown**  | `breakdownexp`                                                   | "
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "### Others"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "--------|--------|----------"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "**Help** | `help [COMMAND]` | `help`"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "**Exit** | `exit` | "
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khoongwk": 268,
      "hansebastian": 208,
      "yanlynnnnn": 221,
      "galvinleow": 269,
      "-": 111
    }
  },
  {
    "path": "docs/team/galvinleow.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "title: Galvin\u0027s Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Project: GrAB3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Are you an independent home-based beauty salon owner, scrambling between your calendar, client contacts,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "and notebook to keep track of all your appointments, revenue and expenses? "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Do you spend hours tabulating all your revenue and expenses just to get an idea of how your business is doing? "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Fret not, our application, GrAB3, will reduce the hassle of managing your business and saves your valuable time. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "such as their appointments, revenue and expenses - into a single application. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "The application uses a Command Line Interface (CLI)..."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "This portfolio aims to document the contributions that I have made to the GrAB3 project. In this project, our team - GrAB3,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "will enhance a basic CLI Address Book 3 (AB3) and repurpose it to create our application: GrAB3."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Summary of contributions"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 19
    }
  },
  {
    "path": "docs/team/hansebastian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "title: Hans Sebastian Tirtaputra\u0027s Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## Project: GrAB3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Are you an independent home-based beauty salon owner, scrambling between your calendar, client contacts,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "and notebook to keep track of all your appointments, revenue and expenses? "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Do you spend hours tabulating all your revenue and expenses just to get an idea of how your business is doing? "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Fret not, our application, GrAB3, will reduce the hassle of managing your business and saves your valuable time. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "such as their appointments, revenue and expenses - into a single application. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "The application uses a Command Line Interface (CLI)..."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "This portfolio aims to document the contributions that I have made to the GrAB3 project. In this project, our team - GrAB3,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "will enhance a basic CLI Address Book 3 (AB3) and repurpose it to create our application: GrAB3."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "## Summary of contributions"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 12,
      "yanlynnnnn": 7
    }
  },
  {
    "path": "docs/team/khoongwk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "title: Wei Kit Khoong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## Project: GrAB3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Are you an independent home-based beauty salon owner, scrambling between your calendar, client contacts,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "and notebook to keep track of all your appointments, revenue and expenses? "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Do you spend hours tabulating all your revenue and expenses just to get an idea of how your business is doing? "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Fret not, our application, GrAB3, will reduce the hassle of managing your business and saves your valuable time. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "such as their appointments, revenue and expenses - into a single application. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "The application uses a Command Line Interface (CLI)..."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "This portfolio aims to document the contributions that I have made to the GrAB3 project. In this project, our team - GrAB3,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "will enhance a basic CLI Address Book 3 (AB3) and repurpose it to create our application: GrAB3."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "## Summary of contributions"
      }
    ],
    "authorContributionMap": {
      "khoongwk": 12,
      "yanlynnnnn": 7
    }
  },
  {
    "path": "docs/team/ruifengg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "title: Chang Rui Feng\u0027s Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "## Project: GrAB3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Are you an independent home-based beauty salon owner, scrambling between your calendar, client contacts,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "and notebook to keep track of all your appointments, revenue and expenses? "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Do you spend hours tabulating all your revenue and expenses just to get an idea of how your business is doing? "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Fret not, our application, GrAB3, will reduce the hassle of managing your business and saves your valuable time. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "such as their appointments, revenue and expenses - into a single application. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "The application uses a Command Line Interface (CLI)..."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "This portfolio aims to document the contributions that I have made to the GrAB3 project. In this project, our team - GrAB3,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "will enhance a basic CLI Address Book 3 (AB3) and repurpose it to create our application: GrAB3."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "## Summary of contributions"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 12,
      "yanlynnnnn": 7
    }
  },
  {
    "path": "docs/team/yanlynnnnn.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "title: Tan Yan Lyn\u0027s Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Project: GrAB3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Are you an independent home-based beauty salon owner, scrambling between your calendar, client contacts,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "and notebook to keep track of all your appointments, revenue and expenses? "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Do you spend hours tabulating all your revenue and expenses just to get an idea of how your business is doing? "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "Fret not, our application, GrAB3, will reduce the hassle of managing your business and saves your valuable time. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "GrAB3 is an all-in-one application that helps home-based beauty salon owners consolidate their business details - "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "such as their appointments, revenue and expenses - into a single application. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "The application uses a Command Line Interface (CLI)..."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "This portfolio aims to document the contributions that I have made to the GrAB3 project. In this project, our team - GrAB3,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "will enhance a basic CLI Address Book 3 (AB3) and repurpose it to create our application: GrAB3."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "## Summary of contributions"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 7,
      "galvinleow": 12
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Changes the remark of an existing client in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the client identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            + \"by the index number used in the last client listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @param index of the client in the filtered client list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @param remark of the client to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of client data. We achieve that by working with the `Client` model. Each field in a Client is implemented as a separate class (e.g. a `Name` object represents the client’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a client."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Create a new `Remark` in `seedu.address.model.client`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each client."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Simply add the following to [`seedu.address.ui.ClientCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**`ClientCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Then insert the following into [`main/resources/view/ClientListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**`ClientListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "## Modify `Client` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Since `ClientCard` displays data from a `Client`, we need to update `Client` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Modify `Client`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "We change the constructor of `Client` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "### Update other usages of `Client`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Unfortunately, a change to `Client` will cause other commands to break, you will have to modify these commands to use the updated `Client`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Client` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedClient` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedClient` to work with our new `Client`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Now that we have finalized the `Client` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**`ClientCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    remark.setText(client.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Client`. Since all fields in a `Client` are immutable, we create a new instance of a `Client` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "save it with `Model#setClient()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Client: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Client: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_Client_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedClient \u003d new Client(clientToEdit.getName(), clientToEdit.getPhone(), clientToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                clientToEdit.getAddress(), remark, clientToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_ClientS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedClient));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * {@code clientToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private String generateSuccessMessage(Client clientToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return String.format(message, clientToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 39,
      "-": 355
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Client` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Client`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "The `address` field in `Client` is actually an instance of the `seedu.address.model.client.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditClientDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Let’s try removing references to `Address` in `EditClientDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1. Safe delete the field `address` in `EditClientDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Client` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `ClientCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "A quick look at the `ClientCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**`ClientCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**`ClientCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "**`invalidClientAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    \"name\": \"Client with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 14,
      "-": 89
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditClientDescriptor`. Recall that we can verify the contents of `editClientDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "       clients.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "           source.getClientList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                 .map(JsonAdaptedClient::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "1. It appears that a `JsonAdaptedClient` is created for each `Client` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    5.  Add a new field to `Client`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 13,
      "-": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.ExpenseStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.JsonExpenseStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.JsonServiceStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.ServiceStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceStorage serviceStorage \u003d new JsonServiceStorage(userPrefs.getServiceStorageFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseStorage expenseStorage \u003d new JsonExpenseStorage(userPrefs.getExpenseStorageFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, serviceStorage, expenseStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ReadOnlyServiceManager serviceManager \u003d initServiceManager(storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ReadOnlyExpenseTracker expenseTracker \u003d initExpenseTracker(storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new ModelManager(initialData, userPrefs, serviceManager, expenseTracker);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns a {@code ReadOnlyServiceManager} with the data from {@code storage}\u0027s services."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The data from the sample services will be used instead if {@code storage}\u0027s service manager is not found,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * or an empty service manager will be used instead if errors occur when reading {@code storage}\u0027s service manager."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ReadOnlyServiceManager initServiceManager(Storage storage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ReadOnlyServiceManager serviceManager;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Optional\u003cReadOnlyServiceManager\u003e serviceManagerOptional \u003d storage.readServiceManager();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            serviceManagerOptional \u003d storage.readServiceManager();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (!serviceManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ServiceManager\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            serviceManager \u003d serviceManagerOptional.orElseGet(SampleDataUtil::getSampleServiceManager);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ServiceManager\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            serviceManager \u003d new ServiceManager();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ServiceManager\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            serviceManager \u003d new ServiceManager();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceManager;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns a {@code ReadOnlyExpenseTracker} with the data from {@code storage}\u0027s services."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * The data from the sample expenses will be used instead if {@code storage}\u0027s expenses tracker is not found,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * or an empty expense tracker will be used instead if errors occur when reading {@code storage}\u0027s expense tracker."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private ReadOnlyExpenseTracker initExpenseTracker(Storage storage) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ReadOnlyExpenseTracker expenseTracker;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            Optional\u003cReadOnlyExpenseTracker\u003e expenseTrackerOptional \u003d storage.readExpenseTracker();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            expenseTrackerOptional \u003d storage.readExpenseTracker();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            if (!expenseTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExpenseTracker\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            expenseTracker \u003d expenseTrackerOptional.orElseGet(SampleDataUtil::getSampleExpenseTracker);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenseTracker\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            expenseTracker \u003d new ExpenseTracker();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseTracker\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            expenseTracker \u003d new ExpenseTracker();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expenseTracker;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 31,
      "yanlynnnnn": 33,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 2,
      "yanlynnnnn": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of clients */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of services */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    ObservableList\u003cService\u003e getFilteredServiceList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 3,
      "hansebastian": 4,
      "yanlynnnnn": 3,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            storage.saveServiceManager(model.getServiceManager());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            storage.saveExpenseTracker(model.getExpenseTracker());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return model.getFilteredClientList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override public ObservableList\u003cService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return model.getFilteredServiceList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 3,
      "hansebastian": 6,
      "yanlynnnnn": 5,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Adds a client to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public AddCommand(Client client) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 13,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Deletes a client identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Edits the details of an existing client in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @param index of the client in the filtered client list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @param editClientDescriptor details to edit the client with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditCommand(Index index, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(editClientDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * edited with {@code editClientDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new Client(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Stores the details to edit the client with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * corresponding field value of the client."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 44,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Finds and lists all clients in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Lists all clients in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/AddExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISFIXED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Adds an expense to GrAB3."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addexp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to GrAB3. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_ISFIXED + \"IS_FIXED \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_AMOUNT + \"VALUE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Conditioner \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_ISFIXED + \"f \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_AMOUNT + \"15.00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_DATE + \"29-01-2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_TAG + \"hairsupplies \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 1,
      "yanlynnnnn": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/ClearExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Clears the expense list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class ClearExpenseCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearexp\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense List has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.setExpenses(new ArrayList\u003cExpense\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/DeleteExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from GrAB3."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteexp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public DeleteExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof seedu.address.logic.commands.expense.DeleteExpenseCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((seedu.address.logic.commands.expense.DeleteExpenseCommand)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/EditExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISFIXED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.IsFixed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Edits the details of an existing expense in GrAB3."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class EditExpenseCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editexp\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"[\" + PREFIX_ISFIXED + \"IS_FIXED] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"VALUE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_ISFIXED + \"t \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_AMOUNT + \"20.00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @param index                 of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public EditExpenseCommand(Index index, EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseCommand.EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (expenseToEdit.equals(editedExpense)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                                               EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        IsFixed updatedIsFixed \u003d editExpenseDescriptor.getIsFixed().orElse(expenseToEdit.getIsFixed());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Amount updatedValue \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getValue());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Tag updatedTag \u003d editExpenseDescriptor.getTag().orElse(expenseToEdit.getTag());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new Expense(updatedDescription, updatedIsFixed, updatedValue, updatedDate, updatedTag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        private IsFixed isFixed;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        private Amount value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public EditExpenseDescriptor() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseCommand.EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            setIsFixed(toCopy.isFixed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            setAmount(toCopy.value);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, isFixed, value, date, tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setIsFixed(IsFixed isFixed) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            this.isFixed \u003d isFixed;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public Optional\u003cIsFixed\u003e getIsFixed() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return Optional.ofNullable(isFixed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setAmount(Amount value) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return Optional.ofNullable(value);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            this.tag \u003d (tag !\u003d null) ? tag : null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return (tag !\u003d null) ? Optional.ofNullable(tag) : Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            if (!(other instanceof EditExpenseCommand.EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            EditExpenseCommand.EditExpenseDescriptor e \u003d (EditExpenseCommand.EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    \u0026\u0026 getIsFixed().equals(e.getIsFixed())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/FindExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Finds and lists all clients in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class FindExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findexp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all expenses by either their\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"description, date, is fixed, or tag, and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Conditioner \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Predicate\u003cExpense\u003e predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public FindExpenseCommand(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof FindExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindExpenseCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/ListExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Lists all expenses in GrAB3 to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class ListExpenseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listexp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/service/AddServiceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.logic.commands.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.ServiceCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Adds a service to SuperSalon."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class AddServiceCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addsvc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a service to the list of services \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + PREFIX_SERVICE_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + PREFIX_SERVICE_DURATION + \" DURATION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + PREFIX_SERVICE_PRICE + \" PRICE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + \" Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + PREFIX_SERVICE_TITLE + \"Lash Lift\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + PREFIX_SERVICE_DURATION + \"0.5 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + PREFIX_SERVICE_PRICE + \"38 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"New Service added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Service toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a Service object as an attribute for the AddServiceCommand object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param toAdd is the Service to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public AddServiceCommand(Service toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Generate unique ServiceCode for the Service before adding it to model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        List\u003cService\u003e lastShownList \u003d model.getFilteredServiceList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String serviceCode \u003d ServiceCode.generateNewServiceCode(lastShownList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        toAdd.addSerivceCode(serviceCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        model.addService(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client client \u003d new Client(name, phone, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new AddCommand(client);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 9,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.ClearExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.commands.service.AddServiceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.expense.AddExpenseCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.expense.DeleteExpenseCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.expense.EditExpenseCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.expense.FindExpenseCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.service.AddServiceCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new EditExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        case FindExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new FindExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        case DeleteExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new DeleteExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        case ListExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new ListExpenseCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        case ClearExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new ClearExpenseCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case AddServiceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new AddServiceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 5,
      "yanlynnnnn": 29,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final Prefix PREFIX_ISFIXED \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /* Prefixes for Service commands */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Prefix PREFIX_SERVICE_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Prefix PREFIX_SERVICE_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Prefix PREFIX_SERVICE_DURATION \u003d new Prefix(\"du/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Prefix PREFIX_SERVICE_SERVICE_CODE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 5,
      "yanlynnnnn": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor editClientDescriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new EditCommand(index, editClientDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 10,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.IsFixed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_FORMAT \u003d \"Day should contain only the first 3 letters of the day.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration should be a number in hours.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses {@code String isFixed} into a {@code IsFixed}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static IsFixed parseIsFixed(String isFixed) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(isFixed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!IsFixed.isValidIsFixed(isFixed)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(IsFixed.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new IsFixed(isFixed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Parses a {@code String title} into an {@code Title}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Parses a {@code String Amount} into a {@code {Amount}}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        amount \u003d amount.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Double doubleAmount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (!Amount.isValidAmount(doubleAmount)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new Amount(doubleAmount);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Parses a {@code String Duration} into a {@code {Duration}}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        duration \u003d duration.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Double doubleDuration \u003d Double.parseDouble(duration);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (!Duration.isValidDuration(doubleDuration)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new Duration(doubleDuration);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "hansebastian": 57,
      "yanlynnnnn": 43,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expense/AddExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.parser.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISFIXED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.IsFixed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_ISFIXED, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                        PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_ISFIXED, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        IsFixed isFixed \u003d ParserUtil.parseIsFixed(argMultimap.getValue(PREFIX_ISFIXED).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Amount value \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Expense expense \u003d new Expense(description, isFixed, value, date, tag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expense/DeleteExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.parser.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Parses input arguments and creates a new DeleteExpenseCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class DeleteExpenseCommandParser implements Parser\u003cDeleteExpenseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteExpenseCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * and returns a DeleteExpenseCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public DeleteExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return new DeleteExpenseCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expense/EditExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.parser.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISFIXED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Parses input arguments and creates a new EditExpenseCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class EditExpenseCommandParser implements Parser\u003cEditExpenseCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * the EditExpenseCommand and returns an EditExpenseCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public EditExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_ISFIXED,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                        PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    EditExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            editExpenseDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ISFIXED).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            editExpenseDescriptor.setIsFixed(ParserUtil.parseIsFixed(argMultimap.getValue(PREFIX_ISFIXED).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            editExpenseDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new EditExpenseCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expense/FindExpenseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.logic.parser.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ISFIXED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.DatePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.DescriptionPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.IsFixedPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.TagPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Parses input arguments and creates a new FindExpenseCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class FindExpenseCommandParser implements Parser\u003cFindExpenseCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MULTIPLE_PARAMETERS \u003d \"Please only input one parameter.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final int NUM_ALLOWED_PARAMETERS \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindExpenseCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * and returns a FindExpenseCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public FindExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        // Find better way to check if there is more than one parameter input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_ISFIXED, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (areMultipleParametersPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_ISFIXED, PREFIX_DATE, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ParseException(MULTIPLE_PARAMETERS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Predicate\u003cExpense\u003e predicate \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            predicate \u003d new DescriptionPredicate(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ISFIXED).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            predicate \u003d new IsFixedPredicate(ParserUtil.parseIsFixed(argMultimap.getValue(PREFIX_ISFIXED)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            predicate \u003d new DatePredicate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            predicate \u003d new TagPredicate(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new FindExpenseCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns true if there is more than one input parameters."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private static boolean areMultipleParametersPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return Stream.of(prefixes).filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            \u003e NUM_ALLOWED_PARAMETERS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/service/AddServiceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.logic.parser.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICE_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.commands.service.AddServiceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Parses input arguments and creates a new AddServiceCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class AddServiceCommandParser implements Parser\u003cAddServiceCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of AddServiceCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * and returns an AddServiceCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param args is the user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return an AddServiceCommand for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws ParseException if the user input does not abide by the expected format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public AddServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SERVICE_TITLE, PREFIX_SERVICE_DURATION, PREFIX_SERVICE_PRICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SERVICE_TITLE, PREFIX_SERVICE_DURATION, PREFIX_SERVICE_PRICE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddServiceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_SERVICE_TITLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_SERVICE_DURATION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Amount price \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_SERVICE_PRICE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Service service \u003d new Service(title, duration, price);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new AddServiceCommand(service);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.UniqueClientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Duplicates are not allowed (by .isSameClient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final UniqueClientList clients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clients \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Creates an AddressBook using the Clients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Replaces the contents of the client list with {@code clients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.clients.setClients(clients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    //// client-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Adds a client to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void addClient(Client p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clients.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Replaces the given client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clients.setClient(target, editedClient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return clients.asUnmodifiableObservableList().size() + \" clients\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 clients.equals(((AddressBook) other).clients));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return clients.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 29,
      "yanlynnnnn": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Days.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Represents the day of the week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public enum Days {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    MON, TUE, WED, THU, FRI, SAT, SUN"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    Predicate\u003cService\u003e PREDICATE_SHOW_ALL_SERVICES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Deletes the given client."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client must exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    void deleteClient(Client target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Adds the given client."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * {@code client} must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Replaces the given client {@code target} with {@code editedClient}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered client list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Updates the filter of the filtered client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * The expense must exist in GrAB3."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * {@code target} must exist in the GrAB3."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    void setExpenses(List\u003cExpense\u003e expenses);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    ReadOnlyExpenseTracker getExpenseTracker();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ServiceManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds the given service."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    void addService(Service toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    void updateFilteredServiceList(Predicate\u003cService\u003e predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    ObservableList\u003cService\u003e getFilteredServiceList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    ReadOnlyServiceManager getServiceManager();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 17,
      "hansebastian": 18,
      "yanlynnnnn": 38,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final ServiceManager serviceManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final ExpenseTracker expenseTracker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final FilteredList\u003cService\u003e filteredServices;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                        ReadOnlyServiceManager serviceManager, ReadOnlyExpenseTracker expenseTracker) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, serviceManager, expenseTracker);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        logger.fine(\"Initializing with SuperSalon: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.serviceManager \u003d new ServiceManager(serviceManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.expenseTracker \u003d new ExpenseTracker(expenseTracker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.expenseTracker.getExpenseList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        filteredServices \u003d new FilteredList\u003c\u003e(this.serviceManager.getServiceList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new ServiceManager(), new ExpenseTracker());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return addressBook.hasClient(client);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        addressBook.removeClient(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        addressBook.setClient(target, editedClient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenseTracker.removeExpense(target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenseTracker.addExpense(expense);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenseTracker.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenseTracker.setExpenses(expenses);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of Expenses"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ReadOnlyExpenseTracker getExpenseTracker() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return this.expenseTracker;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 filteredClients.equals(other.filteredClients);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ServiceManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void addService(Service toAdd) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        serviceManager.addService(toAdd);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        updateFilteredServiceList(PREDICATE_SHOW_ALL_SERVICES);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void updateFilteredServiceList(Predicate\u003cService\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        filteredServices.setPredicate(predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ObservableList\u003cService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return filteredServices;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ReadOnlyServiceManager getServiceManager() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.serviceManager;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 15,
      "hansebastian": 38,
      "yanlynnnnn": 40,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns an unmodifiable view of the clients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * This list will not contain any duplicate clients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Path serviceStorageFilePath \u003d Paths.get(\"data\" , \"services.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Path expenseStorageFilePath \u003d Paths.get(\"data\" , \"expenses.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Path getServiceStorageFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceStorageFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Path getExpenseStorageFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expenseStorageFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 6,
      "yanlynnnnn": 5,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * Represents an Appointment in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoongwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private final Client client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private final Service service;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private final Date appointmentDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private final Time timeOfDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * Constructor for an Appointment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public Appointment(Client client, Service service, Date appointmentDate, Time timeOfDay) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        requireAllNonNull(client, service, appointmentDate, timeOfDay);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        this.appointmentDate \u003d appointmentDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        this.timeOfDay \u003d timeOfDay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public Service getService() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return service;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public Date getAppointmentDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return appointmentDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public Time getAppointmentTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return timeOfDay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public boolean isAppointmentDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * Returns true if both appointments of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * This defines a weaker notion of equality between two clients."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public boolean isSameAppointment(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        if (otherAppointment \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return otherAppointment !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getClient().equals(getClient())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getService().equals(getService())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentDate().equals(getAppointmentDate())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentTime().equals(getAppointmentTime())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 (otherAppointment.isAppointmentDone() \u003d\u003d isAppointmentDone());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * This defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return otherAppointment.getClient().equals(getClient())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getService().equals(getService())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentDate().equals(getAppointmentDate())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentTime().equals(getAppointmentTime())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 (otherAppointment.isAppointmentDone() \u003d\u003d isAppointmentDone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return Objects.hash(client, service, appointmentDate, timeOfDay, isDone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        builder.append(getAppointmentDate())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(getAppointmentTime())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(\" Client: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(getClient())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(\" Service \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(getService())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(\" Done? \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                .append(isAppointmentDone() ? \"Yes\" : \"No\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "khoongwk": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time entered must be in the format of \u003cHH:mm\u003e,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            + \" where HH is the 24-hour clock timing.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    // TODO Need to test if these formatters are correct."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private static final DateTimeFormatter FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    private static final DateTimeFormatter FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    protected final LocalTime time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * Represents the date stored for any model object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * @param timeString The input time by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public Time(String timeString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        checkArgument(isValidTime(timeString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        this.time \u003d LocalTime.parse(timeString, FORMAT_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * Returns true if a given string is a valid Time format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            LocalTime.parse(test, FORMAT_INPUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "                \u0026\u0026 time.equals(((Time) other).time)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoongwk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "        return time.format(FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "khoongwk": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Represents a Client in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if both clients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * This defines a weaker notion of equality between two clients."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean isSameClient(Client otherClient) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return otherClient !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 (otherClient.getPhone().equals(getPhone()) || otherClient.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if both clients have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * This defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 otherClient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 22,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Represents a Client\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Represents a Client\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Represents a Client\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/UniqueClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * A list of clients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * clients uses Client#isSameClient(Client) for equality so as to ensure that the client being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * unique in terms of identity in the UniqueClientList. However, the removal of a client uses Client#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * @see Client#isSameClient(Client)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class UniqueClientList implements Iterable\u003cClient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if the list contains an equivalent client as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean contains(Client toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Adds a client to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void add(Client toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Replaces the client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        internalList.set(index, editedClient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Removes the equivalent client from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * The client must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void remove(Client toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients(UniqueClientList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Replaces the contents of this list with {@code clients}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!clientsAreUnique(clients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        internalList.setAll(clients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public Iterator\u003cClient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                || (other instanceof UniqueClientList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if {@code clients} contains only unique clients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private boolean clientsAreUnique(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                if (clients.get(i).isSameClient(clients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ClientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Signals that the operation will result in duplicate Clients (Clients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class DuplicateClientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        super(\"Operation would result in duplicate clients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/DatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Date} matches the given date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class DatePredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public DatePredicate(Date date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return date.equals(expense.getDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof DatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 date.equals(((DatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/DescriptionPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Description} matches the given description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class DescriptionPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public DescriptionPredicate(Description description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return description.equals(expense.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof DescriptionPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 description.equals(((DescriptionPredicate) other).description)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private IsFixed isFixed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Amount value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Expense(Description description, IsFixed isFixed, Amount value, Date date, Tag tag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.isFixed \u003d isFixed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public IsFixed getIsFixed() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return isFixed;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Amount getValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns true if both expenses have the same identity fields."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 (otherExpense.getIsFixed().equals(getIsFixed()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherExpense.getIsFixed().equals(getIsFixed())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherExpense.getValue().equals(getValue())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherExpense.getTag().equals(getTag());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return Objects.hash(description, isFixed, value, date, tag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(\"\\n Is Fixed: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getIsFixed())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(\" Value: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getValue())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(\" Tag: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "yanlynnnnn": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/IsFixed.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class IsFixed {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IsFixed must be in \u0027t\u0027 or \u0027f\u0027 format.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public final boolean value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Represents whether the expense is fixed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @param isFixed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public IsFixed(String isFixed) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(isFixed);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        AppUtil.checkArgument(isValidIsFixed(isFixed), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        value \u003d (isFixed.equals(\"t\")) ? true : false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static boolean isValidIsFixed(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return (test.equals(\"t\") || test.equals(\"f\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return value ? \"True\" : \"False\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/IsFixedPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code IsFixed} matches the given isFixed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class IsFixedPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final IsFixed isFixed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public IsFixedPredicate(IsFixed isFixed) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.isFixed \u003d isFixed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return isFixed.equals(expense.getIsFixed());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof IsFixedPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 isFixed.equals(((IsFixedPredicate) other).isFixed)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/TagPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Tag} matches the given tag."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class TagPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public TagPredicate(Tag tag) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return tag.equals(expense.getTag());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof TagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 tag.equals(((TagPredicate) other).tag)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/manager/ExpenseTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.nonuniquelist.NonUniqueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class ExpenseTracker implements ReadOnlyExpenseTracker {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final NonUniqueList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ExpenseTracker() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.expenses \u003d new NonUniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Creates an ExpenseTracker using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ExpenseTracker(ReadOnlyExpenseTracker toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.expenses \u003d new NonUniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.expenses.setItems(expenses);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Resets the existing data of this {@code ExpenseTracker} with {@code newData}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void resetData(ReadOnlyExpenseTracker newData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Adds an expense to the SuperSalon."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void addExpense(Expense e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenses.add(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Replaces the given service {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * {@code target} must exist in the SuperSalon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenses.setItem(target, editedExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Removes {@code key} from this {@code ExpenseTracker}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * {@code key} must exist in the SuperSalon."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return \"Expense Tracker:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                + expenses.stream().map(Expense::toString).collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                + \"\\n Total number of expenses: \" + expenses.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof ExpenseTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 expenses.equals(((ExpenseTracker) other).expenses));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return Objects.hash(expenses);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/manager/ReadOnlyExpenseTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public interface ReadOnlyExpenseTracker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/manager/ReadOnlyServiceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public interface ReadOnlyServiceManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns an unmodifiable view of the services list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * This list will not contain any duplicate services."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    ObservableList\u003cService\u003e getServiceList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/manager/ServiceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.manager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Wraps all data at the ServiceManager level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ServiceManager implements ReadOnlyServiceManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final UniqueList\u003cService\u003e services;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.services \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates an ServiceManager using the Services in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceManager(ReadOnlyServiceManager toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.services \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Replaces the contents of the service list with {@code services}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code services} must not contain duplicate services."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void setServices(List\u003cService\u003e services) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.services.setItems(services);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Resets the existing data of this {@code ServiceManager} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void resetData(ReadOnlyServiceManager newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        setServices(newData.getServiceList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    //// service-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if a service with the same identity as {@code service} exists in the SuperSalon."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean hasService(Service service) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(service);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return services.contains(service);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a service to the SuperSalon."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The service must not already exist in SuperSalon."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void addService(Service p) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        services.add(p);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Replaces the given service {@code target} in the list with {@code editedService}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code target} must exist in the SuperSalon."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The service identity of {@code editedService} must not be the same as another existing service in the SuperSalon."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void setService(Service target, Service editedService) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(editedService);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        services.setItem(target, editedService);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Removes {@code key} from this {@code ServiceManager}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code key} must exist in the SuperSalon."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void removeService(Service key) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        services.remove(key);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"Service Manager:\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + services.stream().map(Service::toString).collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"\\n Total number of activities: \" + services.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ObservableList\u003cService\u003e getServiceList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return services.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                || (other instanceof ServiceManager // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 services.equals(((ServiceManager) other).services));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return Objects.hash(services);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/revenue/Revenue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.revenue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Revenue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Service service;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    //Data field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Amount value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Revenue(Service service, Date date, Amount value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Service getService() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return service;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Amount getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns true if both revenues have the same identity fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * This defines a weaker notion of equality between two revenues."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean isSameRevenue(Revenue otherRevenue) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (otherRevenue \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return otherRevenue !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherRevenue.getService().equals(getService())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 (otherRevenue.getDate().equals(getDate()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns true if both revenues have the same identity and data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * This defines a stronger notion of equality between two revenues."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!(other instanceof Revenue)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Revenue otherRevenue \u003d (Revenue) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return otherRevenue.getService().equals(getService())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherRevenue.getDate().equals(getDate())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 otherRevenue.getValue().equals(getValue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return Objects.hash(service, date, value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        builder.append(\"Service: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getService())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(\" Value: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                .append(getValue());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "yanlynnnnn": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/service/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Duration (in half hours intervals - 0.5) must be a valid double \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + \"more than 0.5 and at most 24.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final double MAX_VALUE \u003d 24.0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final double MIN_VALUE \u003d 0.5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Predicate\u003cDouble\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e\u003d MIN_VALUE \u0026\u0026 i \u003c\u003d MAX_VALUE \u0026\u0026 i % 0.5 \u003d\u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public final Double value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The time taken for a Service to be completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param duration is a double value representing the amount of hours it takes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Duration(Double duration) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        AppUtil.checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        value \u003d duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if a given string is a valid duration."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static boolean isValidDuration(Double test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return VALIDATION_PREDICATE.test(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 value.equals(((Duration) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "hansebastian": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/service/Service.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueListItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Service implements UniqueListItem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** The name of the service */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Amount of money in dollars that this Service brings in */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Amount price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Unique identification number for each Service */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ServiceCode serviceCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** How long the service takes */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * Constructor for Service."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param title The title of the service."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     * @param duration The duration of the service."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param price The price of the service."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoongwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Service(Title title, Duration duration, Amount price) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceCode getServiceCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if both services have the same ServiceCode."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Used for comparison of Service objects in a HashSet when generating a new ServiceCode."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Service otherService \u003d (Service) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return otherService.getServiceCode().equals(getServiceCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return Objects.hash(serviceCode.value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .append(getDuration())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .append(\" Service Code: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .append(getServiceCode().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Checks if both services being compared have the same attributes."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param other the second service being compared."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return true if both services have the same attributes."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean isSame(UniqueListItem other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!(other instanceof Service)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Service otherService \u003d (Service) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return title.equals(otherService.title)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 duration.equals(otherService.duration)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 price.equals(otherService.price)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 serviceCode.equals(otherService.serviceCode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Sets a unique ServiceCode for the Service."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param inputCode is the service code to be set for the Service."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Service addSerivceCode(String inputCode) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.serviceCode \u003d new ServiceCode(inputCode);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 3,
      "khoongwk": 4,
      "hansebastian": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/service/ServiceCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.exceptions.MaximumServiceException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A unique identification code for each Service object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ServiceCode {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"ServiceCode needs to be in the range of SC000-SC999\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String LEADING_ZEROES_REGEX \u003d \"^0+(?!$)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Predicate\u003cServiceCode\u003e VALIDATION_PREDICATE \u003d i -\u003e i.value.substring(0, 2).equals(\"SC\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        \u0026\u0026 i.value.length() \u003d\u003d 5 \u0026\u0026 getIntFromServiceCode(i) \u003c 1000 \u0026\u0026 getIntFromServiceCode(i) \u003e\u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** String representing a unique identification number for each Service object */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceCode(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a new unique identification code for a Service to use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a unique identification code for a Service object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static String generateNewServiceCode(List\u003cService\u003e serviceList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Set\u003cService\u003e set \u003d new HashSet\u003c\u003e(serviceList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String serviceCode \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (int codeNum \u003d 0; codeNum \u003c 1000; codeNum++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String potentialServiceCode \u003d \"SC\" + \"0\".repeat(3 - String.valueOf(codeNum).length())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + String.valueOf(codeNum);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            // .equals for two services return true as long as value of ServiceCode is the same"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (!set.contains(new Service(new Title(\"Test\"), new Duration(0.5), new Amount(0.5))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                .addSerivceCode(potentialServiceCode))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                serviceCode \u003d potentialServiceCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (serviceCode.equals(\"\")) { // No suitable service code found from codeNum 0 - 999"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new MaximumServiceException(\"You have reached the maximum number of services that you can add\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \"for SuperSalon\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static boolean isValidServiceCode(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return VALIDATION_PREDICATE.test(new ServiceCode(test));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Extracts the integer value of the identification code from ServiceCode."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param serviceCode is the ServiceCode object storing the unique identification code of a Service object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return an integer representing the unique identification number."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static int getIntFromServiceCode(ServiceCode serviceCode) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return Integer.valueOf(serviceCode.value.substring(2).replaceFirst(LEADING_ZEROES_REGEX, \"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            || (other instanceof ServiceCode// instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            \u0026\u0026 value.equals(((ServiceCode) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "hansebastian": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/service/exceptions/MaximumServiceException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.service.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Indicates that SuperSalon has reached the maximum number of Services that it can store - 1000."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class MaximumServiceException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public MaximumServiceException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.IsFixed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new Client[]{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static Service[] getSampleServices() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return new Service[]{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            new Service(new Title(\"Lash Lift\"), new Duration(0.5), new Amount(38.0)).addSerivceCode(\"SC000\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            new Service(new Title(\"Nail Extension\"), new Duration(0.5), new Amount(28.9)).addSerivceCode(\"SC001\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            new Service(new Title(\"Pedicure\"), new Duration(0.5), new Amount(18.5)).addSerivceCode(\"SC003\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            new Service(new Title(\"Hair Treatment\"), new Duration(1.5), new Amount(88.9)).addSerivceCode(\"SC007\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            new Service(new Title(\"Manicure\"), new Duration(1.0), new Amount(21.5)).addSerivceCode(\"SC005\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return new Expense[]{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new Expense(new Description(\"Conditioner\"), new IsFixed(\"f\"), new Amount(15.0),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    new Date(\"10-10-2020\"), new Tag(\"HairSupplies\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new Expense(new Description(\"Lash Tint\"), new IsFixed(\"f\"), new Amount(20.0),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    new Date(\"10-12-2020\"), new Tag(\"LashSupplies\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new Expense(new Description(\"Nail Polish\"), new IsFixed(\"f\"), new Amount(10.0),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    new Date(\"09-12-2020\"), new Tag(\"NailSupplies\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new Expense(new Description(\"Chair\"), new IsFixed(\"t\"), new Amount(25.0),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    new Date(\"10-10-2020\"), new Tag(\"Equipment\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new Expense(new Description(\"Lash Extension Glue\"), new IsFixed(\"f\"), new Amount(45.0),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    new Date(\"01-12-2020\"), new Tag(\"LashSupplies\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static ReadOnlyServiceManager getSampleServiceManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceManager sampleServiceManager \u003d new ServiceManager();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (Service sampleService : getSampleServices()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            sampleServiceManager.addService(sampleService);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return sampleServiceManager;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static ReadOnlyExpenseTracker getSampleExpenseTracker() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseTracker sampleExpenseTracker \u003d new ExpenseTracker();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            sampleExpenseTracker.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return sampleExpenseTracker;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 15,
      "hansebastian": 24,
      "yanlynnnnn": 29,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * The price of a service provided by SuperSalon."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount (in dollars and cents - eg: 15.00) \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + \"must be a valid double greater than 0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final double MIN_VALUE \u003d 0.0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final double MAX_VALUE \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final Predicate\u003cDouble\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e MIN_VALUE \u0026\u0026 i \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Representing money in Singapore Dollars */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public final BigDecimal value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The cost of a Service in Singapore Dollars."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param amount double value input representing dollars and cents."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        AppUtil.checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        value \u003d new BigDecimal(amount).setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if a given amount value is a valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static boolean isValidAmount(Double test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return VALIDATION_PREDICATE.test(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Gives a string representation of the amount, in Singapore Dollars."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a string representing the amount of Singapore Dollars the amount is."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return value.setScale(2, RoundingMode.HALF_UP).toString(); // Two decimal places"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                || (other instanceof Amount// instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 value.equals(((Amount) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 35,
      "hansebastian": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date entered must be in the format of \u003cdd-MM-yyyy\u003e.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final DateTimeFormatter FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final DateTimeFormatter FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    protected final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Represents the date stored for any model object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @param dateString"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public Date(String dateString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.date \u003d LocalDate.parse(dateString, FORMAT_INPUT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns true if a given string is a valid Date format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            LocalDate.parse(test, FORMAT_INPUT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return date.format(FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description should not be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Represents the description of any model object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return (test.trim().equals(\"\")) ? false : true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Represents an Title for any model object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Title must be made up of alphanumeric words that is not more than\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            + \" 50 characters long.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Check for 50 alphanumeric characters */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$)[\\\\p{Alnum}\\\\s]{1,50}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param title a valid title."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static boolean isValidTitle(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return input.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/nonuniquelist/NonUniqueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.util.nonuniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class NonUniqueList\u003cT\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Adds an item to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedExpense} or {@code editedRevenue}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setItems(NonUniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                || (other instanceof NonUniqueList // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                \u0026\u0026 internalList.equals(((NonUniqueList) other).internalList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Stream\u003cT\u003e stream() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/nonuniquelist/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.model.util.nonuniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/UniqueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.util.uniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A list that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A client is considered unique by comparing using {@code T#isSame(T)}. As such, adding and updating of items in the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * list uses T#isSame(T) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * unique in terms of identity in the UniqueList. However, the removal of an item uses T#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class UniqueList\u003cT extends UniqueListItem\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds an item to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The item identity of {@code edited} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void setItem(T target, T edited) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!target.isSame(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void setItems(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                || (other instanceof UniqueList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                if (items.get(i).isSame(items.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Gets number of items in the UniqueList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return size of the UniqueList."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Gets a stream of all the items in the UniqueList."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return stream of all items in the UniqueList."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Stream\u003cT\u003e stream() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return internalList.stream();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/UniqueListItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.util.uniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * API of an item in a UniqueList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public interface UniqueListItem {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    boolean isSame(UniqueListItem other);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.util.uniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Signals that the operation will result in duplicate items(items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.model.util.uniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 6,
      "yanlynnnnn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Constructs a {@code JsonAdaptedClient} with the given client details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Converts a given {@code Client} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Converts this Jackson-friendly adapted client object into the model\u0027s {@code Client} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted client."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            clientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new Client(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 20,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given clients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : clients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            if (addressBook.hasClient(client)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            addressBook.addClient(client);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.ExpenseStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.ServiceStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ServiceStorage, ExpenseStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 1,
      "yanlynnnnn": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.ExpenseStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.ServiceStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ServiceStorage serviceStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private ExpenseStorage expenseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                          ServiceStorage serviceStorage, ExpenseStorage expenseStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.serviceStorage \u003d serviceStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.expenseStorage \u003d expenseStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ServiceManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Path getServiceManagerStorageFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceStorage.getServiceManagerStorageFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Optional\u003cReadOnlyServiceManager\u003e readServiceManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return readServiceManager(serviceStorage.getServiceManagerStorageFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Optional\u003cReadOnlyServiceManager\u003e readServiceManager(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceStorage.readServiceManager(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void saveServiceManager(ReadOnlyServiceManager serviceManager) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        saveServiceManager(serviceManager, serviceStorage.getServiceManagerStorageFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void saveServiceManager(ReadOnlyServiceManager serviceManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        serviceStorage.saveServiceManager(serviceManager, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Path getExpenseTrackerStorageFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expenseStorage.getExpenseTrackerStorageFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Optional\u003cReadOnlyExpenseTracker\u003e readExpenseTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return readExpenseTracker(expenseStorage.getExpenseTrackerStorageFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Optional\u003cReadOnlyExpenseTracker\u003e readExpenseTracker(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expenseStorage.readExpenseTracker(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void saveExpenseTracker(ReadOnlyExpenseTracker expenseTracker) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        saveExpenseTracker(expenseTracker, expenseStorage.getExpenseTrackerStorageFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void saveExpenseTracker(ReadOnlyExpenseTracker expenseTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenseStorage.saveExpenseTracker(expenseTracker, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 32,
      "yanlynnnnn": 33,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/expense/ExpenseStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.storage.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Represents a storage for {@link ExpenseTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public interface ExpenseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    Path getExpenseTrackerStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns ExpenseManager data as a {@link ReadOnlyExpenseTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    Optional\u003cReadOnlyExpenseTracker\u003e readExpenseTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    Optional\u003cReadOnlyExpenseTracker\u003e readExpenseTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenseTracker} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @param expenseTracker cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    void saveExpenseTracker(ReadOnlyExpenseTracker expenseTracker) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @see #saveExpenseTracker(ReadOnlyExpenseTracker)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    void saveExpenseTracker(ReadOnlyExpenseTracker expenseTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/expense/JsonAdaptedExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.storage.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.IsFixed;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final BigDecimal value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final String isFixed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Constructs a {@code JsonAdaptedService} with the given Service details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"value\") double value, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                              @JsonProperty(\"isFixed\") String isFixed, @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.value \u003d new BigDecimal(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.isFixed \u003d isFixed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        value \u003d source.getValue().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        isFixed \u003d source.getIsFixed().value ? \"t\" : \"f\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        tag \u003d source.getTag().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!Amount.isValidAmount(value.doubleValue())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final Amount modelValue \u003d new Amount(value.doubleValue());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (isFixed \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, IsFixed.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!IsFixed.isValidIsFixed(isFixed)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(IsFixed.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final IsFixed modelIsFixed \u003d new IsFixed(isFixed);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                    Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        final Tag modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Expense expense \u003d new Expense(modelDescription, modelIsFixed, modelValue, modelDate, modelTag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expense;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/expense/JsonExpenseStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.storage.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * A class to access ExpenseManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class JsonExpenseStorage implements ExpenseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.storage.expense.JsonExpenseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public JsonExpenseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Path getExpenseTrackerStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Optional\u003cReadOnlyExpenseTracker\u003e readExpenseTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return readExpenseTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Similar to {@link #readExpenseTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public Optional\u003cReadOnlyExpenseTracker\u003e readExpenseTracker(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Optional\u003cJsonSerializableExpenseTracker\u003e jsonExpenseTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                filePath, JsonSerializableExpenseTracker.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        if (!jsonExpenseTracker.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            return Optional.of(jsonExpenseTracker.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void saveExpenseTracker(ReadOnlyExpenseTracker expenseTracker) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        saveExpenseTracker(expenseTracker, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public void saveExpenseTracker(ReadOnlyExpenseTracker expenseTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(expenseTracker);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExpenseTracker(expenseTracker), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/expense/JsonSerializableExpenseTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "package seedu.address.storage.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " * An Immutable expenseTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "@JsonRootName(value \u003d \"expenseTracker\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "public class JsonSerializableExpenseTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Constructs a {@code JsonSerializableExpenseTracker } with the given services."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public JsonSerializableExpenseTracker(@JsonProperty(\"services\") List\u003cJsonAdaptedExpense\u003e expenses) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Converts a given {@code ReadOnlyExpenseTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExpenseTracker}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public JsonSerializableExpenseTracker(ReadOnlyExpenseTracker source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * Converts this expenseTracker into the model\u0027s {@code ExpenseTracker} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    public ExpenseTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseTracker expenseTracker \u003d new ExpenseTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            expenseTracker.addExpense(expense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        return expenseTracker;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanlynnnnn": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/service/JsonAdaptedService.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.storage.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.ServiceCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.util.attributes.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Jackson-friendly version of {@link Service}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class JsonAdaptedService {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Service\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final BigDecimal price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Double duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String serviceCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructs a {@code JsonAdaptedService} with the given Service details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public JsonAdaptedService(@JsonProperty(\"title\") String title, @JsonProperty(\"price\") Double price,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                              @JsonProperty(\"duration\") Double duration,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                              @JsonProperty(\"serviceCode\") String serviceCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.price \u003d new BigDecimal(price);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.serviceCode \u003d serviceCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Converts a given {@code Service} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public JsonAdaptedService(Service source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        price \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        duration \u003d source.getDuration().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        serviceCode \u003d source.getServiceCode().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Converts this Jackson-friendly adapted service object into the model\u0027s {@code Service} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted service."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Service toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        final Duration modelDuration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!Amount.isValidAmount(price.doubleValue())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        final Amount modelAmount \u003d new Amount(price.doubleValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (serviceCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    ServiceCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!ServiceCode.isValidServiceCode(serviceCode)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new IllegalValueException(ServiceCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Service service \u003d new Service(modelTitle, modelDuration, modelAmount);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        service.addSerivceCode(serviceCode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return service;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/service/JsonSerializableServiceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.storage.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * An Immutable serviceManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "@JsonRootName(value \u003d \"serviceManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class JsonSerializableServiceManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SERVICE \u003d \"Service list contains duplicate service(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final List\u003cJsonAdaptedService\u003e services \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructs a {@code JsonSerializableServiceManager } with the given services."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public JsonSerializableServiceManager(@JsonProperty(\"services\") List\u003cJsonAdaptedService\u003e services) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.services.addAll(services);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Converts a given {@code ReadOnlyServiceManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableServiceManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public JsonSerializableServiceManager(ReadOnlyServiceManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        services.addAll(source.getServiceList().stream().map(JsonAdaptedService::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Converts this serviceManager into the model\u0027s {@code ServiceManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceManager serviceManager \u003d new ServiceManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (JsonAdaptedService jsonAdaptedService : services) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Service service \u003d jsonAdaptedService.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (serviceManager.hasService(service)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SERVICE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            serviceManager.addService(service);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return serviceManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/service/JsonServiceStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.storage.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A class to access ServiceManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class JsonServiceStorage implements ServiceStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonServiceStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public JsonServiceStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Path getServiceManagerStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Optional\u003cReadOnlyServiceManager\u003e readServiceManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return readServiceManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Similar to {@link #readServiceManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Optional\u003cReadOnlyServiceManager\u003e readServiceManager(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Optional\u003cJsonSerializableServiceManager\u003e jsonServiceManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                filePath, JsonSerializableServiceManager.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!jsonServiceManager.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return Optional.of(jsonServiceManager.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void saveServiceManager(ReadOnlyServiceManager serviceManager) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        saveServiceManager(serviceManager, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void saveServiceManager(ReadOnlyServiceManager serviceManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(serviceManager);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableServiceManager(serviceManager), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/service/ServiceStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.storage.service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Represents a storage for {@link ServiceManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public interface ServiceStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    Path getServiceManagerStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns ServiceManager data as a {@link ReadOnlyServiceManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    Optional\u003cReadOnlyServiceManager\u003e readServiceManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @see #readServiceManager()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    Optional\u003cReadOnlyServiceManager\u003e readServiceManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Saves the given {@link ReadOnlyServiceManager} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param serviceManager cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    void saveServiceManager(ReadOnlyServiceManager serviceManager) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @see #saveServiceManager(ReadOnlyServiceManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    void saveServiceManager(ReadOnlyServiceManager serviceManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ClientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Creates a {@code ClientCode} with the given {@code Client} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        phone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        email.setText(client.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        client.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        if (!(other instanceof ClientCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        ClientCard card \u003d (ClientCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 15,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * Panel containing the list of clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ClientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final String FXML \u003d \"ClientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private ListView\u003cClient\u003e clientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Creates a {@code ClientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clientListView.setItems(clientList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    class ClientListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                setGraphic(new ClientCard(client, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.ui.servicetab.ServiceListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    // Tabs panels for each service component"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ServiceListPanel serviceListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private StackPane serviceListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // serviceListPanel \u003d new ServiceListPanel(logic.getFilteredServiceList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // serviceListPanelPlaceholder.getChildren().add(serviceListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientListPanel getClientListPanel() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return clientListPanel;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 6,
      "hansebastian": 12,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/servicetab/ServiceCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.ui.servicetab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * An UI component that displays information of a {@code Service}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ServiceCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final String FXML \u003d \"ServiceListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * As a consequence, UI elements\u0027 variable titles cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public final Service service;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a {@code ServiceCode} with the given {@code Service} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceCard(Service service, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        title.setText(service.getTitle().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        duration.setText(String.valueOf(service.getDuration().value));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        price.setText(String.valueOf(service.getAmount().value));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (!(other instanceof ServiceCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceCard card \u003d (ServiceCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \u0026\u0026 service.equals(card.service);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/servicetab/ServiceListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package seedu.address.ui.servicetab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Panel containing the list of services."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ServiceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final String FXML \u003d \"ServiceListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ServiceListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ListView\u003cService\u003e serviceListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a {@code ServiceListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ServiceListPanel(ObservableList\u003cService\u003e serviceList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        serviceListView.setItems(serviceList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        serviceListView.setCellFactory(listView -\u003e new ServiceListPanel.ServiceListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Service} using a {@code ServiceCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    class ServiceListViewCell extends ListCell\u003cService\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        protected void updateItem(Service service, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            super.updateItem(service, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (empty || service \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                setGraphic(new ServiceCard(service, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 49
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        final Index fifthClientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(fifthClientIndex.equals(fifthClientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(fifthClientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(fifthClientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.ExpenseStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.JsonExpenseStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.JsonServiceStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.ServiceStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceStorage serviceStorage \u003d new JsonServiceStorage(temporaryFolder.resolve(\"services.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseStorage expenseStorage \u003d new JsonExpenseStorage(temporaryFolder.resolve(\"expenses.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, serviceStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                expenseStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceStorage serviceStorage \u003d new JsonServiceStorage(temporaryFolder.resolve(\"ioExceptionServices.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseStorage expenseStorage \u003d new JsonExpenseStorage(temporaryFolder.resolve(\"ioExceptionExpenses.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                serviceStorage, expenseStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.addClient(expectedClient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 10,
      "hansebastian": 7,
      "yanlynnnnn": 11,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.addClient(validClient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandSuccess(new AddCommand(validClient), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getClientList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(new AddCommand(clientInList), model, AddCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 11,
      "hansebastian": 1,
      "yanlynnnnn": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ReadOnlyExpenseTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ReadOnlyServiceManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.service.Service;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validClient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        public ReadOnlyExpenseTracker getExpenseTracker() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        public ReadOnlyServiceManager getServiceManager() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        public ObservableList\u003cService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        public void updateFilteredServiceList(Predicate\u003cService\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        public void addService(Service toAdd) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * A Model stub that contains a single client."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private class ModelStubWithClient extends ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        ModelStubWithClient(Client client) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            return this.client.isSameClient(client);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * A Model stub that always accept the client being added."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private class ModelStubAcceptingClientAdded extends ModelStub {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            return clientsAdded.stream().anyMatch(client::isSameClient);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            clientsAdded.add(client);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 41,
      "hansebastian": 7,
      "yanlynnnnn": 32,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "hansebastian": 1,
      "yanlynnnnn": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final EditCommand.EditClientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final EditCommand.EditClientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * - the address book, filtered client list and selected client in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the client at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static void showClientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(1, model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 19,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ExpenseTracker());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 28,
      "hansebastian": 1,
      "yanlynnnnn": 7,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 8,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ExpenseTracker());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ServiceManager(), new ExpenseTracker());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ServiceManager(), new ExpenseTracker());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, new EditCommand.EditClientDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ServiceManager(), new ExpenseTracker());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ServiceManager(), new ExpenseTracker());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_duplicateClientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // edit client in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client clientInList \u003d model.getAddressBook().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new EditClientDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_invalidClientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor copyDescriptor \u003d new EditCommand.EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 58,
      "hansebastian": 5,
      "yanlynnnnn": 7,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ExpenseTracker());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            new ExpenseTracker());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_zeroKeywords_noClientFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void execute_multipleKeywords_multipleClientsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 15,
      "hansebastian": 1,
      "yanlynnnnn": 5,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new ServiceManager(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                new ExpenseTracker());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 4,
      "hansebastian": 1,
      "yanlynnnnn": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                 + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedClientMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 31,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ClientUtil.getAddCommand(client));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(new AddCommand(client), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 16,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Client} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "               .build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 42,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 7,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getClientList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // Two clients with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newClients, FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_clientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_clientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(addressBook.hasClient(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_clientWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        addressBook.addClient(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(addressBook.hasClient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void getClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getClientList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * A stub ReadOnlyAddressBook whose clients list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        AddressBookStub(Collection\u003cClient\u003e clients, Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 29,
      "yanlynnnnn": 6,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.model.manager.ExpenseTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.model.manager.ServiceManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_clientNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void hasClient_clientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        modelManager.addClient(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withClient(ALICE).withClient(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceManager serviceManager \u003d new ServiceManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseTracker expenseTracker \u003d new ExpenseTracker();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, serviceManager, expenseTracker);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, serviceManager,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                expenseTracker);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, serviceManager,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                expenseTracker)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, serviceManager,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                expenseTracker)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, serviceManager,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                expenseTracker)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 16,
      "hansebastian": 2,
      "yanlynnnnn": 11,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(ALICE.isSameClient(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(ALICE.isSameClient(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 26,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 11,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void contains_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void contains_clientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void contains_clientInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(uniqueClientList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void add_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void add_duplicateClient_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_nullTargetClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_nullEditedClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_targetClientNotInList_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_editedClientIsSameClient_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.setClient(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedUniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_editedClientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.setClient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedUniqueClientList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_editedClientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.setClient(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void remove_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void remove_clientDoesNotExist_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void remove_existingClient_removesClient() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients_nullUniqueClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.setClients(expectedUniqueClientList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        uniqueClientList.setClients(clientList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Double d \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(d));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        double invalidAmount \u003d -1.0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(Amount.isValidAmount(-10.0)); // Negative amount"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertFalse(Amount.isValidAmount(0.0)); // zero"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // valid amounts are whole numbers or with two decimal places"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(Amount.isValidAmount(12.0)); // whole number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(Amount.isValidAmount(0.12)); // cents"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(Amount.isValidAmount(1.23)); // ones"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(Amount.isValidAmount(12.34)); // tens"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(Amount.isValidAmount(121.45)); // hundreds"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 28,
      "hansebastian": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Date.isValidDate(\"1-23-2020\")); // invalid month"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Date.isValidDate(\"32-2-2020 \")); // invalid day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Date.isValidDate(\"32-2-20200 \")); // invalid year"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Date.isValidDate(\"23/2/2020 \")); // invalid format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(Date.isValidDate(\"20-1-2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(Date.isValidDate(\"20-12-2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(Date.isValidDate(\"2-1-2020\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(Date.isValidDate(\"2-12-2020\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Date date1 \u003d new Date(\"20-1-2020\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Date date2 \u003d new Date(\"1-12-2020\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(\"20 Jan 2020\", date1.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(\"01 Dec 2020\", date2.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // null descriptions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Nice Description\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void toModelType_validClientDetails_returnsClient() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(BENSON, client.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonAdaptedClient client \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, client::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 27,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void readAddressBook_invalidClientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidClientAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void readAddressBook_invalidAndValidClientAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidClientAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        original.addClient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        original.addClient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void toModelType_typicalClientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        AddressBook typicalClientsAddressBook \u003d TypicalClients.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertEquals(addressBookFromFile, typicalClientsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_CLIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.ExpenseStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "import seedu.address.storage.expense.JsonExpenseStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.JsonServiceStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import seedu.address.storage.service.ServiceStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ServiceStorage serviceStorage \u003d new JsonServiceStorage(getTempFilePath(\"services\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        ExpenseStorage expenseStorage \u003d new JsonExpenseStorage(getTempFilePath(\"expenses\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, serviceStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanlynnnnn"
        },
        "content": "                expenseStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 1,
      "hansebastian": 4,
      "yanlynnnnn": 5,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withClient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Adds a new {@code Client} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public AddressBookBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Creates a {@code ClientBuilder} with the default details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code clientToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return new Client(name, phone, email, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class ClientUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns an add command string for adding the {@code client}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getClientDetails(client);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns the part of command string for the given {@code client}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static String getClientDetails(Client client) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        client.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 16,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.util.attributes.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * A utility class to help with building EditClientDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class EditClientDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private EditCommand.EditClientDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder(EditCommand.EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditClientDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns an {@code EditClientDescriptor} with fields containing {@code client}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setTags(client.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditClientDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditClientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public EditCommand.EditClientDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns the middle index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns the last index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns the client in the {@code model}\u0027s client list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static Client getClient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        return model.getFilteredClientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    private TypicalClients() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical clients."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 31,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RuiFengg"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RuiFengg": 3,
      "-": 9
    }
  }
]
