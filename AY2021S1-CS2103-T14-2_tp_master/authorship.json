[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T14-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T14-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * as a learning application for students taking CS2040s"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * as a platform for consolidation of CS2040s content"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _DSAce_) used for managing contact details."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* It is named `DSAce` because it is an app to help users ace their data structure and algorithm(CS2040S)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "* For the detailed documentation of this project, see the **[DSAce Product Website](https://docs.google.com/document/d/1q6fUQ2X6h_n4gxUxrcXxbq_z4Xk9ENjbd8flsvDFf-A/edit?ts\u003d5f4b41e0)**."
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "-": 6,
      "zeying99": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "### Cai Jialin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003cimg src\u003d\"images/jialin7878.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "[[github](https://github.com/jialin7878)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "[[portfolio](team/jialin7878.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "### Calista Io"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "\u003cimg src\u003d\"images/calistaio.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "[[github](http://github.com/calistaio)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "[[portfolio](team/calistaio.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Gan Jing Wen"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "\u003cimg src\u003d\"images/gan-jw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "[[github](http://github.com/gan-jw)] [[portfolio](team/gan-jw.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "### Mehak Virdi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003cimg src\u003d\"images/mehak24k.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "[[github](http://github.com/mehak24k)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "[[portfolio](team/mehakvirdi.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* Responsibilities: Testing + Code Quality"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeying99"
        },
        "content": "### Wu Zeying"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeying99"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": "\u003cimg src\u003d\"images/wuzeying.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "\u003cimg src\u003d\"images/zeying99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 0778a5f79b089a11c31aef4a365e9f10468fb228"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeying99"
        },
        "content": "[[github](http://github.com/zeying99)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeying99"
        },
        "content": "[[portfolio](team/wuzeying.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* Responsibilities: documentation"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 5,
      "CalistaIo": 5,
      "gan-jw": 3,
      "mehak24k": 5,
      "-": 35,
      "zeying99": 8
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "mehak24k": 1,
      "-": 78
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a flashcard)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* stores the definition book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/definition/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* can save the definition book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Example of class diagram for addCommandParser:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zeying99"
        },
        "content": "![classDiagram0](images/classDiagram0.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "### Sort feature"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "The sort feature sorts the flashcards in the flashcard list in either ascending or descending order of priority. This feature is implemented"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "by creating an instance of `SortCommand` that can be executed on the model of the flashcard list. This particular implementation of the sort"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "feature was chosen because it accesses and modifies the internal flashcard list in the same way as other commands such as `ListCommand`, hence"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "preserving consistency in the program design."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "The following sequence diagram shows how the sort feature works:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "![sort0](images/Sort0.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "When the user executes a sort command, e.g. `sort asc`, `ParserUtil#parseSortOrder()` is called. This function trims whitespaces from the user"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "input and converts it to lowercase. Hence, user inputs that are in lowercase, uppercase, or both, e.g. `AsC`, are all valid. If the user does not"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "provide an argument, `asc` will be passed into the `SortCommand` object and the flashcard list will be sorted in ascending order of priority by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "default."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "The following activity diagram shows how user input is processed:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "![sort1](images/Sort1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zeying99"
        },
        "content": "### \\[Proposed\\] Quiz feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zeying99"
        },
        "content": "The proposed quiz feature is facilitated by `QuizPaser` and `Question`.  `Question` is an abstract class and `Mcq` and `TrueFalse` extends Question. There are a few methods within Questions:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* `getPrompt() ` — Provides question description."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* `getQuestion()` — Provides both question description and options."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* `checkResponse(String response)` — Checks if the response is the same as the correct answer."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zeying99"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#startQuiz()`,`Model#enterQuiz()`,`Model#exitQuiz()` `Model#endQuiz()` and `Model#attemptQuestion()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Given below is an example usage scenario and how to do quiz."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Step 1. The user launches the application and DSAce shows the default page with list of flashcards."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zeying99"
        },
        "content": "![UndoRedoState0](images/state0.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Step 2. The user executes `enter quiz` command to switch GUI interface. The `enter quiz` command calls `Model#enterQuiz()`, causing the change in interface and list of questions are displayed. The user can now answer questions with `attempt` command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zeying99"
        },
        "content": "![UndoRedoState1](images/state2.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Step 3. The user finishes questions and executes `end quiz` command to end the current attempt, which will be stored. The result will be displayed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zeying99"
        },
        "content": "![UndoRedoState2](images/state3.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Step 4. The user executes `past performance` during quiz mode to see past attempt performance. The list of past attempt is shown in sequence of time and number of correct answers."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeying99"
        },
        "content": "![UndoRedoState4](images/state1.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Step 5. The user executes `exit quiz`, which calls `Model#exitQuiz`. The GUI interface is switch back to flashcard mode."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zeying99"
        },
        "content": "![UndoRedoState5](images/state4.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire definition book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the flashcard being deleted)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* CS2040S students in NUS"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* wants a way to study 2040 concepts in a condensed format"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* wants a way to use fragmented time for effective revision"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "This product can help students with memory retention of various concepts and formulae in CS2040S. Students can utilize fragmented time to enhance learning."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "This product can help with a quick review of concepts for students to check their understanding. Questions are neatly segmented into different topics for better organisation."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Concepts and definitions are organised according to different levels of priority for the student to allocate his studying time wisely."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Students can bookmark where they left off and resume going through the questions later."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Students can organise (specify the sequence) the flashcards as well."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                      |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* * *`  | new user                                   | view the user manual           | get a brief idea of how to use the app                                 |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* * *`  | user                                       | make new flashcards about the definition of a concept | remember my CS2040S content better              |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* * *`  | user                                       | delete a flashcard             | remove flashcards with mistakes or those I do not need                 |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* * *`  | user                                       | save the flashcards locally |  review some flashcards that I have previously made                       |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | user studying for a test                   | practice questions/ quizzes    | get good grades!                                                       |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | user studying for a test                   | review past quiz attempts      | so that I can learn from my mistakes                                   |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | user                                       | study pseudocode               | gain a better understanding of the algorithms                          |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | familiar user                              | search for flashcards using keywords |                                                                  |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | familiar user and visual learner           | insert diagrams in flashcards | remember the information better                                         |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | familiar user                              | delete wrong tags             |                                                                         |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | familiar user                            | label my flashcards   | sort them into different categories with appropriate tags.                        |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | familiar user                    | view flashcards according to the different topics   | study topic-by-topic.                                        |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `* *`    | user with limited time              | I want to save my progress as I may not finish everything    | continue my revision from where I had left off from the previous session.  |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | user who is familiar with the app\t\t\t| set reminders indicating when I should study a particular flashcard | so that I can maximise information retention |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | expert user\t\t\t\t\t\t\t\t| use shortcuts                  | view my frequently-viewed flashcards more easily                             |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | expert user                                | track my history of flashcards that I have viewed over the past specified time period(e.g week/month) | check my study habits regularly |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | user who is familiar with the app           | favourite flashcards          | easily access flashcards I have to review more                               |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | user studying for a test                   | design my own questions that I want to practice | be better prepared for exams                               |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | expert user                                | check my history of my wrong quiz answers/ quiz scores | visualize my improvement in a statistical way      |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "| `*`  | user studying for a test                   | add in T/F questions \t\t\t | be better prepared for more types of questions                            |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Use Cases"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "(For all use cases below, the **System** is the `DSAce` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Use case: Delete a flashcard**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "1.  User requests to list flashcards"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "2.  DSAce shows a list of flashcards"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "3.  User requests to delete a specific flashcard in the list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "4.  DSAce deletes the flashcard"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * 3a1. DSAce shows an error message."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Use case: Add a flashcard**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "1.  User requests to add a flashcards"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "2.  DSAce adds the flashcard"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * 1a1. DSAce shows an error message."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Use case: Edit a flashcard**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "1.  User requests to list flashcards to determine if the flashcard to be edited already exists"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "2.  DSAce shows a list of flashcards"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "3.  User requests to edit a specific flashcard in the list by providing the detail to be edited"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "4.  DSAce edits the flashcard"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * 3a1. DSAce shows an error message."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 3b. The given input is invalid."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * 3b1. DSAce shows an error message."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Use case: Take a quiz**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "1.  User requests to see the list of quiz topics available for study"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "2.  DSAce shows a list of quiz topics"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "3.  User requests the topics to be covered in the quiz questions"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "4.  DSAce displays one question"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "5.  User inputs their answer for the displayed question"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Use case loops through steps 4 and 5 until the quiz runs out of questions or the user inputs a stop command"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "6.  DSAce shows overall score and a list of questions with their marks"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "7.  User can request to view a particular question using the index"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "8.  DSAce displays the question, user’s answer and the correct answer"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Use case loops through 7 and 8 upon user request until user inputs exit command"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " Use case ends."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 3a. The user input topic index is invalid."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * 3a1. DSAce shows an error message."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* 5a. The user input answer is invalid."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * 5b1. DSAce shows an error message."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     Use case resumes at step 4."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* Should work on any *mainstream OS* as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* Should be able to store up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* Should not take up too much memory in the hard disk (i.e. the entire desktop application should not take up more than 100 MB of space)."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* The system should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* The flashcards would not be required to support inputs in formats other than utf-8."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "### Deleting a flashcard"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "1. Deleting a flashcard while all flashcards are being shown"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "   1. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "      Expected: No flashcard is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 119,
      "mehak24k": 9,
      "CalistaIo": 19,
      "-": 280,
      "zeying99": 19
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   1. Run the `seedu.definition.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   e.g. `seedu.definition.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   e.g. `seedu.definition.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   e.g. `seedu.definition.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "DSAce is a **desktop app for creating flashcards for CS2040s, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, DSAce can get your revision tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* [Quick start](#quick-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [**`help`** : Viewing help.](#viewing-help--help)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [**`add`** : Adding a flashcard.](#adding-a-flashcard--add)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [**`list`** : Listing all flashcards.](#listing-all-flashcards--list)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * [**`sort`** : Sorting all flashcards.](#sorting-all-flashcards--sort)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * [**`edit`** : Editing a flashcard.](#editing-a-flashcard--edit)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * [**`find`** : Locating flashcards by name/tag/priority.](#locating-flashcards-by-nametagpriority-find)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [**`delete`** : Deleting a flashcard.](#deleting-a-flashcard--delete)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * [**`flip`** : Flipping a flashcard.](#flipping-a-flashcard--flip)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [**`clear`** : Clearing all flashcards.](#clearing-all-entries--clear)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * [**`enter quiz`** : Entering Quiz mode.](#entering-quiz-mode--enter-quiz)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * [**`leave quiz`** : Leaving Quiz mode.](#leaving-quiz-mode--leave-quiz)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [**`exit`** : Exiting the program.](#exiting-the-program--exit)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * [Saving the data.](#saving-the-data)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "1. Download the latest `dsace.jar` from [here](https://github.com/AY2021S1-CS2103-T14-2/tp/releases)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your DSAce."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * **`list`** : Lists all flashcards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`add`**`n/Insertion Sort d/Worse case: O(n^2)` : Adds a flashcard named `Insertion Sort` to the DSAce folder."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`edit`**`1 n/BubbleSort d/Average case: O(n^2)` : Edits the name and definition of the 1st flashcard in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    current list to be `BubbleSort` and `Average case: O(n^2)` respectively."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`sort`**`desc` : Sorts all flashcards by priority in descending order."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`find`**`n/Trees` : Finds flashcards with names containing the keyword `Trees`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd flashcard shown in the current list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`flip`**`2` : Flips the 2nd flashcard shown in the current list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   * **`clear`** : Deletes all flashcards."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`enter quiz`** : Enters Quiz mode."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "   * **`leave quiz`** : Leaves Quiz mode."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "1. All sample data and flashcards created by the user will be stored in the `DSAce` folder."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "1. Other commands in Quiz mode are to be implemented in v1.4."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Sorting`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "  e.g. if the command specifies `n/NAME d/DEFINITION`, `d/DEFINITION n/NAME` is also acceptable."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Shows a message explaining the features of the app, and the format of the command associated with each feature."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Adding a flashcard : `add`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Adds a flashcard to the default DSAce folder. "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Format: `add n/NAME d/DEFINITION [t/TAG] [p/PRIORITY]`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `add n/Bellman Ford Search d/runtime: O(VE) p/high`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* `add n/Bubble Sort d/runtime: O(n^2) t/sorting t/midterm`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "- Priority will default to low when unspecified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "- To add multiple tags, each of them requires its own label e.g `t/sorting t/midterm`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "- If there are multiple instances of name and/or definition, the one that appears last is taken "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "e.g second is the name of `n/first n/second`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Listing all flashcards : `list`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Shows a list of all flashcards in the DSAce folder."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Sorting all flashcards : `sort`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Sorts all flashcards in the DSAce folder by priority."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Format: `sort [ORDER]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* Order is specified as either `asc` or `desc`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The order is case-insensitive. e.g `ASC` and `AsC` will both sort by ascending."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* If no order is specified, default order is ascending."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `sort ASC` Sorts all flashcards by priority in ascending order."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `sort desc` Sorts all flashcards by priority in descending order."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Editing a flashcard : `edit`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Edits an existing flashcard in the DSAce folder."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Format: `edit INDEX [n/NAME] [d/DEFINITION] [t/TAG] [p/PRIORITY]`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* Edits the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The index refers to the index number associated with the edited flashcard, as shown in the displayed flashcard list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* When editing tags, the existing tags of the flashcard will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* You can remove all the flashcard’s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `list` followed by `edit 1 n/BubbleSort d/Average case: O(n^2)` Edits the name and definition of the 1st flashcard to"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " be `BubbleSort"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "` and `Average case: O(n^2)` respectively."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `list` followed by `edit 2 n/SelectionSort t/` Edits the name of the 2nd flashcard to be `SelectionSort` and clears"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " all existing tags."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `list` followed by `edit 3 p/high` Edits the priority of the 3rd flashcard to be `high`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "- To edit multiple tags, each of them requires its own label e.g `t/sorting t/midterm`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "- If there are multiple instances of name and/or definition, the one that appears last is taken "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  e.g second will be the name of `n/first n/second`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Locating flashcards by name/tag/priority: `find`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Finds flashcards with names, tags or priorities containing any of the given keywords."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "Format: find `[n/KEYWORD]​` `[t/KEYWORD]​` `[p/KEYWORD]​`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The search is case-insensitive. e.g `sort` will match `Sort`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The order of the keywords does not matter. e.g. `runtime sort` will match `sort runtime`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* Names, tags or priorities will be searched according to input prefixes."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* Only full words will be matched e.g. `sort` will not match `sorting`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* Only flashcards matching all keywords will be returned (i.e. `AND` search)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* `find n/Quicksort` returns `Quicksort`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* `find n/Chaining t/hashing` returns `Chaining`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* `find n/Heap p/medium` returns `Heaps`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* `find n/Heap p/low` or `find n/Chaining t/metal` returns no flashcards because not all conditions are satisfied"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Deleting a flashcard : `delete`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Deletes the specified flashcard from DSAce folder."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* Deletes the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The index refers to the index number associated with the deleted flashcard, as shown in the displayed flashcard list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd flashcard in the folder."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Flipping a flashcard : `flip`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Flips the specified flashcard from DSAce folder."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Format: `flip INDEX`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* Flips the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* The index refers to the index number associated with the flipped flashcard, as shown in the displayed flashcard list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* The flashcard will not stay flipped upon user exiting and re-entering the app."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "* `list` followed by `flip 2` flips the 2nd flashcard in the folder."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "Clears all entries from the flashcards folder."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Entering Quiz mode : `enter quiz`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Enters quiz mode and disables all commands in flashcard mode."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Format: `enter quiz`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "### Leaving Quiz mode : `leave quiz`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Leaves quiz mode and disables all commands in quiz mode."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "Format: `leave quiz`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "DSAce data is saved in the DSAce folder automatically after any command that changes the data is entered. There is no need to save the data manually."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "### FAQ"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "Q: How do I transfer my data to another Computer? \u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "A: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous DSAce home folder."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Add** | `add n/NAME d/DEFINITION [t/TAG] [p/PRIORITY]` \u003cbr\u003e e.g., `add n/Bellman-Ford Search d/runtime: O(VE)`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "**Sort** | `sort [ORDER]` \u003cbr\u003e e.g., `sort ASC`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX` \u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "**Flip** | `flip INDEX` \u003cbr\u003e e.g., `flip 2`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [d/DEFINITION] [t/TAGS] [p/PRIORITY]` \u003cbr\u003e e.g., `edit 1 n/BubbleSort d/Average case: O(n^2) p/low`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "**Find** | `find [n/KEYWORDS] [t/KEYWORD​S] [p/KEYWORD​S]​` \u003cbr\u003e e.g., `find n/BellmanFord Search`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "**Enter Quiz** | `enter quiz`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "**Leave Quiz** | `leave quiz`"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 26,
      "mehak24k": 20,
      "gan-jw": 85,
      "CalistaIo": 5,
      "-": 119
    }
  },
  {
    "path": "docs/team/calistaio.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "title: Calista Io\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "## Project: DSAce"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "DSAce is a desktop flashcard application used for teaching CS2040S concepts. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 4K LoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "* **New Feature**: Added the ability to sort flashcards in order of ascending/descending priority"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * What it does: allows the user to sort flashcards in either ascending or descending priority, depending on the user input. If the user does not specify the preferred sorting order in the input,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    the flashcard list will be sorted in ascending order by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Justification: This feature improves the product significantly because it is quite common for students to prioritise certain flashcards, probably because they have a higher likelihood of being tested in exams. Hence, this feature"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  \tprovides a convenient means for students to quickly sort their flashcards in order of priority."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dcalistaio\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Managed releases `v1.2`, `v1.3.trial` and `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "*  **Enhancements to exitsting features**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Enhanced the model of the flashcard book by adding a performanceBook attribute to the ModelManager class. PerformanceBook is a class that stores"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    both a Performance object that keeps track of past quiz attempts and the responses for each attempt, as well as a PerformanceStorage object that performs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "\tread and write functions on Performance. [\\#134](https://github.com/AY2021S1-CS2103-T14-2/tp/pull/134) "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Created MCQ, T/F, and Question classes to allow for quizzes to be implemented in the flashcard book [\\#74](https://github.com/AY2021S1-CS2103-T14-2/tp/pull/74)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Create Priority enum class to allow for flashcards to possess differing levels of priority [\\#60](https://github.com/AY2021S1-CS2103-T14-2/tp/pull/60)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  * Renamed Person class to Flashcard and removed phone and email fields from Person class to adapt original AB3 project [\\#37](https://github.com/AY2021S1-CS2103-T14-2/tp/pull/37)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 19,
      "-": 12
    }
  },
  {
    "path": "docs/team/gan-jw.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "title: Gan Jing Wen\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "## Project: DSAce"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 2,
      "-": 44
    }
  },
  {
    "path": "docs/team/jialin7878.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "title: Cai Jialin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "DSAce is a desktop definition book application used for teaching Data Structures and Algorithms principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* **New Feature**: Added the ability for find command to search for tags and priority."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * What it does: allows the user to search for flashcards using tags and priority keywords as well. Multiple keywords will follow the `AND` search "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  i.e only flashcards that fulfills all keywords will be returned"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Justification: This feature improves the user experience because the user can revise flashcards by topic (e.g Sorting) and/or by priority (e.g priority: high)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Highlights: The implementation required changes to existing commands, as well as the creation of three new predicate classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djialin7878\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Refactored code to more suit our application (Pull request [\\#38]())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Create and refactor classes for our quiz feature (Pull request [\\#82]())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Added sample quiz questions (Pull request [\\#82]())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Wrote additional tests for existing features (Pull request [\\#82]())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * Fix PED bug reports (Pull request [\\#133]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    * Fix PED documentation bugs (Pull request [\\#133]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  * PRs reviewed: [\\#9](), [\\#59](), [\\#60](), [\\#72](), [\\#74](), [\\#83](), [\\#85](), [\\#95](), [\\#143]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jialin7878": 16,
      "-": 19
    }
  },
  {
    "path": "docs/team/mehakvirdi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "title: Mehak Virdi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "## Project: DSAce"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "DSAce is a desktop definition book application used for teaching Data Structures and Algorithms principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **New Feature**: Added the ability to flip a flashcard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * What it does: allows the user to flip a flashcard to either show or hide the definition of the term in the flashcard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * Justification: This feature improves the product significantly because a user should be able to view or hide the definition of the term in the flashcard as required to help them memorise and test themselves."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * Highlights: This enhancement affects the GUI and state of the definition book significantly. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to the properties of a flashcard and the GUI of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * Credits: *{referred to: https://nus-cs2103-ay2021s1.github.io/tp/tutorials/AddRemark.html}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **New Feature**: Implemented GUI for the quiz mode in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * What it does: Enables the user to have a separate interface to practice quiz questions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * Justification: This feature improves the product significantly because a user should be able to practice quiz questions to test their understanding of the subject and be exam-ready."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * Highlights: This enhancement affects the GUI and state of the definition book significantly. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to the model and logic of the application to maintain the state of the application properly to account for both the flashcard and quiz modes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **New Feature**: Implemented the `start attempt` command under the quiz mode."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * What it does: Enables the user to initiate an attempt in answering the quiz questions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * Justification: This feature improves the product significantly because a user should be able to practice quiz questions under specific attempts to simulate a mock-test."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * Highlights: This enhancement affects the state of the definition book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dmehak24k\u0026tabRepo\u003dAY2021S1-CS2103-T14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * Managed release `v1.3b` on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * Added introduction and list of features covered in the application. [\\#19](https://github.com/AY2021S1-CS2103-T14-2/tp/pull/19)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    * Added implementation details of the `flip` flashcard feature. (TBC)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#103](https://github.com/nus-cs2103-AY2021S1/ip/pull/103), [\\#129](https://github.com/nus-cs2103-AY2021S1/ip/pull/129)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/mehak24k/ped/issues/1), [2](https://github.com/mehak24k/ped/issues/2), [3](https://github.com/mehak24k/ped/issues/3), [4](https://github.com/mehak24k/ped/issues/4), [5](https://github.com/mehak24k/ped/issues/5))"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 41
    }
  },
  {
    "path": "docs/team/wuzeying.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "title: Wu Zeying\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "## Project: DSAce (AddressBook Level 3)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "DSAce is a desktop definition book application used for teaching Data Structures and Algorithms principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* **New Feature**: Priority "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * What it does: Allows users to assign priority of the flashcards. Users can sort the flashcards by priority."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Justification: This feature allows users to see which concept should be of their priority. Hence, easing their process of revision."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands such add and edit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* **New Feature**: Added enter quiz and leave quiz command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * What it does: Allows users to enter quiz and leave quiz interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Justification: This feature allows users to enter a separate interface where flashcards are removed, quiz questions are shown and interface color scheme changes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Highlights: NA"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djialin7878\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Updated the GUI of priority (Pull requests [\\#66]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Connect quiz interface with logic and model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    * Added implementation details of the `enter quiz and leave quiz` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeying99"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#145]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zeying99": 38
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their definition book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/definition/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.definition.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.definition.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Changes the remark of an existing person in the definition book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Changes the remark of an existing flashcard in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e upstream/branch-v1.2"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the flashcard identified \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            + \"by the index number used in the last flashcard listing. \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.definition.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param index of the flashcard in the filtered flashcard list to edit the remark"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param remark of the flashcard to be updated to"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.definition.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of flashcard data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the flashcard’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a flashcard."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Create a new `Remark` in `seedu.definition.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "Create a new `Remark` in `seedu.address.model.flashcard`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e upstream/branch-v1.2"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each flashcard."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Simply add the following to [`seedu.definition.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty definition book!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public PersonCard(Person flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    remark.setText(flashcard.getRemark().value);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Person flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Person editedFlashcard \u003d new Person(flashcardToEdit.getName(), flashcardToEdit.getPhone(), flashcardToEdit.getEmail(),"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                flashcardToEdit.getAddress(), remark, flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        model.setPerson(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedFlashcard));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * {@code flashcardToEdit}."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private String generateSuccessMessage(Person flashcardToEdit) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return String.format(message, flashcardToEdit);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "mehak24k": 16,
      "CalistaIo": 18,
      "-": 368
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `definition` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "The `definition` field in `Person` is actually an instance of the `seedu.address.model.person.Definitioness` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.flashcard.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e upstream/branch-v1.2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "1. Safe delete the field `definition` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "1. Remove the usages of `definition` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `definition` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `definition` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$definition` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "![$definition](../images/remove/$definition.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "private Label definition;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003cLabel fx:id\u003d\"definition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$definition\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `definition` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\": \"4th street\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "You can go through each individual `json` file and manually remove the `definition` field."
      }
    ],
    "authorContributionMap": {
      "mehak24k": 16,
      "CalistaIo": 2,
      "-": 89
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.definition.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "       Person flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "       Person editedFlashcard \u003d createEditedPerson(flashcardToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "       if (!flashcardToEdit.isSamePerson(editedFlashcard) \u0026\u0026 model.hasPerson(editedFlashcard)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "       model.setPerson(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "       flashcards.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    3.  Save the definition book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    6.  Add a new entity to the definition book"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 3,
      "CalistaIo": 6,
      "-": 241
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook(); // Entry point for storage is here!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "-": 182,
      "zeying99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d flashcards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "gan-jw": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /** Get QuizList */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuizList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /** Get QuizList */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    ObservableList\u003cAttempt\u003e getAttemptList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "CalistaIo": 2,
      "-": 48,
      "zeying99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.parser.FlashcardParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.logic.parser.QuizParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private final FlashcardParser flashcardParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final QuizParser quizParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        flashcardParser \u003d new FlashcardParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        quizParser \u003d new QuizParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (model.getIsQuizMode()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            command \u003d quizParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            command \u003d flashcardParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook()); // write to Json file here"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            if (model.getIsQuizMode()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                model.savePerformance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return model.getQuizList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ObservableList\u003cAttempt\u003e getAttemptList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return model.getAttemptList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 4,
      "gan-jw": 8,
      "CalistaIo": 7,
      "-": 74,
      "zeying99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Adds a flashcard to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to the flashcard list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + PREFIX_DEFINITION + \"DEFINITION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            + PREFIX_TITLE + \"Bubblesort \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + PREFIX_DEFINITION + \"Sorts bubbles \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + PREFIX_TAG + \"Sorting \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + PREFIX_PRIORITY + \"High\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the address book\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public AddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8,
      "mehak24k": 1,
      "CalistaIo": 8,
      "gan-jw": 3,
      "-": 41,
      "zeying99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AnswerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.exceptions.InvalidQuestionAnswerException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Answers a question identified using it\u0027s displayed index from the quiz book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class AnswerCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"answer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            + \": Answers a question identified by the index number used in the displayed question list. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            + \"True/False Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            + PREFIX_ANSWER + \"true\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            + \"MCQ Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            + PREFIX_ANSWER + \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String MESSAGE_ANSWER_SUCCESS \u003d \"Your answer has successfully been recorded.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final String MESSAGE_CURRENTLY_NOT_ATTEMPTING \u003d \"Please start an attempt before answering a \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            + \"question!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Creates an AnswerCommand to record the specified {@code Response}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public AnswerCommand(Index index, String answer) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireAllNonNull(index, answer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        ObservableList\u003cQuestion\u003e lastShownQuestionList \u003d model.getQuizList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownQuestionList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Question qn \u003d lastShownQuestionList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Response resp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            resp \u003d new Response(this.answer, qn);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            resp.markResponse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } catch (InvalidQuestionAnswerException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (model.hasCurrentAttempt()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            model.recordResponse(resp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ANSWER_SUCCESS, this.index.getZeroBased(), this.answer));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return new CommandResult(MESSAGE_CURRENTLY_NOT_ATTEMPTING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 72,
      "zeying99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Please type \u0027clear\u0027 only.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Flashcard list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 22,
      "zeying99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /** Performance information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final boolean showPerformance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /** Application should be switched to quiz mode. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final boolean switchToQuiz;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /** Application should be switched to flashcards mode. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final boolean switchToFlashcards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showPerformance, boolean exit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.showPerformance \u003d showPerformance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.switchToQuiz \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.switchToFlashcards \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields (2)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isQuiz, boolean isExitQuiz, boolean showHelp,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                         boolean showPerformance, boolean exit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.showPerformance \u003d showPerformance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.switchToQuiz \u003d isQuiz;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.switchToFlashcards \u003d isExitQuiz;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean isShowPerformance() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return showPerformance;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public boolean isSwitchToQuiz() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return switchToQuiz;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public boolean isSwitchToFlashcards() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return switchToFlashcards;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 13,
      "mehak24k": 23,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Deletes a flashcard identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 5,
      "-": 45,
      "zeying99": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Edits the details of an existing flashcard in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            + \"[\" + PREFIX_DEFINITION + \"DEFINITION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + PREFIX_TITLE + \"test1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This flashcard already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param index of the flashcard in the filtered flashcard list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * @param editFlashcardDescriptor details to edit the flashcard with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public EditCommand(Index index, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        requireNonNull(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Flashcard editedFlashcard \u003d createEditedFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (!flashcardToEdit.isSameFlashcard(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_FLASHCARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates and returns a {@code Flashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private static Flashcard createEditedFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Title updatedTitle \u003d editFlashcardDescriptor.getTitle().orElse(flashcardToEdit.getTitle());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Definition updatedDefinition \u003d editFlashcardDescriptor.getDefinition().orElse(flashcardToEdit.getDefinition());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Priority updatedPriority \u003d editFlashcardDescriptor.getPriority().orElse(flashcardToEdit.getPriority());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return new Flashcard(updatedTitle, updatedDefinition, updatedTags, updatedPriority);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Stores the details to edit the flashcard with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * corresponding field value of the flashcard."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        private Definition definition;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public EditFlashcardDescriptor() {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            setDefinition(toCopy.definition);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, definition, tags, priority);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        public void setDefinition(Definition definition) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            this.definition \u003d definition;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        public Optional\u003cDefinition\u003e getDefinition() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return Optional.ofNullable(definition);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        private Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            if (!(other instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            EditFlashcardDescriptor e \u003d (EditFlashcardDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    \u0026\u0026 getDefinition().equals(e.getDefinition())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 11,
      "mehak24k": 10,
      "CalistaIo": 14,
      "-": 140,
      "zeying99": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EndAttemptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class EndAttemptCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"end attempt: Ends a quiz attempt.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_ATTEMPT_ACKNOWLEDGEMENT \u003d \"Attempt ended!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!model.hasCurrentAttempt()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new CommandException(\"There is no attempt in progress\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            model.endAttempt();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return new CommandResult(MESSAGE_ATTEMPT_ACKNOWLEDGEMENT, false, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!(other instanceof EndAttemptCommand)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EnterQuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public class EnterQuizCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enter\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Please type \u0027enter quiz\u0027 fully\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_ENTER_ACKNOWLEDGEMENT \u003d \"Switching from flashcard mode to quiz mode.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.flipQuizMode();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new CommandResult(MESSAGE_ENTER_ACKNOWLEDGEMENT, true, false, false, false, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "zeying99": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Flashcard List as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "CalistaIo": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.ContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards whose titles contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Quicksort\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final List\u003cPredicate\u003cFlashcard\u003e\u003e predicates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cFlashcard\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        model.updateFilteredPersonList(new ContainsAllKeywordsPredicate(predicates));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 12,
      "CalistaIo": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Flips a flashcard to show the definition."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flip\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Flips the identified flashcard \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            + \"by the index number used in the last flashcard listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_FLIP_FLASHCARD_SUCCESS \u003d \"Flipped Flashcard: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Creates a FlipCommand to flip the flashcard with the specified {@code index}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public FlipCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard flashcardToFlip \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        model.flipFlashcard(flashcardToFlip);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_FLASHCARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FLIP_FLASHCARD_SUCCESS, flashcardToFlip));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private String generateSuccessMessage(Flashcard flashcardToFlip) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String message \u003d MESSAGE_FLIP_FLASHCARD_SUCCESS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return String.format(message, flashcardToFlip);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (!(other instanceof FlipCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand e \u003d (FlipCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 77,
      "zeying99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LeaveQuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public class LeaveQuizCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"leave\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Please type \u0027leave quiz\u0027 fully.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Switching from quiz mode to flashcard mode.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.flipQuizMode();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "zeying99": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_FLASHCARD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 21,
      "zeying99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PerformanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class PerformanceCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"performance\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows user\u0027s past quiz attempts.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String SHOWING_PERFORMANCE_MESSAGE \u003d \"Opened performance window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new CommandResult(SHOWING_PERFORMANCE_MESSAGE, false, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Sorts the flashcards in the flashcard list in order of priority."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            + \": Sorts the flashcard list.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            + \"Parameters: ASC / DESC (can be in lowercase)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ASC\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final String sortOrder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public SortCommand(String sortOrder) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.sortOrder \u003d sortOrder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        model.sortFilteredPersonList(sortOrder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new CommandResult(\"Flashcards sorted.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StartAttemptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Starts a quiz attempt."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class StartAttemptCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"start attempt: Starts a quiz attempt.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_ATTEMPT_ALREADY_ONGOING \u003d \"Attempt is already ongoing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_ATTEMPT_ACKNOWLEDGEMENT \u003d \"Attempt started!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (model.hasCurrentAttempt()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new CommandException(MESSAGE_ATTEMPT_ALREADY_ONGOING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            model.startAttempt();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new CommandResult(MESSAGE_ATTEMPT_ACKNOWLEDGEMENT, false, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (!(other instanceof StartAttemptCommand)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "mehak24k": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DEFINITION, PREFIX_TAG, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DEFINITION)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Definition definition \u003d ParserUtil.parseDefinition(argMultimap.getValue(PREFIX_DEFINITION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Priority priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(title, definition, tagList, priority);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new AddCommand(flashcard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 4,
      "mehak24k": 3,
      "CalistaIo": 3,
      "-": 41,
      "zeying99": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AnswerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.logic.commands.AnswerCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Parses input arguments and creates a new AnswerCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnswerCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * and returns an AnswerCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public AnswerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String ans;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            ans \u003d argMultimap.getValue(PREFIX_ANSWER).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return new AnswerCommand(index, ans);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public ClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (userInput.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeying99": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final Prefix PREFIX_DEFINITION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "mehak24k": 1,
      "gan-jw": 1,
      "-": 12,
      "zeying99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DEFINITION, PREFIX_TAG, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            editFlashcardDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            editFlashcardDescriptor.setPriority(ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    .parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DEFINITION).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                editFlashcardDescriptor.setDefinition(ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                        .parseDefinition(argMultimap.getValue(PREFIX_DEFINITION).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } catch (ParseException exception) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw exception;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DEFINITION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                editFlashcardDescriptor.setDefinition(ParserUtil"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                        .parseDefinition(argMultimap.getValue(PREFIX_DEFINITION).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } catch (ParseException exception) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            throw exception;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFlashcardDescriptor::setTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return new EditCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "mehak24k": 5,
      "-": 67,
      "zeying99": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EnterQuizCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EnterQuizCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public class EnterQuizCommandParser implements Parser\u003cEnterQuizCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public EnterQuizCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (userInput.trim().equals(\"quiz\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return new EnterQuizCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterQuizCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeying99": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TAG, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cString\u003e allTitleKeywords \u003d argMultimap.getAllValues(PREFIX_TITLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cString\u003e allTagKeywords \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cString\u003e allPriorityKeywords \u003d argMultimap.getAllValues(PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (String str : allTitleKeywords) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            Title keyword \u003d ParserUtil.parseTitle(str);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            predicates.add(new NameContainsKeywordsPredicate(keyword.fullTitle));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (String str : allTagKeywords) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            Tag keyword \u003d ParserUtil.parseTag(str);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            predicates.add(new TagContainsKeywordsPredicate(keyword.tagName));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (String str : allPriorityKeywords) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            Priority keyword \u003d ParserUtil.parsePriority(str);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            predicates.add(new PriorityContainsKeywordsPredicate(keyword.priority));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (predicates.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new FindCommand(predicates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 42,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FlashcardParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EnterQuizCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.logic.commands.PerformanceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public class FlashcardParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return new FlipCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        case EnterQuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return new EnterQuizCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case PerformanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new PerformanceCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 4,
      "mehak24k": 4,
      "CalistaIo": 3,
      "gan-jw": 1,
      "-": 74,
      "zeying99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FlipCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class FlipCommandParser implements Parser\u003cFlipCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FlipCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * and returns a FlipCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @param args the user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @return a FlipCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public FlipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return new FlipCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FlipCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LeaveQuizParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.LeaveQuizCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public class LeaveQuizParser implements Parser\u003cLeaveQuizCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public LeaveQuizCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (userInput.trim().equals(\"quiz\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return new LeaveQuizCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LeaveQuizCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeying99": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_ORDER \u003d \"Sort order is not correctly specified.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!Title.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        String trimmedPriority \u003d priority.trim().toLowerCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (!Priority.isValid(trimmedPriority)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Priority newP \u003d Priority.identifyPriority(trimmedPriority);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return newP;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Parses a {@code String definition} into a {@code Definition}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static Definition parseDefinition(String definition) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireNonNull(definition);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String trimmedDefinition \u003d definition.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (!Definition.isValidDefinition(trimmedDefinition)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new ParseException(Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return new Definition(trimmedDefinition);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Parses String into sort order."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param sortOrder order in which the flashcard list is sorted."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @return String specifying the sort order."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @throws ParseException if the sort order is not correctly specified."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static String parseSortOrder(String sortOrder) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (sortOrder.equals(\"\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return \"asc\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String trimmedSortOrder \u003d sortOrder.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String lowerCaseSortOrder \u003d trimmedSortOrder.toLowerCase();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!(lowerCaseSortOrder.equals(\"asc\") || lowerCaseSortOrder.equals(\"desc\"))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SORT_ORDER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return lowerCaseSortOrder;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8,
      "mehak24k": 8,
      "CalistaIo": 19,
      "-": 108,
      "zeying99": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/QuizParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.AnswerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.EndAttemptCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.LeaveQuizCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.StartAttemptCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class QuizParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        case StartAttemptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return new StartAttemptCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        case AnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return new AnswerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        case EndAttemptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return new EndAttemptCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        case LeaveQuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            return new LeaveQuizParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 53,
      "CalistaIo": 10,
      "mehak24k": 2,
      "zeying99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            String sortOrder \u003d ParserUtil.parseSortOrder(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return new SortCommand(sortOrder);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartAttemptCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.commands.StartAttemptCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class StartAttemptCommandParser implements Parser\u003cStartAttemptCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public StartAttemptCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (userInput.trim().equals(\"attempt\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return new StartAttemptCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartAttemptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.person.UniqueFlashcardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashcard comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Adds a flashcard to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * The flashcard must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void addFlashcard(Flashcard p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        flashcards.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void flipFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        flashcards.flipFlashcard(target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Sorts flashcards."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void sortFlashcard(String sortOrder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        flashcards.sortFlashcards(sortOrder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                \u0026\u0026 flashcards.equals(((AddressBook) other).flashcards));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 18,
      "gan-jw": 21,
      "mehak24k": 3,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AttemptComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class AttemptComparator implements Comparator\u003cAttempt\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int compare(Attempt f1, Attempt f2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return f1.compareTo(f2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FlashcardComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class FlashcardComparator implements Comparator\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public int compare(Flashcard f1, Flashcard f2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return f1.compareTo(f2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARD \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * The flashcard must exist in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Flips the given flashcard."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * The flashcard must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @param target the flashcard to be flipped."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    void flipFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * {@code flashcard} must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /** Sorts the flashcard list. */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    void sortFilteredPersonList(String sortOrder);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /** Returns an boolean indicating whether the application is in quiz mode */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    boolean getIsQuizMode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /** Returns a boolean indicating whether a current quiz attempt is ongoing. */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    boolean hasCurrentAttempt();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /** Starts a new quiz attempt. */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    void startAttempt();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /** Ends a current quiz attempt. */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    void endAttempt();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /** Records a new response to current attempt. */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    void recordResponse(Response response);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /** Allows flipping the boolean isQuizMode in model */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    void flipQuizMode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /** Get QuizList */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuizList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /** Get AttemptList */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    ObservableList\u003cAttempt\u003e getAttemptList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /** Saves Performance in performance book **/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    void savePerformance() throws IOException;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "CalistaIo": 22,
      "gan-jw": 4,
      "mehak24k": 10,
      "-": 73,
      "zeying99": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.storage.PerformanceBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final ReadOnlyQuizBook readOnlyQuizBook \u003d SampleDataUtil.getSampleQuizBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final QuizBook quizBook \u003d new QuizBook(readOnlyQuizBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    // private final PerformanceBook performanceBook \u003d new PerformanceBook(SampleDataUtil.getSamplePerformance());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final PerformanceBook performanceBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e filteredQuizList \u003d this.quizBook.getQuestionList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    // private final ObservableList\u003cAttempt\u003e filteredAttemptList \u003d this.performanceBook.getPerformance().getAttempts();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final ObservableList\u003cAttempt\u003e filteredAttemptList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private boolean isQuizMode \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private boolean hasCurrentAttempt \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.addressBook.getFlashcardList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        PerformanceBook tempPerformanceBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            tempPerformanceBook \u003d new PerformanceBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            tempPerformanceBook \u003d PerformanceBook.createDefaultPerformanceBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performanceBook \u003d tempPerformanceBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        filteredAttemptList \u003d this.performanceBook.getPerformance().getAttempts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return addressBook.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        addressBook.removeFlashcard(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void flipFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        addressBook.flipFlashcard(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        addressBook.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_FLASHCARD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        addressBook.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void sortFilteredPersonList(String sortOrder) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        addressBook.sortFlashcard(sortOrder);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Question List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public boolean getIsQuizMode() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return this.isQuizMode;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public void flipQuizMode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.isQuizMode \u003d !isQuizMode;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public boolean hasCurrentAttempt() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return this.hasCurrentAttempt;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void startAttempt() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.hasCurrentAttempt \u003d true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizBook.startAttempt();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void endAttempt() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.hasCurrentAttempt \u003d false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Attempt currentAttempt \u003d quizBook.endAttempt();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            performanceBook.saveAttempt(currentAttempt);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            logger.warning(\"Error here.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void recordResponse(Response response) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        quizBook.recordResponse(response);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return this.filteredQuizList;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ObservableList\u003cAttempt\u003e getAttemptList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return this.filteredAttemptList;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Saves performance in performance book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void savePerformance() throws IOException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performanceBook.savePerformance();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 6,
      "CalistaIo": 48,
      "gan-jw": 11,
      "mehak24k": 18,
      "-": 134,
      "zeying99": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/QuestionComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class QuestionComparator implements Comparator\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int compare(Question f1, Question f2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return f1.compareTo(f2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/QuizBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.UniqueQuestionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Duplicates are not allowed (by .isSameQuestion comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class QuizBook implements ReadOnlyQuizBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final UniqueQuestionList questions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Attempt currentAttempt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        questions \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public QuizBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Creates a QuizBook using the Questions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public QuizBook(ReadOnlyQuizBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    //// quiz methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Starts a new quiz attempt."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void startAttempt() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.currentAttempt \u003d new Attempt();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Ends a current quiz attempt."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Attempt endAttempt() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Attempt tempAttempt \u003d this.currentAttempt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.currentAttempt \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return tempAttempt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Records a new response to current quiz attempt."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void recordResponse(Response response) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.currentAttempt.addResponse(response);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Replaces the contents of the question list with {@code questions}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.questions.setQuestions(questions);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Resets the existing data of this {@code QuizBook} with {@code newData}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void resetData(ReadOnlyQuizBook newData) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        setQuestions(newData.getQuestionList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //// question-level operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if a question with the same identity as {@code question} exists in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return questions.contains(question);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Adds a question to the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question must not already exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void addQuestion(Question p) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        questions.add(p);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Replaces the given question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question identity of {@code editedQuestion} must not be the same as another existing question"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        questions.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Removes {@code key} from this {@code QuizBook}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void removeQuestion(Question key) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        questions.remove(key);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //    public void flipQuestion(Question target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        questions.flipQuestion(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sorts questions."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void sortQuestion(String sortOrder) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        questions.sortQuestions(sortOrder);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return questions.asUnmodifiableObservableList().size() + \" questions\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return questions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof QuizBook // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 questions.equals(((QuizBook) other).questions));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return questions.hashCode();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 132,
      "mehak24k": 11,
      "gan-jw": 8,
      "CalistaIo": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "gan-jw": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyQuizBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Unmodifiable view of a quiz book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public interface ReadOnlyQuizBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns an unmodifiable view of the quiz questions list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * This list will not contain any duplicate questions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"DSAce.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContainsAllKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class ContainsAllKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final List\u003cPredicate\u003cFlashcard\u003e\u003e predicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ContainsAllKeywordsPredicate(List\u003cPredicate\u003cFlashcard\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .allMatch(predicate -\u003e predicate.test(flashcard));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof ContainsAllKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 predicates.equals(((ContainsAllKeywordsPredicate) other).predicates)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Definition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Represents a Flashcard\u0027s definition in the flashcard book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDefinition(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class Definition {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Definitions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Constructs a {@code Definition}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @param definition A valid definition."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public Definition(String definition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireNonNull(definition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        checkArgument(isValidDefinition(definition), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        value \u003d definition;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Constructs an empty {@code Definition}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public Definition() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Returns true if a given string is a valid definition."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static boolean isValidDefinition(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                || (other instanceof Definition // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                \u0026\u0026 value.equals(((Definition) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 21,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a Flashcard\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a Flashcard in the flashcard folder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class Flashcard implements Comparable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final Definition definition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Definition visibleDefinition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public Flashcard(Title title, Definition definition, Set\u003cTag\u003e tags, Priority priority) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        requireAllNonNull(title, definition, tags, priority);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.visibleDefinition \u003d new Definition();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public Definition getDefinition() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return definition;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public Definition getVisibleDefinition() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return visibleDefinition;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if both flashcards of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Switches between an empty \"hidden\" displayed definition and the full definition of the flashcard."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void toggleDefinition() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (this.visibleDefinition.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            this.visibleDefinition \u003d this.definition;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            this.visibleDefinition \u003d new Definition();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return otherFlashcard.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                \u0026\u0026 otherFlashcard.getDefinition().equals(getDefinition())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                \u0026\u0026 otherFlashcard.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return Objects.hash(title, definition, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                .append(\" Definition: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .append(getDefinition())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public int compareTo(Flashcard other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return this.priority.compareTo(other.priority);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 11,
      "CalistaIo": 12,
      "mehak24k": 23,
      "-": 72,
      "zeying99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public NameContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(flashcard.getTitle().fullTitle, keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 keyword.equals(((NameContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8,
      "CalistaIo": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a Flashcard\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zeying99"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": " * Represents the priority level of a Flashcard in the flashcard folder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    LOW(\"low\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    MEDIUM(\"medium\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    HIGH(\"high\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    NULL(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            \"Flashcard can only be labelled as high, medium and low priority\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public final String priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    Priority(String priority) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.priority \u003d priority.toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * This is a static"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static boolean isValid(String priority) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return priority.equals(\"low\") || priority.equals(\"medium\") || priority.equals(\"high\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * This is a static method to create a Priority with string parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * If the string input is not low/medium/high, the priority will be set to Priority.NULL,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * which means there is no priority order for this flashcard"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * @param priority String to indicate priority level"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * @return a Priority object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static Priority identifyPriority(String priority) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        Priority priorityEnum \u003d Priority.NULL;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        if (priority.equals(\"low\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            priorityEnum \u003d Priority.LOW;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } else if (priority.equals(\"medium\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            priorityEnum \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        } else if (priority.equals(\"high\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            priorityEnum \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return priorityEnum;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zeying99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PriorityContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Name} matches any of the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class PriorityContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public PriorityContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return StringUtil.containsWordIgnoreCase(flashcard.getPriority().toString(), keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof PriorityContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 keyword.equals(((PriorityContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Name} matches any of the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public TagContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return flashcard.getTags().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(keyword, tag.tagName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 keyword.equals(((TagContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a Flashcard\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        checkArgument(isValidName(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 11,
      "CalistaIo": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueFlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.FlashcardComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.person.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * As such, adding and updating of persons uses Flashcard#isSameFlashcard(Flashcard) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * that the flashcard being added or updated is unique in terms of identity in the UniquePersonList. However, the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * removal of a flashcard uses Flashcard#equals(Object) so as to ensure that the flashcard with exactly the same"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Flips a flashcard to show or hide the definition."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @param toFlip flashcard to be flipped."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void flipFlashcard(Flashcard toFlip) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        requireNonNull(toFlip);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        int index \u003d internalList.indexOf(toFlip);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        internalList.get(index).toggleDefinition();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        internalList.set(index, toFlip);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Sorts the flashcard list in either ascending or descending order."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param sortOrder order in which the flashcard list is sorted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void sortFlashcards(String sortOrder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        FlashcardComparator flashcardComparator \u003d new FlashcardComparator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (sortOrder.equals(\"desc\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            FXCollections.sort(internalList, flashcardComparator.reversed());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            FXCollections.sort(internalList, flashcardComparator);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 30,
      "gan-jw": 31,
      "mehak24k": 16,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Attempt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Represents a record of user\u0027s responses to the respective questions within a quiz attempt."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class Attempt implements Comparable\u003cAttempt\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private ArrayList\u003cResponse\u003e responses;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private LocalDateTime timestamp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Constructor of Attempt"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public Attempt() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (this.responses \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            this.responses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.timestamp \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Constructs Attempt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Attempt(ArrayList\u003cResponse\u003e responses, LocalDateTime timestamp) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.responses \u003d responses;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Adds a response to current attempt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * If response to question already exists, replace previous response."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @param newResponse Response to add."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void addResponse(Response newResponse) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Question qn \u003d newResponse.getQuestion();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Iterator\u003cResponse\u003e itr \u003d responses.iterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            Response oldResponse \u003d itr.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            if (qn.isSameQuestion(oldResponse.getQuestion())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                itr.remove();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        responses.add(newResponse);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Calculates the total score of attempt based on number of correct responses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @return value representing the score"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public int calculateScore() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Iterator\u003cResponse\u003e itr \u003d responses.iterator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            Response response \u003d itr.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            if (response.getIsCorrect()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                score +\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns a more detailed attempt analysis."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String attemptAnalysis() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        int totalScore \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ArrayList\u003cString\u003e wrongResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Iterator\u003cResponse\u003e itr \u003d responses.iterator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            Response response \u003d itr.next();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            if (response.getIsCorrect()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                totalScore +\u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                String wrongQuestion \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                wrongQuestion +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                wrongQuestion +\u003d \"Question: \" + response.getQuestion().getQuestion();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                wrongQuestion +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                wrongQuestion +\u003d \"Your response: \" + response.getResponse();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                wrongResponses.add(wrongQuestion);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String formattedAnalysis \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        formattedAnalysis +\u003d \"Out of \" + getNumOfResponses() + \" responses, You got \" + totalScore + \" responses \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                + \"correct.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        formattedAnalysis +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        formattedAnalysis +\u003d \"Wrong questions: \" + System.lineSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (String wrongResponse : wrongResponses) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            formattedAnalysis +\u003d wrongResponse + System.lineSeparator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return formattedAnalysis;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public LocalDateTime getTimestamp() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return this.timestamp;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public int getNumOfResponses() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return responses.size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public ArrayList\u003cResponse\u003e getResponses() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return responses;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if both attempts of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * This defines a weaker notion of equality between two questions."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean isSameAttempt(Attempt otherAttempt) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (otherAttempt \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return otherAttempt !\u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 otherAttempt.getTimestamp().equals(getTimestamp());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int compareTo(Attempt f2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return timestamp.compareTo(f2.getTimestamp());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 17,
      "gan-jw": 63,
      "CalistaIo": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Mcq.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.exceptions.InvalidQuestionAnswerException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a MCQ question. It is assumed that the options are numerically indexed, starting from 1."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class Mcq extends Question {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private int answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private List\u003cString\u003e options;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public Mcq(String prompt, Integer answer, List\u003cString\u003e options) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        super(prompt);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireAllNonNull(prompt, answer, options);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assert(isValidResponse(answer));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public int getAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public List\u003cString\u003e getOptions() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return options;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the question prompt and options, represented in an appropriate String format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String question \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        question +\u003d prompt + \" Options: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (int i \u003d 0; i \u003c options.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            question +\u003d Integer.toString(i + 1) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            question +\u003d options.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            if (i \u003c options.size() - 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                question +\u003d \", \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Checks whether the attempt is a valid option."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean isValidResponse(int attempt) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return (attempt \u003e\u003d 1) \u0026\u0026 (attempt \u003c\u003d options.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Checks whether the response is correct."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param response user response"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @return true if the response is correct and false otherwise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @throws InvalidQuestionAnswerException if the response is not valid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public boolean checkResponse(String response) throws InvalidQuestionAnswerException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            int attempt \u003d Integer.parseInt(response);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            if (!isValidResponse(attempt)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                throw new InvalidQuestionAnswerException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    \"Response is not a valid option. Please enter integer number in the range of 1 to option size\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return attempt \u003d\u003d answer;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new InvalidQuestionAnswerException(\"Response is not a valid option.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int compareTo(Question f2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return prompt.compareTo(f2.prompt);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (other instanceof Mcq) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            Mcq mcq \u003d (Mcq) (other);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            boolean isEqual \u003d (mcq.prompt.equals(prompt)) \u0026\u0026 (mcq.answer \u003d\u003d answer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            for (int i \u003d 0; i \u003c options.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                if (!options.get(i).equals(mcq.options.get(i))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                    isEqual \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return isEqual;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return Objects.hash(prompt, answer, options);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return getQuestion();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean isMcq() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 10,
      "CalistaIo": 98,
      "gan-jw": 5,
      "zeying99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Performance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Represents a history of past attempts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class Performance {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private UniqueAttemptList attempts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Constructor of Performance called when no past attempts exists"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public Performance() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.attempts \u003d new UniqueAttemptList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Constructor of Performance called when local cache of attempts exists"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public Performance(UniqueAttemptList attempts) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireNonNull(attempts);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void addAttempt(Attempt attempt) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        attempts.add(attempt);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ObservableList\u003cAttempt\u003e getAttempts() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return attempts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Calculates statistics of all past attempts."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @return string representing statistics of all attempts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String getStatistics() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Iterator\u003cAttempt\u003e itr \u003d attempts.iterator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            Attempt attempt \u003d itr.next();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            res +\u003d String.format(\"Attempt recorded at: %s\\n\", getFormattedTimestamp(attempt.getTimestamp()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            int score \u003d attempt.calculateScore();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            int numOfResp \u003d attempt.getNumOfResponses();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            res +\u003d String.format(\"%d/%d\\n\", score, numOfResp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Converts timestamp to formatted string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @param timestamp LocalDateTime object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @return string representing formatted timestamp"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private String getFormattedTimestamp(LocalDateTime timestamp) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return dtf.format(timestamp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8,
      "gan-jw": 53,
      "CalistaIo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.exceptions.InvalidQuestionAnswerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a question in a quiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public abstract class Question implements Comparable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Prompts can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public final String prompt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Question(String prompt) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(prompt);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        checkArgument(isValidPrompt(prompt), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.prompt \u003d prompt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if a given string is a valid prompt."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static boolean isValidPrompt(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return prompt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the question prompt and options, represented in an appropriate String format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public abstract String getQuestion();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Checks whether the response is correct."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param response user response"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @return true if the response is correct and false otherwise"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @throws InvalidQuestionAnswerException if the response is not valid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public abstract boolean checkResponse(String response) throws InvalidQuestionAnswerException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public abstract int compareTo(Question f2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if both questions of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * This defines a weaker notion of equality between two questions."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean isSameQuestion(Question otherQuestion) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (otherQuestion \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return otherQuestion !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 otherQuestion.getPrompt().equals(getPrompt());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns true if Question is MCQ question, other wise returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public abstract boolean isMcq();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 31,
      "CalistaIo": 38,
      "gan-jw": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Response.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.exceptions.InvalidQuestionAnswerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Represents a response to a question in a quiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private boolean isCorrect \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public Response(String response, Question question) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        requireAllNonNull(response, question);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Response(String response, Question question, boolean isCorrect) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireAllNonNull(response, question, isCorrect);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @throws InvalidQuestionAnswerException if the response is not valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void markResponse() throws InvalidQuestionAnswerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.isCorrect \u003d question.checkResponse(response);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public boolean getIsCorrect() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return this.isCorrect;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return this.response;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 41,
      "CalistaIo": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/TrueFalse.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.exceptions.InvalidQuestionAnswerException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Represents a True/False question. This question has only two valid options: true and false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class TrueFalse extends Question {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final ArrayList\u003cString\u003e OPTIONS \u003d new ArrayList\u003c\u003e(Arrays.asList(\"True\", \"False\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private boolean answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public TrueFalse(String prompt, Boolean answer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        super(prompt);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean getAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the question prompt and options, represented in an appropriate String format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String question \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        question +\u003d prompt + \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        question +\u003d \"True or False?\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Checks whether the attempt is a valid option."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean isValidResponse(String attempt) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String formattedAttempt \u003d attempt.toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return (formattedAttempt.equals(\"true\")) || (formattedAttempt.equals(\"false\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Checks whether the response is correct."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param response user response"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @return true if the response is correct and false otherwise"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "     * @throws InvalidQuestionAnswerException if the response is not valid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public boolean checkResponse(String response) throws InvalidQuestionAnswerException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!isValidResponse(response)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new InvalidQuestionAnswerException(\"Response is not a valid option.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String formattedResponse \u003d response.toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (formattedResponse.equals(\"true\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return answer;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return !answer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int compareTo(Question f2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return prompt.compareTo(f2.prompt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (other instanceof TrueFalse) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            TrueFalse trueFalse \u003d (TrueFalse) (other);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return trueFalse.prompt.equals(prompt) \u0026\u0026 (trueFalse.answer \u003d\u003d answer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return Objects.hash(prompt, answer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return getQuestion();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public boolean isMcq() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 6,
      "CalistaIo": 84,
      "mehak24k": 4,
      "gan-jw": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/UniqueAttemptList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.AttemptComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.exceptions.AttemptNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.exceptions.DuplicateAttemptException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * A list of questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * A question is considered unique by comparing using {@code Attempt#isSameAttempt(Attempt)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * As such, adding and updating of persons uses Attempt#isSameAttempt(Attempt) for equality so as to ensure"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * that the question being added or updated is unique in terms of identity in the UniquePersonList. However, the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * removal of a question uses Attempt#equals(Object) so as to ensure that the question with exactly the same"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * @see Attempt#isSameAttempt(Attempt)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class UniqueAttemptList implements Iterable\u003cAttempt\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final ObservableList\u003cAttempt\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final ObservableList\u003cAttempt\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean contains(Attempt toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAttempt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Adds a question to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void add(Attempt toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new DuplicateAttemptException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code editedAttempt}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question identity of {@code editedAttempt} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setAttempt(Attempt target, Attempt editedAttempt) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireAllNonNull(target, editedAttempt);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new AttemptNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!target.isSameAttempt(editedAttempt) \u0026\u0026 contains(editedAttempt)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new DuplicateAttemptException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.set(index, editedAttempt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Removes the equivalent question from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void remove(Attempt toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new AttemptNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setAttempts(UniqueAttemptList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Replaces the contents of this list with {@code questions}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setAttempts(List\u003cAttempt\u003e questions) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireAllNonNull(questions);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!questionsAreUnique(questions)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new DuplicateAttemptException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.setAll(questions);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sorts the question list in either ascending or descending order."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * @param sortOrder order in which the question list is sorted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void sortAttempts(String sortOrder) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        AttemptComparator flashcardComparator \u003d new AttemptComparator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (sortOrder.equals(\"desc\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            FXCollections.sort(internalList, flashcardComparator.reversed());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            FXCollections.sort(internalList, flashcardComparator);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ObservableList\u003cAttempt\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public Iterator\u003cAttempt\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof UniqueAttemptList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAttemptList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if {@code questions} contains only unique questions."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private boolean questionsAreUnique(List\u003cAttempt\u003e questions) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questions.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                if (questions.get(i).isSameAttempt(questions.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/UniqueQuestionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.QuestionComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * A list of questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * A question is considered unique by comparing using {@code Question#isSameQuestion(Question)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * As such, adding and updating of persons uses Question#isSameQuestion(Question) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * that the question being added or updated is unique in terms of identity in the UniquePersonList. However, the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * removal of a question uses Question#equals(Object) so as to ensure that the question with exactly the same"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * @see Question#isSameQuestion(Question)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class UniqueQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameQuestion);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Adds a question to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void add(Question toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question identity of {@code editedQuestion} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!target.isSameQuestion(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.set(index, editedQuestion);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Removes the equivalent question from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * The question must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void remove(Question toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //TODO:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //     * Flips a question to show or hide the answer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //     * @param toFlip question to be flipped."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //    public void flipQuestion(Question toFlip) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        requireNonNull(toFlip);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        int index \u003d internalList.indexOf(toFlip);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        internalList.get(index).toggleDefinition();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //        internalList.set(index, toFlip);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    //      }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions(UniqueQuestionList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Replaces the contents of this list with {@code questions}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        requireAllNonNull(questions);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!questionsAreUnique(questions)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        internalList.setAll(questions);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sorts the question list in either ascending or descending order."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * @param sortOrder order in which the question list is sorted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void sortQuestions(String sortOrder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        QuestionComparator flashcardComparator \u003d new QuestionComparator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (sortOrder.equals(\"desc\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            FXCollections.sort(internalList, flashcardComparator.reversed());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            FXCollections.sort(internalList, flashcardComparator);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                || (other instanceof UniqueQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueQuestionList) other).internalList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if {@code questions} contains only unique questions."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private boolean questionsAreUnique(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size() - 1; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questions.size(); j++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                if (questions.get(i).isSameQuestion(questions.get(j))) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/AttemptNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class AttemptNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/DuplicateAttemptException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Signals that the operation will result in duplicate Questions (Questions are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class DuplicateAttemptException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public DuplicateAttemptException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        super(\"Operation would result in duplicate attempts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/DuplicateQuestionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Signals that the operation will result in duplicate Questions (Questions are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        super(\"Operation would result in duplicate questions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 10,
      "gan-jw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/InvalidQuestionAnswerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Signals that an answer for a particular question is not a valid option."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class InvalidQuestionAnswerException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public InvalidQuestionAnswerException(String mesg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        super(mesg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/QuestionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 5,
      "gan-jw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.QuizBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.ReadOnlyQuizBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Mcq;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Performance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.TrueFalse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static Flashcard[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new Flashcard[]{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            new Flashcard(new Title(\"Quicksort\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new Definition(\"Picks a pivot element A[q] and partitions the array into two subarrays:\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" A[p, ..., q - 1] in which all elements are less than A[q], and A[q + 1, ..., r]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" in which all elements are greater than or equal to A[q]. The algorithm then sorts\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" the subarrays A[p, ..., q - 1] and A[q + 1, ..., r] recursively until the entire\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \"array is sorted.\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                getTagSet(\"sorting\"), Priority.LOW),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            new Flashcard(new Title(\"Breadth first search\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new Definition(\"Visits all vertices in graph G that are k edges away from source vertex\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" s before visiting any vertex k + 1 edges away. Algorithm repeats until no more\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" vertices can be reached from s.\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                getTagSet(\"searching\"), Priority.HIGH),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            new Flashcard(new Title(\"Chaining\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new Definition(\"Technique for avoiding collisions in hash tables. The hash table is an array of\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" linked lists and all key-value pairs mapping to the same index will be stored \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \"in linked list  of that index.\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                getTagSet(\"hashing\"), Priority.LOW),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            new Flashcard(new Title(\"Heap\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new Definition(\"Data structure that is usually implemented with an array, and can be thought of\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" as a tree. The root of the heap is the topmost element, and a leaf is a node at the\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \" bottom of the tree. In a max-heap, the parent node has a value that is greater \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \"than or equal to that of its children, whereas in a min-heap, the parent node has \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    + \"a value that is less than or equal to that of its children.\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                getTagSet(\"heaps\"), Priority.MEDIUM)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (Flashcard sampleFlashcard : getSamplePersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            sampleAb.addFlashcard(sampleFlashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static Question[] getSampleQuestions() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new Question[]{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new TrueFalse(\"G is a weighted, undirected graph, and u is a node in the graph. \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \"Edge (u, v) is the edge adjacent to u with the smallest weight. Then some\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \" minimum spanning tree of G contains edge (u, v)\", true),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new TrueFalse(\"Given an array sorted from smallest to largest, we can build a min-heap\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \" (i.e, a heap where the smallest element is at the root) in time \u003c\u003d O(logn)\", true),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new TrueFalse(\"Assume you have a graph with no positive weight cycles. Then you can find the \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \"longest path in the graph by negating all the edge weights \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \"and running Dijkstra\u0027s algorithm\", false),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new TrueFalse(\"Every directed acyclic graph has exactly one valid topological ordering\", false),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new TrueFalse(\"The sequence [20, 15, 18, 7, 9, 5, 12, 3, 6, 2] is a max-heap\", true),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"The maximum number of rotations necessary to rebalance an AVL tree \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \"containing n elements during the insertion of a new item is:\", 3,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"0\", \"1\", \"2\", \"3\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"Assume that [19, 7, 8, 1, 16, 25, 62, 47, 80] was just partitioned by\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \" a Quicksort partitioning algorithm. Which option is a possible pivot?\", 4,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"19\", \"8\", \"16\", \"25\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"Which of the following is a good loop invariant for the outer loop in InsertionSort?\", 1,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"For all k such that k \u003c i: A[k] \u003c\u003d A[k+1]\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                        \"For all k such that j \u003c k \u003c i: A[k] \u003c\u003d A[i]\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                        \"The subarray A[0..i] contains the i+1 smallest elements in the array\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                        \"The subarray A[0..i-1] contains the i smallest elements in the array\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"Assume that comparing two strings of length k1 and k2 takes min(k1, k2) time. \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \"The worst-case running time for inserting a string of length L into an AVL tree of size n \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                    + \"where all the keys in the tree have length L is: \", 4,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"O(1)\", \"O(L)\", \"O(nlogn)\", \"O(Llogn)\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"What is the time complexity of Bubble Sort?\", 4,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"What is the time complexity of Selection Sort?\", 4,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"What is the time complexity of Insertion Sort?\", 4,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\")),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Mcq(\"What is the time complexity of Merge Sort?\", 3,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                     Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\"))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        };"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static ReadOnlyQuizBook getSampleQuizBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        QuizBook sampleQb \u003d new QuizBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (Question sampleQuestion : getSampleQuestions()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            sampleQb.addQuestion(sampleQuestion);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return sampleQb;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static Attempt[] getSampleAttempts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ArrayList\u003cResponse\u003e sampleResponses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (Question sampleQ : getSampleQuestions()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            sampleResponses.add(new Response(\"example\", sampleQ, true));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new Attempt[]{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new Attempt(sampleResponses, LocalDateTime.now())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        };"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static Performance getSamplePerformance() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Performance sampleP \u003d new Performance();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (Attempt sampleAttempt : getSampleAttempts()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            sampleP.addAttempt(sampleAttempt);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return sampleP;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 75,
      "mehak24k": 1,
      "CalistaIo": 4,
      "gan-jw": 1,
      "-": 32,
      "zeying99": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AttemptComposer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class AttemptComposer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Composes Attempt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String composeAttempt(Attempt attempt) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String composedAttempt \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedAttempt +\u003d getFormattedTimestamp(attempt.getTimestamp());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedAttempt +\u003d \"####\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ResponseComposer responseComposer \u003d new ResponseComposer();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ArrayList\u003cResponse\u003e responses \u003d attempt.getResponses();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (int i \u003d 0; i \u003c responses.size() - 1; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedAttempt +\u003d responseComposer.composeResponse(responses.get(i));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedAttempt +\u003d \"|\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (responses.size() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedAttempt +\u003d responseComposer.composeResponse(responses.get(responses.size() - 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return composedAttempt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Converts timestamp to formatted string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @param timestamp LocalDateTime object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @return string representing formatted timestamp"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private String getFormattedTimestamp(LocalDateTime timestamp) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return dtf.format(timestamp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AttemptParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class AttemptParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Parses Attempt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Attempt parseAttempt(String attempt) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String[] userArguments \u003d attempt.split(\"####\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String stringTime \u003d userArguments[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(stringTime, formatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String stringResponses \u003d userArguments[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ArrayList\u003cResponse\u003e responses \u003d new ResponseParser().parseResponses(stringResponses);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new Attempt(responses, dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final String definition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"title\") String tile,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                                @JsonProperty(\"definition\") String definition,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                                @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.title \u003d tile;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        definition \u003d source.getDefinition().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!Title.isValidName(title)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        final Title modelName \u003d new Title(title);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (definition \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    Definition.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (!Definition.isValidDefinition(definition)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new IllegalValueException(Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        final Definition modelDefinition \u003d new Definition(definition);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        final Priority priorityEnum \u003d Priority.identifyPriority(priority);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return new Flashcard(modelName, modelDefinition, modelTags, priorityEnum);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 9,
      "mehak24k": 14,
      "CalistaIo": 10,
      "-": 54,
      "zeying99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // Json file is read here"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        FileUtil.createIfMissing(filePath); // save to Json file here"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcard list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream().map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedPerson : flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            if (addressBook.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            addressBook.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "gan-jw": 2,
      "-": 49,
      "zeying99": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PerformanceBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Performance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class PerformanceBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private static final String performanceFilePath \u003d \"data/performance.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private Performance performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private PerformanceStorage performanceStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates performance book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public PerformanceBook() throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performanceStorage \u003d new PerformanceStorage(performanceFilePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performance \u003d performanceStorage.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates performance book using given performance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public PerformanceBook(Performance performance) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performanceStorage \u003d new PerformanceStorage(performanceFilePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static PerformanceBook createDefaultPerformanceBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new PerformanceBook(new Performance());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Saves new attempt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void saveAttempt(Attempt attempt) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performance.addAttempt(attempt);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performanceStorage.save(performance);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void savePerformance() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        performanceStorage.save(performance);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Performance getPerformance() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PerformanceStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Performance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class PerformanceStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public PerformanceStorage(String filepath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Loads Performance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Performance load() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Performance performance \u003d new Performance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            Attempt attempt \u003d new AttemptParser().parseAttempt(scanner.nextLine());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            performance.addAttempt(attempt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Saves performance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void save(Performance performance) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        new FileWriter(file, false).close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        FileWriter filewriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String composedAttempt \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (Attempt attempt : performance.getAttempts()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedAttempt \u003d new AttemptComposer().composeAttempt(attempt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedAttempt +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            filewriter.write(composedAttempt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        filewriter.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates file if not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public void createFile() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        File file \u003d new File(filepath.substring(0, filepath.lastIndexOf(\"/\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            file.mkdirs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/QuestionComposer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Mcq;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.TrueFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class QuestionComposer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Composes a Question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String composeQuestion(Question question) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String composedQuestion \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (question.isMcq()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            Mcq multipleChoice \u003d (Mcq) (question);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d multipleChoice.getPrompt();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d \"##\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d multipleChoice.getAnswer();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d \"##\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            List\u003cString\u003e options \u003d multipleChoice.getOptions();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            for (int i \u003d 0; i \u003c options.size() - 1; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                composedQuestion +\u003d options.get(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                composedQuestion +\u003d \"#\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            if (options.size() \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                composedQuestion +\u003d options.get(options.size() - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return composedQuestion;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            TrueFalse trueFalse \u003d (TrueFalse) (question);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d trueFalse.getPrompt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d \"##\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            composedQuestion +\u003d trueFalse.getAnswer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return composedQuestion;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/QuestionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Mcq;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.TrueFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class QuestionParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Parses a Question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Question parseQuestion(String stringQuestion) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String[] questionFields \u003d stringQuestion.split(\"##\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String prompt \u003d questionFields[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        if (questionFields.length \u003e 2) { // for MCQ"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            int answer \u003d Integer.parseInt(questionFields[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            String[] options \u003d questionFields[2].split(\"#\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            ArrayList\u003cString\u003e optionsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            for (String option : options) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                optionsList.add(option);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return new Mcq(prompt, answer, optionsList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            boolean answer \u003d questionFields[1].equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return new TrueFalse(prompt, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ResponseComposer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class ResponseComposer {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Composes a Response."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public String composeResponse(Response response) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String composedResponse \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedResponse +\u003d response.getResponse();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedResponse +\u003d \"###\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedResponse +\u003d response.getIsCorrect();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedResponse +\u003d \"###\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        QuestionComposer questionComposer \u003d new QuestionComposer();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        composedResponse +\u003d questionComposer.composeQuestion(response.getQuestion());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return composedResponse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ResponseParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class ResponseParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns list of responses"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public ArrayList\u003cResponse\u003e parseResponses(String stringResponse) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String[] stringResponses \u003d stringResponse.split(\"\\\\|\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ArrayList\u003cResponse\u003e responses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (String s : stringResponses) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            responses.add(parseResponseFields(s));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return responses;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private Response parseResponseFields(String stringResponse) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String[] responseFields \u003d stringResponse.split(\"###\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String response \u003d responseFields[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        boolean isCorrect \u003d responseFields[1].equals(\"true\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Question question \u003d new QuestionParser().parseQuestion(responseFields[2]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return new Response(response, question, isCorrect);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttemptCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * An UI component that displays information of a {@code Attempt}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class AttemptCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private static final String FXML \u003d \"AttemptListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public final Attempt attempt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Label attemptDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Label score;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Attempt} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public AttemptCard(Attempt attempt, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.attempt \u003d attempt;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        attemptDate.setText(attempt.getTimestamp().toLocalDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // score.setText(Integer.toString(attempt.calculateScore()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        score.setText(attempt.attemptAnalysis());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        //        priority.setText(\"Priority: \" + attempt.getPriority().priority);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        //        attempt.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        //                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        //                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!(other instanceof AttemptCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        AttemptCard card \u003d (AttemptCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u0026\u0026 attempt.equals(card.attempt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 73,
      "CalistaIo": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttemptListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class AttemptListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private static final String FXML \u003d \"AttemptListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttemptListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private ListView\u003cAttempt\u003e attemptListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Creates a {@code AttemptListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public AttemptListPanel(ObservableList\u003cAttempt\u003e flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        attemptListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        attemptListView.setCellFactory(listView -\u003e new AttemptListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Attempt} using a {@code AttemptCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    class AttemptListViewCell extends ListCell\u003cAttempt\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        protected void updateItem(Attempt flashcard, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                setGraphic(new AttemptCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final Stack\u003cString\u003e commandHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final Stack\u003cString\u003e commandFuture \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        setListener();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        commandHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            commandFuture.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private void setListener() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        commandTextField.setOnKeyPressed(keyEvent -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            if (keyEvent.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                setText(getForwardCommand());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            if (keyEvent.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                setText(getPreviousCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private String getPreviousCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (commandHistory.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return commandTextField.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            if (commandTextField.getText() !\u003d \"\") {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                commandFuture.add(commandTextField.getText());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return commandHistory.pop();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private String getForwardCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (commandFuture.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            if (commandTextField.getText() !\u003d \"\") {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                commandHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return commandFuture.pop();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Set commandTextField with userInput"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private void setText(String command) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        commandTextField.setText(command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 50,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \"https://github.com/AY2021S1-CS2103-T14-2/tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private PerformanceWindow performanceWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private QuizListPanel quizListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private StackPane quizListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        primaryStage.setTitle(\"DSAce\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        performanceWindow \u003d new PerformanceWindow(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.commandBox \u003d commandBox;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().lookup(\"#quizList\").setVisible(false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().lookup(\"#quizList\").setManaged(false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Opens the performance window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void handlePerformance() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (!performanceWindow.isShowing()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            performanceWindow.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            performanceWindow.focus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Switches to quiz settings."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void handleQuiz() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        personListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        personListPanelPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // TODO: Implement QuizList to display questions"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        quizListPanel \u003d new QuizListPanel(logic.getQuizList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.getChildren().add(quizListPanel.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.setManaged(true);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().lookup(\"#quizList\").setVisible(true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().lookup(\"#quizList\").setManaged(true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().getStylesheets().remove(\"/view/DarkTheme.css\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(\"/view/LightTheme.css\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Switches to flashcard settings."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void handleExitQuiz() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // TODO: Implement QuizList to display questions and hide them when switching back"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListPanelPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().lookup(\"#quizList\").setVisible(false);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().lookup(\"#quizList\").setManaged(false);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        personListPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        personListPanelPlaceholder.setManaged(true);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().getStylesheets().remove(\"/view/LightTheme.css\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(\"/view/DarkTheme.css\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        performanceWindow.hide();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            if (commandResult.isShowPerformance()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                handlePerformance();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            if (commandResult.isSwitchToQuiz()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                handleQuiz();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            if (commandResult.isSwitchToFlashcards()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                handleExitQuiz();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 22,
      "mehak24k": 52,
      "-": 196,
      "zeying99": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class PerformanceWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private static final String FXML \u003d \"PerformanceWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Stage root;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private AttemptListPanel attemptListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private StackPane attemptListPanelPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public PerformanceWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.root \u003d root;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Creates a new PerformanceWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public PerformanceWindow(Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        attemptListPanel \u003d new AttemptListPanel(logic.getAttemptList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        attemptListPanelPlaceholder.getChildren().add(attemptListPanel.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        root.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        root.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            root.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            root.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        logger.fine(\"Showing performance page\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Label definition;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public PersonCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        name.setText(flashcard.getTitle().fullTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        definition.setText(flashcard.getVisibleDefinition().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        priority.setText(\"Priority: \" + flashcard.getPriority().priority);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        flashcard.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "CalistaIo": 8,
      "mehak24k": 2,
      "-": 61,
      "zeying99": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private ListView\u003cFlashcard\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public PersonListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        personListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                setGraphic(new PersonCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 10,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.quiz.Mcq;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.quiz.TrueFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class QuizCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private static final String FXML \u003d \"QuizListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Label prompt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private FlowPane options;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Flashcard} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public QuizCard(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        prompt.setText(question.getPrompt());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (question instanceof Mcq) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            Mcq mcqQuestion \u003d (Mcq) question;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            AtomicInteger counter \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            mcqQuestion.getOptions().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    .forEach(option -\u003e options.getChildren().add(new Label(\"Option \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                        + counter.getAndIncrement() + \" : \" + option)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            TrueFalse.OPTIONS.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    .forEach(option -\u003e options.getChildren().add(new Label(option)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        if (!(other instanceof QuizCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        QuizCard card \u003d (QuizCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 72,
      "zeying99": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class QuizListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private static final String FXML \u003d \"QuizListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private ListView\u003cQuestion\u003e quizListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public QuizListPanel(ObservableList\u003cQuestion\u003e quizList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListView.setItems(quizList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        quizListView.setCellFactory(listView -\u003e new QuizListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    class QuizListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                setGraphic(new QuizCard(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/flashcard_icon1.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/AttemptListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cLabel fx:id\u003d\"attemptDate\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003c!--FlowPane fx:id\u003d\"tags\" /--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "      \u003cLabel fx:id\u003d\"score\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$score\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003c!--Label fx:id\u003d\"definition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$definition\" wrapText\u003d\"true\"/--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 34,
      "CalistaIo": 1
    }
  },
  {
    "path": "src/main/resources/view/AttemptListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003cListView fx:id\u003d\"attemptListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     -fx-background-color: derive(#2d2e6b, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1e4a, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent #1a115e transparent #1a115e;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-color: #1a115e #1a115e #ffffff #1a115e;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: transparent, #473778, transparent, #473778;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#options {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "#options .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-color: #7f368f;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 352
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Performance\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"performanceMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handlePerformance\" text\u003d\"Performance\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        \u003cVBox fx:id\u003d\"flashcardList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        \u003cVBox fx:id\u003d\"quizList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "          \u003cStackPane fx:id\u003d\"quizListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "CalistaIo": 1,
      "mehak24k": 7,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/PerformanceWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "         title\u003d\"Performance\" minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cVBox fx:id\u003d\"attemptList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "          \u003cStackPane fx:id\u003d\"attemptListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 51
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "      \u003cLabel fx:id\u003d\"definition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$definition\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "-": 33,
      "zeying99": 1
    }
  },
  {
    "path": "src/main/resources/view/QuizListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                \u003cLabel fx:id\u003d\"prompt\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"options\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "mehak24k": 32
    }
  },
  {
    "path": "src/main/resources/view/QuizListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \u003cListView fx:id\u003d\"quizListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 7,
      "zeying99": 1
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\": \"\u003cVALID DEFINITION PLACEHOLDER\u003e\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"name\": \"Person With Invalid Definition Field\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\": \" \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\": \"\u003cVALID DEFINITION PLACEHOLDER\u003e\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 1,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\": \"\u003cVALID DEFINITION PLACEHOLDER\u003e\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\": \"\u003cVALID DEFINITION PLACEHOLDER\u003e 2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 2,
      "-": 5,
      "zeying99": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"definition\": \" \","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\" : \"\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "zeying99": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zeying99"
        },
        "content": "  \"flashcards\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"Benson Meier\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 2\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 4\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 5\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 6\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"title\" : \"George Best\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    \"definition\" : \"\u003cDEFINITION PLACEHOLDER\u003e 7\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    \"priority\": \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 7,
      "-": 17,
      "zeying99": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFINITION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.addFlashcard(expectedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 2,
      "CalistaIo": 5,
      "-": 152,
      "zeying99": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.addFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFlashcard), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Flashcard flashcardInList \u003d model.getAddressBook().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertCommandFailure(new AddCommand(flashcardInList), model, AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 6,
      "gan-jw": 2,
      "-": 36,
      "zeying99": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Attempt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import seedu.address.model.quiz.Response;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashcard).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.personsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashcard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validFlashcard);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Flashcard alice \u003d new FlashcardBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Flashcard bob \u003d new FlashcardBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void sortFilteredPersonList(String sortOrder) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new AssertionError(\"This method could not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public boolean getIsQuizMode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void flipQuizMode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        public boolean hasCurrentAttempt() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        public void startAttempt() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        public void recordResponse(Response response) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuizList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        public ObservableList\u003cAttempt\u003e getAttemptList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void flipFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void savePerformance() throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        public void endAttempt() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        ModelStubWithPerson(Flashcard flashcard) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return personsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            personsAdded.add(flashcard);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8,
      "CalistaIo": 43,
      "gan-jw": 8,
      "mehak24k": 12,
      "-": 175,
      "zeying99": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String VALID_DEFINITION_AMY \u003d \"\u003cdefinition placeholder 1\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String VALID_DEFINITION_BOB \u003d \"\u003cdefinition placeholder 2\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String DEFINITION_DESC_AMY \u003d \" \" + PREFIX_DEFINITION + VALID_DEFINITION_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String DEFINITION_DESC_BOB \u003d \" \" + PREFIX_DEFINITION + VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_TITLE + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String INVALID_DEFINITION_DESC \u003d \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            + PREFIX_DEFINITION; // empty string not allowed for addresses\u003e\u003e\u003e\u003e\u003e\u003e\u003e upstream/branch-v1.2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        DESC_AMY \u003d new EditFlashcardDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        DESC_BOB \u003d new EditFlashcardDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * - the address book, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        final String[] splitName \u003d flashcard.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(splitName[0]));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 6,
      "mehak24k": 9,
      "CalistaIo": 8,
      "-": 88,
      "zeying99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getFlashcardList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 5,
      "gan-jw": 3,
      "-": 99,
      "zeying99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredPersonList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard lastFlashcard \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        FlashcardBuilder personInList \u003d new FlashcardBuilder(lastFlashcard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Flashcard editedFlashcard \u003d personInList.withTitle(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.setFlashcard(lastFlashcard, editedFlashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditFlashcardDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard editedFlashcard \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcardInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder(flashcardInFilteredList).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredPersonList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard firstFlashcard \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(firstFlashcard).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // edit flashcard in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Flashcard flashcardInList \u003d model.getAddressBook().getFlashcardList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                new EditFlashcardDescriptorBuilder(flashcardInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getFlashcardList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                new EditFlashcardDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor copyDescriptor \u003d new EditFlashcardDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 2,
      "CalistaIo": 19,
      "gan-jw": 2,
      "-": 139,
      "zeying99": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditFlashcardDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class EditFlashcardDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptorWithSameValues \u003d new EditFlashcardDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_AMY).withDefinition(VALID_DEFINITION_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        editedAmy \u003d new EditFlashcardDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 2,
      "CalistaIo": 3,
      "-": 40,
      "zeying99": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.ContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(preparePredicateList("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"first\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(preparePredicateList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"second\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(preparePredicateList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"first\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommandCopy);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(1, findFirstCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(null, findFirstCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(findFirstCommand, findSecondCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void execute_emptyKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void execute_oneKeyword_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e predicateList \u003d preparePredicateList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"priority\", \"low\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        expectedModel.updateFilteredPersonList(new ContainsAllKeywordsPredicate(predicateList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void execute_multipleKeywords_onePersonFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e predicateList \u003d preparePredicateList("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"priority\", \"low\"), preparePredicate(\"name\", \"Alice\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        expectedModel.updateFilteredPersonList(new ContainsAllKeywordsPredicate(predicateList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void execute_multipleKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cPredicate\u003cFlashcard\u003e\u003e predicateList \u003d preparePredicateList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"priority\", \"high\"), preparePredicate(\"name\", \"Alice\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        expectedModel.updateFilteredPersonList(new ContainsAllKeywordsPredicate(predicateList));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Parses {@code userInput} into a {@code List\u003cPredicate\u003cFlashcard\u003e\u003e}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private List\u003cPredicate\u003cFlashcard\u003e\u003e preparePredicateList(Predicate\u003cFlashcard\u003e ... predicates) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return Arrays.asList(predicates);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Parses {@code userInput} into a {@code Predicate\u003cFlashcard\u003e}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Predicate\u003cFlashcard\u003e preparePredicate(String type, String userInput) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new NameContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case \"tag\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new TagContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new PriorityContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 70,
      "CalistaIo": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FlipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " * {@code FlipCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class FlipCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard flashcardToFlip \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String expectedMessage \u003d String.format(FlipCommand.MESSAGE_FLIP_FLASHCARD_SUCCESS, flashcardToFlip);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        expectedModel.flipFlashcard(flashcardToFlip);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertCommandSuccess(flipCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertCommandFailure(flipCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard flashcardToFlip \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String expectedMessage \u003d String.format(FlipCommand.MESSAGE_FLIP_FLASHCARD_SUCCESS, flashcardToFlip);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        expectedModel.flipFlashcard(flashcardToFlip);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertCommandSuccess(flipCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getFlashcardList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipCommand \u003d new FlipCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertCommandFailure(flipCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipFirstCommand \u003d new FlipCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipSecondCommand \u003d new FlipCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertTrue(flipFirstCommand.equals(flipFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand flipFirstCommandCopy \u003d new FlipCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertTrue(flipFirstCommand.equals(flipFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertFalse(flipFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertFalse(flipFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertFalse(flipFirstCommand.equals(flipSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFINITION_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFINITION_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEFINITION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DEFINITION_DESC_AMY"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard expectedFlashcardMultipleTags \u003d new FlashcardBuilder(BOB).withTags(VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DEFINITION_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedFlashcardMultipleTags));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DEFINITION_DESC_AMY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "                new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DEFINITION_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // missing definition prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_DEFINITION_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DEFINITION_DESC_BOB,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEFINITION_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_DEFINITION_DESC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Definition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DEFINITION_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_DEFINITION_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "mehak24k": 21,
      "CalistaIo": 13,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DefinitionBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.logic.commands.FlipCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class DefinitionBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private final FlashcardParser parser \u003d new FlashcardParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FlashcardUtil.getAddCommand(flashcard));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertEquals(new AddCommand(flashcard), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(flashcard).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + FlashcardUtil.getEditFlashcardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + \"n/foo\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(new FindCommand(Collections.singletonList(new NameContainsKeywordsPredicate(\"foo\"))), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void parseCommand_flip() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        FlipCommand command \u003d (FlipCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                FlipCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertEquals(new FlipCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "mehak24k": 9,
      "CalistaIo": 8,
      "-": 81,
      "zeying99": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFINITION_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEFINITION_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEFINITION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Title.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEFINITION_DESC, Definition.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Flashcard} being edited,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DEFINITION_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEFINITION_DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // definition"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEFINITION_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withDefinition(VALID_DEFINITION_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEFINITION_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + TAG_DESC_FRIEND + DEFINITION_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                + DEFINITION_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DEFINITION_DESC + DEFINITION_DESC_BOB;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY + INVALID_DEFINITION_DESC + DEFINITION_DESC_BOB;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 4,
      "mehak24k": 23,
      "CalistaIo": 4,
      "-": 140,
      "zeying99": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                new FindCommand(Collections.singletonList(new NameContainsKeywordsPredicate(\"Alice\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertParseSuccess(parser, \"find n/Alice\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private static final String INVALID_DEFINITION \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private static final String VALID_DEFINITION \u003d \"\u003cVALID_DEFINITION\u003e placeholder\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Title expectedName \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(VALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Title expectedName \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void parseDefinition_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDefinition((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void parseDefinition_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDefinition(INVALID_DEFINITION));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void parseDefinition_validValueWithoutWhitespace_returnsDefinition() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Definition expectedDefinition \u003d new Definition(VALID_DEFINITION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertEquals(expectedDefinition, ParserUtil.parseDefinition(VALID_DEFINITION));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void parseDefinition_validValueWithWhitespace_returnsTrimmedDefinition() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_DEFINITION + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Definition expectedDefinition \u003d new Definition(VALID_DEFINITION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertEquals(expectedDefinition, ParserUtil.parseDefinition(addressWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 7,
      "mehak24k": 14,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/model/DefinitionBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class DefinitionBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getFlashcardList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // Two flashcards with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newFlashcards);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasFlashcard(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertFalse(addressBook.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        addressBook.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertTrue(addressBook.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        addressBook.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertTrue(addressBook.hasFlashcard(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getFlashcardList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * A stub ReadOnlyAddressBook whose flashcards list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        AddressBookStub(Collection\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 6,
      "CalistaIo": 14,
      "gan-jw": 9,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        modelManager.addFlashcard(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String[] keywords \u003d ALICE.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(keywords[0]));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_FLASHCARD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 2,
      "CalistaIo": 2,
      "-": 121,
      "zeying99": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ContainsAllKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class ContainsAllKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate firstPredicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"first\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate secondPredicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"second\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate firstPredicateCopy \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"first\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_flashcardContainsOneKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Quicksort\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Quicksort\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"tag\", \"heaps\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"heaps\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Priority"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"priority\", \"high\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"high\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_flashcardContainsMultipleKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Two keywords of same type (name and name)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Breadth\"), preparePredicate(\"name\", \"first\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Breadth first search\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Two keywords of different type (name and tag)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Quicksort\"), preparePredicate(\"tag\", \"Sorting\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Quicksort\").withTags(\"Sorting\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // All three types of keywords"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Quicksort\"), preparePredicate(\"tag\", \"Sorting\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"priority\", \"low\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Quicksort\").withTags(\"Sorting\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .withPriority(\"low\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_flashcardDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Carol\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Keywords match address, but does not match name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Main\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .withDefinition(\"Main Street\").build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_flashcardContainsSomeButNotAllKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Matches one but not the other (same type: name and name)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        ContainsAllKeywordsPredicate predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Alice\"), preparePredicate(\"name\", \"Carol\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Matches one but not the other (different types: name and tag)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new ContainsAllKeywordsPredicate(preparePredicateList("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                preparePredicate(\"name\", \"Quicksort\"), preparePredicate(\"tag\", \"heaps\")));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Quicksort\").withTags(\"sorting\").build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Parses {@code userInput} into a {@code List\u003cPredicate\u003cFlashcard\u003e\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private List\u003cPredicate\u003cFlashcard\u003e\u003e preparePredicateList(Predicate\u003cFlashcard\u003e ... predicates) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return Arrays.asList(predicates);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Parses {@code userInput} into a {@code Predicate\u003cFlashcard\u003e}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Predicate\u003cFlashcard\u003e preparePredicate(String type, String userInput) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new NameContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case \"tag\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new TagContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return new PriorityContainsKeywordsPredicate(userInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DefinitionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class DefinitionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Definition(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String invalidDefinition \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Definition(invalidDefinition));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public void isValidDefinition() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Definition.isValidDefinition(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertFalse(Definition.isValidDefinition(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertFalse(Definition.isValidDefinition(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mehak24k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertTrue(Definition.isValidDefinition(\"OOP stands for Object-Oriented Programming.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertTrue(Definition.isValidDefinition(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        assertTrue(Definition"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .isValidDefinition(\"A dictionary is a collection of (key,value) pairs.\")); // long definition"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashcard.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertTrue(ALICE.isSameFlashcard(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertFalse(ALICE.isSameFlashcard(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // different address -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withDefinition(VALID_DEFINITION_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertTrue(editedAlice.isSameFlashcard(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertFalse(ALICE.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE).withDefinition(VALID_DEFINITION_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertTrue(ALICE.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE).withDefinition(VALID_DEFINITION_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertTrue(ALICE.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        assertTrue(ALICE.isSameFlashcard(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        Flashcard aliceCopy \u003d new FlashcardBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE).withDefinition(VALID_DEFINITION_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        editedAlice \u003d new FlashcardBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 2,
      "mehak24k": 7,
      "CalistaIo": 20,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(\"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"Alice\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"Carol\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        // Keywords match address, but does not match name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(\"Main\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTitle(\"Alice\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .withDefinition(\"Main Street\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 19,
      "CalistaIo": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(Title.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(Title.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(Title.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(Title.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Title.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Title.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Title.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Title.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Title.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 12,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PriorityContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class PriorityContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        PriorityContainsKeywordsPredicate firstPredicate \u003d new PriorityContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        PriorityContainsKeywordsPredicate secondPredicate \u003d new PriorityContainsKeywordsPredicate(\"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        PriorityContainsKeywordsPredicate firstPredicateCopy \u003d new PriorityContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_priorityContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        PriorityContainsKeywordsPredicate predicate \u003d new PriorityContainsKeywordsPredicate(\"low\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"low\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_priorityDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        PriorityContainsKeywordsPredicate predicate \u003d new PriorityContainsKeywordsPredicate(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withPriority(\"low\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new PriorityContainsKeywordsPredicate(\"medium\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withPriority(\"low\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Keywords match address, but does not match priority"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new PriorityContainsKeywordsPredicate(\"Main\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withPriority(\"low\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .withDefinition(\"Main Street\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TagContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(\"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(\"Hashing\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Sorting\", \"Hashing\").build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Hashing\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(\"Heaps\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Hashing\", \"Sorting\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // Keywords match address, but does not match tag"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(\"Main\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Hashing\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .withDefinition(\"Main Street\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueFlashcardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.setFlashcard(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .withDefinition(VALID_DEFINITION_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.setFlashcard(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.setFlashcard(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        uniqueFlashcardList.setFlashcards(flashcardList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        UniqueFlashcardList expectedUniquePersonList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        assertThrows(DuplicateFlashcardException.class, () -\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                uniqueFlashcardList.setFlashcards(listWithDuplicateFlashcards));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mehak24k": 5,
      "CalistaIo": 8,
      "gan-jw": 47,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/McqTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class McqTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Mcq(null, 1, Arrays.asList(\"yes\", \"no\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Mcq(\"yes?\", null, Arrays.asList(\"yes\", \"no\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Mcq(\"yes?\", 1, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void constructor_invalidPrompt_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String invalidPrompt \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Mcq(invalidPrompt, 1, Arrays.asList(\"yes\", \"no\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void isValidPrompt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Mcq.isValidPrompt(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(Mcq.isValidPrompt(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(Mcq.isValidPrompt(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Mcq.isValidPrompt(\"OOP stands for Object-Oriented Programming.\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Mcq.isValidPrompt(\"-\")); // one character"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(Mcq"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .isValidPrompt(\"A dictionary is a collection of (key,value) pairs.\")); // long definition"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/TrueFalseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class TrueFalseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TrueFalse(null, true));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TrueFalse(\"yes?\", null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void constructor_invalidPrompt_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String invalidPrompt \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TrueFalse(invalidPrompt, true));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void isValidPrompt() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TrueFalse.isValidPrompt(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(TrueFalse.isValidPrompt(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(TrueFalse.isValidPrompt(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(TrueFalse.isValidPrompt(\"OOP stands for Object-Oriented Programming.\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(TrueFalse.isValidPrompt(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(TrueFalse"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                .isValidPrompt(\"A dictionary is a collection of (key,value) pairs.\")); // long definition"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/UniqueQuestionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.HEAPTF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.testutil.TypicalQuestions.MERGESORTMCQ;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class UniqueQuestionListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private final UniqueQuestionList uniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void contains_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void contains_quizNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertFalse(uniqueQuestionList.contains(MERGESORTMCQ));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void contains_quizInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.add(MERGESORTMCQ);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertTrue(uniqueQuestionList.contains(MERGESORTMCQ));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void add_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void add_duplicateQuestion_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.add(MERGESORTMCQ);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList.add(MERGESORTMCQ));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestion_nullTargetQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestion(null, MERGESORTMCQ));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestion_nullEditedQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestion(MERGESORTMCQ, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestion_targetQuestionNotInList_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.setQuestion(MERGESORTMCQ, MERGESORTMCQ));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void remove_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.remove(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void remove_quizDoesNotExist_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.remove(MERGESORTMCQ));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void remove_existingQuestion_removesQuestion() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.add(MERGESORTMCQ);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.remove(MERGESORTMCQ);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions_nullUniqueQuestionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestions((UniqueQuestionList) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions_uniqueQuestionList_replacesOwnListWithProvidedUniqueQuestionList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.add(MERGESORTMCQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        expectedUniqueQuestionList.add(HEAPTF);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.setQuestions(expectedUniqueQuestionList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestions((List\u003cQuestion\u003e) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.add(MERGESORTMCQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cQuestion\u003e flashcardList \u003d Collections.singletonList(HEAPTF);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        uniqueQuestionList.setQuestions(flashcardList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        expectedUniqueQuestionList.add(HEAPTF);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void setQuestions_listWithDuplicateQuestions_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        List\u003cQuestion\u003e listWithDuplicateQuestions \u003d Arrays.asList(MERGESORTMCQ, MERGESORTMCQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                uniqueQuestionList.setQuestions(listWithDuplicateQuestions));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            -\u003e uniqueQuestionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFlashcardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private static final String INVALID_DEFINITION \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"Higher\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private static final String VALID_DEFINITION \u003d BENSON.getDefinition().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private static final String VALID_PRIORITY \u003d BENSON.getDefinition().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        JsonAdaptedFlashcard person \u003d new JsonAdaptedFlashcard(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        JsonAdaptedFlashcard person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new JsonAdaptedFlashcard(INVALID_NAME, VALID_DEFINITION, VALID_PRIORITY, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        JsonAdaptedFlashcard person \u003d new JsonAdaptedFlashcard(null, VALID_DEFINITION, VALID_PRIORITY, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        JsonAdaptedFlashcard person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_NAME, INVALID_DEFINITION, VALID_PRIORITY, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String expectedMessage \u003d Definition.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        JsonAdaptedFlashcard person \u003d new JsonAdaptedFlashcard(VALID_NAME, null, VALID_PRIORITY, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Definition.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        JsonAdaptedFlashcard person \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_NAME, VALID_DEFINITION, VALID_PRIORITY, invalidTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 8,
      "CalistaIo": 7,
      "mehak24k": 4,
      "-": 51,
      "zeying99": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonDefinitionBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class JsonDefinitionBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        original.addFlashcard(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        original.removeFlashcard(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        original.addFlashcard(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 4,
      "mehak24k": 1,
      "gan-jw": 3,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableDefinitionBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "public class JsonSerializableDefinitionBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalFlashcards.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_FLASHCARD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 2,
      "mehak24k": 1,
      "-": 43,
      "zeying99": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Adds a new {@code Flashcard} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public AddressBookBuilder withPerson(Flashcard flashcard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        addressBook.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 3,
      "gan-jw": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFlashcardDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.descriptor \u003d new EditFlashcardDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public EditFlashcardDescriptorBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        descriptor.setTitle(flashcard.getTitle());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        descriptor.setDefinition(flashcard.getDefinition());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        descriptor.setPriority(flashcard.getPriority());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sets the {@code Title} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        descriptor.setTitle(new Title(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sets the {@code Definition} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public EditFlashcardDescriptorBuilder withDefinition(String definition) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        descriptor.setDefinition(new Definition(definition));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * Sets the {@code Definition} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public EditFlashcardDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        descriptor.setPriority(Priority.identifyPriority(priority));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 5,
      "mehak24k": 4,
      "CalistaIo": 8,
      "-": 42,
      "zeying99": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import seedu.address.model.person.Definition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.model.person.Priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.person.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * A utility class to help with building Flashcard objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alicia Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public static final String DEFAULT_DEFINITION \u003d \"\u003cDEFAULT DEFINITION\u003e placeholder\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    private Definition definition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Creates a {@code FlashcardBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        title \u003d new Title(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        definition \u003d new Definition(DEFAULT_DEFINITION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        priority \u003d Priority.identifyPriority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        title \u003d flashcardToCopy.getTitle();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        definition \u003d flashcardToCopy.getDefinition();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        priority \u003d flashcardToCopy.getPriority();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Sets the {@code Title} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public FlashcardBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public FlashcardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * Sets the {@code Definition} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "    public FlashcardBuilder withDefinition(String definition) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        this.definition \u003d new Definition(definition);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     * Sets the {@code Priority} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zeying99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public FlashcardBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        this.priority \u003d Priority.identifyPriority(priority);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zeying99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zeying99"
        },
        "content": "        return new Flashcard(title, definition, tags, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 7,
      "mehak24k": 7,
      "CalistaIo": 12,
      "-": 42,
      "zeying99": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEFINITION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zeying99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * A utility class for Flashcard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns an add command string for adding the {@code flashcard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static String getAddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(flashcard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static String getPersonDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        sb.append(PREFIX_TITLE + flashcard.getTitle().fullTitle + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        sb.append(PREFIX_DEFINITION + flashcard.getDefinition().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        flashcard.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static String getEditFlashcardDescriptorDetails(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        descriptor.getTitle().ifPresent(name -\u003e sb.append(PREFIX_TITLE).append(name.fullTitle).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "        descriptor.getDefinition().ifPresent(definition -\u003e sb.append(PREFIX_DEFINITION)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                .append(definition.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 3,
      "mehak24k": 4,
      "CalistaIo": 9,
      "-": 39,
      "zeying99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static Flashcard getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CalistaIo": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashcards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEFINITION_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "import seedu.address.model.person.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Flashcard ALICE \u003d new FlashcardBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 1\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            .withTags(\"friends\").withPriority(\"low\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Flashcard BENSON \u003d new FlashcardBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 2\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withPriority(\"low\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final Flashcard CARL \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new FlashcardBuilder().withTitle(\"Carl Kurz\").withPriority(\"medium\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 3\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final Flashcard DANIEL \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new FlashcardBuilder().withTitle(\"Daniel Meier\").withPriority(\"medium\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "                    .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 4\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zeying99"
        },
        "content": "    public static final Flashcard ELLE \u003d new FlashcardBuilder().withTitle(\"Elle Meyer\").withPriority(\"\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mehak24k"
        },
        "content": "            .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 5\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final Flashcard FIONA \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new FlashcardBuilder().withTitle(\"Fiona Kunz\").withPriority(\"high\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 6\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final Flashcard GEORGE \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            new FlashcardBuilder().withTitle(\"George Best\").withPriority(\"high\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                    .withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 7\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final Flashcard HOON \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            new FlashcardBuilder().withTitle(\"Hoon Meier\").withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 8\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                .withPriority(\"\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static final Flashcard IDA \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            new FlashcardBuilder().withTitle(\"Ida Mueller\").withDefinition(\"\u003cDEFINITION PLACEHOLDER\u003e 9\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zeying99"
        },
        "content": "                .withPriority(\"\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Flashcard AMY \u003d new FlashcardBuilder().withTitle(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            .withDefinition(VALID_DEFINITION_AMY).withPriority(\"\").withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Flashcard BOB \u003d new FlashcardBuilder().withTitle(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            .withDefinition(VALID_DEFINITION_BOB).withPriority(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zeying99"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    private TypicalFlashcards() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical flashcards."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "        for (Flashcard flashcard : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            ab.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CalistaIo"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 10,
      "mehak24k": 6,
      "CalistaIo": 14,
      "gan-jw": 1,
      "-": 34,
      "zeying99": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalQuestions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.QuizBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Mcq;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "import seedu.address.model.quiz.TrueFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " * A utility class containing a list of {@code Question} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jialin7878"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "public class TypicalQuestions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Question BUBBLESORTMCQ \u003d new Mcq(\"What is the time complexity of Bubble Sort?\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            4, Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Question SELECTIONSORTMCQ \u003d new Mcq(\"What is the time complexity of Selection Sort?\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            4, Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Question INSERTIONSORTMCQ \u003d new Mcq(\"What is the time complexity of Insertion Sort?\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            4, Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Question MERGESORTMCQ \u003d new Mcq(\"What is the time complexity of Merge Sort?\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            3, Arrays.asList(\"O(1)\", \"O(n)\", \"O(nlogn)\", \"O(n^2)\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Question HEAPTF \u003d new TrueFalse(\"The sequence [20, 15, 18, 7, 9, 5, 12, 3, 6, 2]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \" is a max-heap\", true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static final Question GRAPHTF \u003d new TrueFalse(\"Every directed acyclic graph has exactly \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            + \"one valid topological ordering\", false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    private TypicalQuestions() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     * Returns an {@code QuizBook} with all the typical flashcards."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static QuizBook getTypicalQuizBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        QuizBook ab \u003d new QuizBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        for (Question question : getTypicalQuestions()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "            ab.addQuestion(question);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jialin7878"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    public static List\u003cQuestion\u003e getTypicalQuestions() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUBBLESORTMCQ, SELECTIONSORTMCQ, INSERTIONSORTMCQ, MERGESORTMCQ,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "                HEAPTF, GRAPHTF));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jialin7878"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jialin7878": 48
    }
  }
]
