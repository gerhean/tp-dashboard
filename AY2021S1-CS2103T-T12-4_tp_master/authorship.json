[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "# Nuudle :ramen:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-4/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Having a tough time keeping track of patients\u0027 appointment? No time for noodles because of the never-ending appointment calls?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Fret not, Nuudle is here to help!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a desktop application that empowers clinic nurses, allowing them to **manage patient records and clinical appointments** with ease."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is optimised for use via a **Command Line Interface (CLI)** and supports a beautiful Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "If you can type fast, Nuudle gets your appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in using Nuudle, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in developing Nuudle, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 18,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "You can reach us at the following emails:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Lim Jin Hao : `jinhao_lim@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Low Ming Lim : `m._.m@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Zhang Wanlin : `zhangwanlin@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Xin Zhe : `xinzhe0127@gmail.com`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Yang Yue : `e0376999@u.nus.edu`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Lim Jin Hao"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cimg src\u003d\"images/jinhao-l.png\" width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[[github](http://github.com/jinhao-l)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[[portfolio](team/jinhao-l.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Role: Team Lead "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Responsibilities: Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Low Ming Lim"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "\u003cimg src\u003d\"images/avalionnet.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[[github](https://github.com/Avalionnet)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[[portfolio](team/avalionnet.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Role: Software Engineer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Responsibilities: Testing + Scheduling and Tracking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* In-charge of: Logic and Parsers "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Yang Yue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003cimg src\u003d\"images/yangyue128-helen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[[github](https://github.com/YangYue128-helen)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[[portfolio](team/yangyue128-helen.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Role: Developer \u0026 Code quality"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Responsibilities: Model - appointment"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Xin Zhe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "\u003cimg src\u003d\"images/xz0127.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "[[github](http://github.com/xz0127)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "[[portfolio](team/xz0127.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* Role: Software Engineer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* Responsibilities: Documentation + Integration"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* In-charge of: Patient Models"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Zhang Wanlin"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "\u003cimg src\u003d\"images/zhangwanlin98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "[[github](http://github.com/ZhangWanlin98)]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "[[portfolio](team/zhangwanlin98.md)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Role: Developer + Testing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 10,
      "ZhangWanlin98": 7,
      "Avalionnet": 7,
      "xz0127": 7,
      "-": 31,
      "YangYue128-helen": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Target user profile story**:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Namise is a hard working nurse working at a popular dental clinic situated in town and gets appointment calls on an hourly basis. Swarmed with incoming calls, Namise has to make new appointments for new and existing patients while keeping track of the doctor’s schedule at the same time😞. With the need to juggle multiple tasks at once, Namise is also prone to making careless mistakes in his work due to fatigue."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Being a tech-savvy person armed with a commendable experience in unix, Namise prefers to scribble down appointment schedules on paper while on call with his patients to maximise efficiency. This task is further exacerbated with the need to transfer these notes into an excel table manually later in the day."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Target user profile summary**:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Nurse working in a highly popular, small scale dental clinic"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Responsible for scheduling a large number of appointments daily"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Add new patients to the clinic records  "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Do not entertain walk-ins and only operate on an appointment-basis"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Required to multi-task (create appointment arrangements with patients over the phone)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prone to carelessness due to the sheer number of appointments to handle  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Tech-savvy  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers typing \u0026 wants to get things done quickly"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Tired of transferring appointment details from paper notes to excel"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers desktop apps over other types"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Types fast"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Help nurses **handle and schedule dental appointments for patients** faster than a typical mouse/GUI driven app or excel scheduling"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​          | I want to …​                      | So that I can…​                                                      |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "| -------- | --------------------| -------------------------------------| ------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | new user            | see an overview of the commands that are available to me | familiarise myself with using the app command       |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | view the entire patient list         | assign them to their appointments                                       |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| add new patient into the system      | assign an appointment to them                                           |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| delete the patient information       | manage the patient list easily when it is needed                        |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| search for patient by IC             | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | create patient appointment           | assign patient to a time slot for their appointment                     |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | delete an appointment                | cancel an appointment                                                   |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | view the entire appointment list for the certain day| update my dentists of the itinerary for the day          |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | mark the appointment as complete if the patient completes his/her appointment| have an accurate representation of the remaining appointments|"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | add diagnosis to a completed appointment| have a record of the patient’s visit                                 |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | check the record of the patient      | view the appointment history of the patient easily                      |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| search for patient by phone number   | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| search for patient by name           | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| change the patient’s appointment if they call to postpone their appointment| update the appointment easily     |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| update patient’s details             | keep the information of patients up-to-date                             |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | add an event slot to indicate that the doctor is not available at that time period| avoid arranging an appointment to that time slot|"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | get the available time slots of a day| inform my patient of the available times for that day                   |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | get the next available time slot     | inform my patient of the next available timing should their original preferred choice be filled|"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | check the earliest available slot for the clinic| automatically assign patient who does not have any preference for a specific doctor|"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse handling multiple patient records| archive records of past appointments| review them in the future                             |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | check the patient’s drug allergy     | confirm if the medicines prescribed are not in the list                 |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xz0127"
        },
        "content": "(For all use cases below, the **System** is the `Nuudle` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC01 - Add a patient**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to add a patient to the list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle adds the patient."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "xz0127"
        },
        "content": "           "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC02 - Delete a patient**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1.  User requests to list patients."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2.  Nuudle shows a list of patients."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3.  User requests to delete a specific patient in the list."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4.  Nuudle deletes the patient."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC03 - Edit a patient**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to find a specific patient."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows the list of patients with the given name."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to edit the patient information."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle changes the patient information."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 3a. The given information for editing is invalid (including empty input)."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC04 - View patient record**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to find a patient by name."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of patients with the requested name."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User request to view patient record of a specific patient in the list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle shows the list of records for that patient."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC05 - Add an appointment**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to find an available time slot."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of available time slots."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to add an appointment to a specific time slot."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle adds the appointment to the list of appointment records."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 3a. The given time slot is invalid (including empty input)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC06 - Delete an appointment**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to list appointments."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of appointments."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests to delete a specific appointment in the list."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle deletes the appointment."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC07 - Change an appointment**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to list all appointments."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of appointments."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to find an available time slot."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle shows a list of available time slots."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xz0127"
        },
        "content": "5.  User requests to change a specific appointment to another time."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xz0127"
        },
        "content": "6.  Nuudle changes the appointment."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 2a. User has no current appointments."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 2a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 5a. The given time slot is invalid (including empty input)."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 5a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 5b. The given keywords are invalid."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * 5b1. Nuudle shows an error message."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xz0127"
        },
        "content": "       Use case ends."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC08 - Mark an appointment as complete**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to list appointments."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of appointments."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests to mark an appointment as done."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle marks the appointment as done."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC09 - View appointments for today**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests for the appointments scheduled for today."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of appointments scheduled for today."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1b. The given date is invalid."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1b1. Nuudle shows an error message."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC10 - Create an appointment for a new patient**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. User requests to create a \u003cu\u003enew patient (UC01)\u003c/u\u003e."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle creates the new patient."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests for an available time slot on a preferred day."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle shows the list of available time slots."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "5. User requests to add an appointment for the new patient."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "6. Nuudle creates the appointment."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 3a. The given date is invalid."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 4a. No more time slot is available for that day."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 4a1. Nuudle shows the next available time slot on the nearest day."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        * 4a1a. User uses the suggested time slot."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "          Use case resumes at step 5."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        * 4a1b. User does not use the suggested time slot."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "          Use case resumes at step 3."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2.  Should be able to hold up to 500 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "3.  Should be able to hold up to 1000 upcoming appointments without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Patient records**: The past records of the patient\u0027s visit to the clinic. May contain doctor\u0027s diagnosis (if any)."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 53,
      "ZhangWanlin98": 95,
      "Avalionnet": 9,
      "xz0127": 125,
      "-": 351,
      "YangYue128-helen": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "## Quick start ( Coming Soon )"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Download the latest `nuudle.jar` from **here** ( Coming Soon )."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for Nuddle."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try :"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`list`** : Lists all patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`add`**`add n/John Doe i/S9730284G p/98765432 a/John street, block 123, #01-01` : Adds a patient named `John Doe` to the Patient Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd patient shown in the current list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   * **`edit`**`1 n/Betsy Crower p/91234567 a/College Avenue 8` : Edits the name, phone number, and address of the 1st patient in the list to be `Betsy`, `91234567`, and `College Avenue 8` respectively."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   * **`find`**`alex david` : Returns `Alex Yeoh`, `David Li` if the two names are found in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`clear`** : Deletes all patients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Shows a message explaining how to access the help page of Nuudle."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Adding a patient : `add`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Adds a patient to the patient book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Format: `add n/NAME i/NRIC p/PHONE_NUMBER a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Tags are used to indicate a patient\u0027s underlying medical conditions. A patient can also have any number of tags (including 0)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `add n/John Doe i/S9730284G p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `add n/Betsy Crowe i/S9123456G t/friend a/NUS Utown p/1234567 t/asthma`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Listing all patients : `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Shows a list of all patients in the patient book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Editing a patient : `edit`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Edits an existing patient in the patient book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Format: `edit INDEX [n/NAME] [i/NRIC] [p/PHONE_NUMBER] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* You can remove all the patients\u0027 tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "*  `edit 1 p/91234567 a/College Avenue 8` Edits the phone number and email address of the 1st patient to be `91234567` and `College Avenue 8` respectively."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Locating patients by name : `find`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Finds patients whose names contain any of the given keywords."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Patients matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Deleting a patient : `delete`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Deletes the specified patient from the patient book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd patient in the patient book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Adding an appointment : `assign`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Assign the specified patient into the specified appointment date and time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Format: `assign INDEX d/DATE t/TIME`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Puts the patient at the specified INDEX into an appointment time slot."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The INDEX refers to the index number indicated in the patient list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The INDEX **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `DATE` and `TIME` of the appointment must be included."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The timeslot indicated by `DATE` and `TIME` must be available."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The specified `DATE` and `TIME` must be in the future."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `assign 1 d/Sunday t/2am` books an appointment at the upcoming Sunday, 2am for the 1st patient in the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `assign 3 d/02-03-2021 t/1130` books an appointment on 02/03/2021, 11:30am for the 3rd patient in the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Canceling an appointment : `cancel`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Delete the specified appointment from the appointment book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Format `cancel APPT_ID`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Deletes the appointment at the specified `APPT_ID`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `APPT_ID` must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `APPT_ID` is a unique id containing information on the appointment date and time."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `cancel 202003081000` deletes the appointment happening on 08/03/2020 10am."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Listing upcoming appointments by date : `view`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Shows a list of all upcoming appointments entries or only the list of upcoming appointments happening on the specified date."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Format `view [d/DATE]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Outputs the list of all upcoming appointments happening on the specified date according to their `APPT_ID` order."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `DATE` must be in the future."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If `DATE` is not included, outputs the list of all upcoming appointments according to their `APPT_ID` order."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `view` shows the list of all upcoming appointments in chronological order."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `view d/4-Aug-2020` shows the list of appointments happening on 04/08/2020."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Mark an appointment as done : `done`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Marks a specific appointment in the patient book as done."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Format: `done APPT_ID`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Marks the appointment with the specified `APPT_ID` as done."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* The `APPT_ID` must be a positive integer."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* The `APPT_ID` is a unique id containing information on the appointment date and time."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `done 202010101300` marks the appointment happening on 10/10/2020 1pm as done."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Clearing all appointment entries : `clear`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Clears all appointment entries from the appointment book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Exits Nuudle."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Patients and appointments data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Upon starting up the app, past appointments will be automatically archived and saved into separate files. The data files are organised by months for future references."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Nuudle home folder."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Q**: What are the acceptable date time format?\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**A**: Nuudle supports multiple date time formats as well as natural date time language :"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Date Formats | Time Formats | Natural Date | Natural Time"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ":---------------:|:----------------:|:----------------:|:----------------:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02/12/2020 | 2300 | Today | Morning (8AM)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-12-2020 | 11:00PM | Tomorrow | Noon (12PM)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "12/02/2020 | 11PM | Yesterday | Evening (7PM)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "12-02-2020 | | Upcoming day\u003cbr\u003eof the week | Night (10PM)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2020/12/02 | | | Midnight (11:59PM)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2020-12-02 |"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-Dec-2020 | "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-December-2020 | "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Add** | `add n/NAME i/NRIC p/PHONE_NUMBER a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho i/S9712345G p/22224444 a/123, Clementi Rd, 1234665 t/asthma t/`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [i/NRIC] [a/ADDRESS] [t/TAG]…`\u003cbr\u003e e.g.,`edit 2 n/James Lee a/College Avenue 8`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Assign** | `assign INDEX d/DATE t/TIME`\u003cbr\u003e e.g., `assign 3 d/tomorrow t/3pm`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Cancel** | `cancel APPT_ID`\u003cbr\u003e e.g., `cancel 202003081000`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**View** | `view [d/DATE]`\u003cbr\u003e e.g., `view d/today`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Done** | `done APPT_ID`\u003cbr\u003e e.g., `done 202003081000`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 60,
      "ZhangWanlin98": 16,
      "Avalionnet": 19,
      "xz0127": 4,
      "-": 135,
      "YangYue128-helen": 23
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "title: Nuudle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Nuudle is a desktop application that empowers clinic nurses, allowing them to handle patient\u0027s appointment quickly and efficiently.**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in using Nuudle, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested about developing Nuudle, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/avalionnet.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "title: Low Ming Lim\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Wrote the introduction for Nuddle: [\\#41]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Added cosmetic changes to Quick Start: [\\#41]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Added documentation for the features `add` and `delete` [\\#41]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Authored the User Profile and Value Proposition segment [\\#43]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 33
    }
  },
  {
    "path": "docs/team/jinhao-l.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "title: Lim Jin Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments**. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is optimised for use via a Command Line Interface (CLI), and has a Graphical User Interface (GUI) built with javafx.   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **New Feature**: (to be added) "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djinhao-l\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Managed releases `v...` - `v...` on GitHub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * README: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Update README to stay updated to current Nuudle project details [\\#40](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/40)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added documentation for the features `assign` and `cancel` [\\#42](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/42)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added documentation on archiving data [\\#42](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/42)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added details on the Nuudle\u0027s supported date time format [\\#49](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/49)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Authored the non-functional requirements and glossary segment [\\#50](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/50)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): none "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Contributed to forum discussions "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  (examples: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/99#issuecomment-683256251),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/94#issuecomment-692407535))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 41
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "## Project: -"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "- is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 45
    }
  },
  {
    "path": "docs/team/xz0127.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "title: Xin Zhe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * Added documentation for the features `clear`, `find` and `help` [\\#57]()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * Authored the `Use cases` segment [\\#59]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xz0127": 34
    }
  },
  {
    "path": "docs/team/yangyue128-helen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "title: Yang Yue\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Nuudle is a desktop application used for managing patient records and clinic appointments. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    * Added documentation for the features `view` and `done` [\\#53]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    * Added user stories segment.[\\#56]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 28
    }
  },
  {
    "path": "docs/team/zhangwanlin98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "title: Zhang Wanlin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "via a Command Line Interface**(CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "If you can type fast, Nuudle can get your patient and appointment management tasks done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **New Feature**: (to be added soon)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * Added documentation for the features `list`, `edit`and `find` [\\#47]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * Added Use Cases."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (examples: [\\#12](), [\\#32](), [\\#19](), [\\#42]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an Appointment in the appointment book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Duration of an appointment in hours"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Duration DEFAULT_DURATION \u003d Duration.ofHours(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // todo: add more support for appointmentId"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentId appointmentId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // todo: Change String object to IC object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String patientId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment(Date date, Time startTime, String patientId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, startTime, patientId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.endTime \u003d new Time(startTime.getTime().plus(DEFAULT_DURATION));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointmentId \u003d new AppointmentId(date, startTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentId getAppointmentId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getPatientId() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return patientId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if both appointments have overlapping appointment time slot."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This defines a weaker notion of equality between two appointments"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isOverlapping(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (otherAppointment \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!otherAppointment.getDate().equals(getDate())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Assumption: start1 \u003c end1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // overlap if end1 \u003e start2 and end2 \u003e start1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return (getEndTime().isAfter(otherAppointment.getStartTime()))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().isAfter(getStartTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if this appointment comes before the given appointment input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param otherAppointment the appointment to check against."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if this appointment comes before, false otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getDate().isBefore(otherAppointment.getDate())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (getDate().equals(otherAppointment.getDate())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u0026\u0026 !(getEndTime().isAfter(otherAppointment.getStartTime()))); // End1 \u003c\u003d Start2"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if this appointment comes after the given appointment input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param otherAppointment the appointment to check against."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if this appointment comes after, false otherwise."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getDate().isAfter(otherAppointment.getDate())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (getDate().equals(otherAppointment.getDate())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u0026\u0026 !(otherAppointment.getEndTime().isAfter(getStartTime()))); // End2 \u003c\u003d Start1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return otherAppointment.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getDate().equals(getDate())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentId().equals(getAppointmentId())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatientId().equals(getPatientId());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Objects.hash(startTime, endTime, date, appointmentId, patientId);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getAppointmentId() + \" Date: \" + getDate()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \" Time: from \" + getStartTime() + \" to \" + getEndTime()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \" Patient IC: \" + getPatientId();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the {@code Comparator} class for Appointment."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentComparator implements Comparator\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int compare(Appointment a1, Appointment a2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(a1, a2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (a1.isBefore(a2)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (a1.isAfter(a2)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert a1.isOverlapping(a2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"uuuuMMdd\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    AppointmentId(Date date, Time time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d date.getDate().format(DATE_FORMAT) + time.getTime().format(TIME_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof AppointmentId // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((AppointmentId) other).value)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an upcoming appointment date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The formatter to convert the Date into the desired form for presentation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create a {@code Date} that represents the date of an appointment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param date the {@code LocalDate} containing the date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment date comes before the input {@code Date}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputDate the input date to be checked against"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment date comes before the input date, false otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Date inputDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isBefore(inputDate.value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment date comes after the input {@code Date}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputDate the input date to be checked against"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment date comes after the input date, false otherwise"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Date inputDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isAfter(inputDate.value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a date string based on the currDate."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate the current {@code LocalDate}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string representation of the appointment {@code Date}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected String toStringBasedOn(LocalDate currDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (value.isEqual(currDate)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Simplify date to \"Today\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return \"Today\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.format(DATE_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Format appointment date as text for viewing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return toStringBasedOn(LocalDate.now());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/NaturalDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the natural days that are recognised by Nuudle."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public enum NaturalDay {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Days of Week"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MONDAY(\"MON\", \"MONDAY\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TUESDAY(\"TUE\", \"TUESDAY\", \"TUES\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    WEDNESDAY(\"WED\", \"WEDNESDAY\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    THURSDAY(\"THU\", \"THURSDAY\", \"THURS\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    FRIDAY(\"FRI\", \"FRIDAY\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SATURDAY(\"SAT\", \"SATURDAY\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SUNDAY(\"SUN\", \"SUNDAY\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Other date language"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TODAY(\"TDY\", \"TODAY\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TOMORROW(\"TMR\", \"TOMORROW\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    YESTERDAY(\"YESTERDAY\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Time grammar"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MIDNIGHT(\"MIDNIGHT\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NOON(\"NOON\", \"AFTERNOON\", \"AFTER-NOON\", \"LUNCH\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MORNING(\"MORNING\", \"SUNRISE\", \"BREAKFAST\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    EVENING(\"EVENING\", \"EVE\", \"DINNER\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NIGHT(\"NIGHT\", \"BEDTIME\", \"BED-TIME\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The string of words that is linked to the NaturalDay"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String[] words;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NaturalDay(String... words) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the word given indicate the respective {@code NaturalDay}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param wordToCheck the string to check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the word implies the corresponding {@code NaturalDay}, false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean contains(String wordToCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Arrays.stream(words)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .anyMatch(word -\u003e word.equalsIgnoreCase(wordToCheck));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the string input for any natural date or time grammar that is used."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the date or time input string with a possible natural day reference."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code NaturalDay} that corresponds to the date or time grammar, or null if no match is found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static NaturalDay parse(String dateString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dateString \u003d dateString.strip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay[] days \u003d NaturalDay.values();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c days.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (days[i].contains(dateString)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return days[i];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an appointment time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The formatter to convert the Time into the desired form for presentation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Opens at 8am"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime OPENING_TIME \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Closes at 10pm"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime CLOSING_TIME \u003d LocalTime.of(22, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The time should fall within the opening hours: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"from \" + OPENING_TIME.format(TIME_FORMAT) + \" to \" + CLOSING_TIME.format(TIME_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create a {@code Time} that represents the time of an appointment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param time the LocalTime containing the time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time(LocalTime time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given {@code LocalTime} is valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@code LocalTime} is valid if it falls within the opening and closing time (inclusive)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param test the LocalTime to test."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidTime(LocalTime test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !(test.isBefore(OPENING_TIME) || test.isAfter(CLOSING_TIME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment time comes before the input {@code Time}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputTime the input time to be checked against"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment time comes before the input time, false otherwise"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Time inputTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isBefore(inputTime.value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment time comes after the input {@code Time}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputTime the input time to be checked against"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment time comes after the input time, false otherwise"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Time inputTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isAfter(inputTime.value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Format appointment time as text for viewing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.format(TIME_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A list of appointments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * An appointment is considered unique by comparing using {@code Appointment#isOverlapping(Appointment)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * As such, adding and updating of appointment uses Appointment#isOverlapping(Appointment) for equality so as"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * to ensure that the appointment being added or updated is unique in terms of identity in the UniqueAppointmentList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * However, the removal of a person uses Appointment#equals(Object) so as to ensure that the person with"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * @see Appointment#isOverlapping(Appointment)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class UniqueAppointmentList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList.sorted(new AppointmentComparator()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentComparator comparator \u003d new AppointmentComparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsBefore_returnNegative() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 2)).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 3)).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(-1, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, same date (not overlapping)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(9, 0)).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 30)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(-1, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsAfter_returnPositive() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 3)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 2)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, same date (not overlapping)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 30)).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(9, 0)).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsOverlapping_returnZero() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 0)).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(17, 30)).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same appointment time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentAfter, appointmentAfter));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentBefore));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentIdTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date testDate \u003d new Date(LocalDate.of(2020, 2, 2));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date testDate1 \u003d new Date(LocalDate.of(2019, 11, 24));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time testTime2 \u003d new Time(LocalTime.of(13, 30));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AppointmentId(null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_correctValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"202002021200\", new AppointmentId(testDate, testTime).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"201911241200\", new AppointmentId(testDate1, testTime).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"202002021330\", new AppointmentId(testDate, testTime2).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"201911241330\", new AppointmentId(testDate1, testTime2).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentId appointmentIdTest \u003d new AppointmentId(testDate, testTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentId appointmentIdTestCopy \u003d new AppointmentId(testDate, testTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentIdTest.equals(appointmentIdTestCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentIdTest.equals(appointmentIdTest));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate1, testTime)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate, testTime2)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate1, testTime2)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isOverlapping() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e APPOINTMENT_ONE.isOverlapping(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2019, 12, 20)).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2019, 12, 20))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(13, 30)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same date, same time, different patient id -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatientId(\"T0034567B\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later date -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e APPOINTMENT_ONE.isBefore(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start time and same date, different patientId -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatientId(\"T0034567B\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isBefore(editedOne));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e APPOINTMENT_ONE.isAfter(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start time and same date, different patientId -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatientId(\"T0034567B\").build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(APPOINTMENT_ONE.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(APPOINTMENT_ONE.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.isAfter(editedOne));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentOneCopy \u003d new AppointmentBuilder(APPOINTMENT_ONE).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.equals(appointmentOneCopy));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(APPOINTMENT_ONE.equals(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(5));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different Appointment -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(APPOINTMENT_TWO));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2010, 10, 10)).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(editedOne));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withStartTime(LocalTime.of(15, 15)).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(editedOne));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(APPOINTMENT_ONE)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatientId(\"T0134567B\").build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(APPOINTMENT_ONE.equals(editedOne));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 216
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate currDate \u003d LocalDate.of(2020, 5, 5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toStringBasedOn() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate testDate \u003d LocalDate.of(2020, 6, 6);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"Saturday, Jun 06 2020\", new Date(testDate).toStringBasedOn(currDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"Today\", new Date(testDate).toStringBasedOn(testDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date testDate \u003d new Date(LocalDate.of(2020, 6, 6));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testDate.isBefore(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is before input --\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isBefore(new Date(LocalDate.of(2020, 7, 6))));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isBefore(new Date(LocalDate.of(2020, 6, 7))));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is same as input --\u003e false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(testDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(LocalDate.of(2020, 6, 6))));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is after input --\u003e false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(LocalDate.of(2020, 5, 6))));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(LocalDate.of(2020, 6, 5))));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date testDate \u003d new Date(LocalDate.of(2020, 6, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testDate.isAfter(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is after input --\u003e true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isAfter(new Date(LocalDate.of(2020, 5, 6))));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isAfter(new Date(LocalDate.of(2020, 6, 5))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is same as input --\u003e false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(testDate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(LocalDate.of(2020, 6, 6))));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is before input --\u003e false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(LocalDate.of(2020, 7, 6))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(LocalDate.of(2020, 6, 7))));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date dateTest \u003d new Date(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date dateTestCopy \u003d new Date(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(dateTest.equals(dateTestCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(dateTest.equals(dateTest));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(new Date(LocalDate.of(2020, 6, 6))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/NaturalDayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class NaturalDayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MONDAY.contains(\"Monday\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TUESDAY.contains(\"Tues\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.WEDNESDAY.contains(\"Wed\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.THURSDAY.contains(\"Thursday\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.FRIDAY.contains(\"friDay\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.SATURDAY.contains(\"SATURDAY\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.SUNDAY.contains(\"sun\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TODAY.contains(\"tdy\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TOMORROW.contains(\"tmr\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.YESTERDAY.contains(\"yesterday\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MIDNIGHT.contains(\"midnight\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.NOON.contains(\"Noon\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MORNING.contains(\"breakfast\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.EVENING.contains(\"eve\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.NIGHT.contains(\"night\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.MIDNIGHT.contains(\"Monday\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.EVENING.contains(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.FRIDAY.contains(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.WEDNESDAY.contains(\"123\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NaturalDay.parse(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural day found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MONDAY, NaturalDay.parse(\"Monday\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TUESDAY, NaturalDay.parse(\"Tues\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.WEDNESDAY, NaturalDay.parse(\"Wed\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.THURSDAY, NaturalDay.parse(\"Thursday\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.FRIDAY, NaturalDay.parse(\"friDay\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.SATURDAY, NaturalDay.parse(\"SATURDAY\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.SUNDAY, NaturalDay.parse(\"sun\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TODAY, NaturalDay.parse(\"tdy\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TOMORROW, NaturalDay.parse(\"tmr\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.YESTERDAY, NaturalDay.parse(\"yesterday\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MIDNIGHT, NaturalDay.parse(\"midnight\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.NOON, NaturalDay.parse(\"Noon\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MORNING, NaturalDay.parse(\"breakfast\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.EVENING, NaturalDay.parse(\"eve\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.NIGHT, NaturalDay.parse(\"night\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // no natural day found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(NaturalDay.parse(\"\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(NaturalDay.parse(\"123\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // valid local times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime timeBeforeOpening \u003d Time.OPENING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime timeAfterClosing \u003d Time.CLOSING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // invalid local times"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime timeAfterOpening \u003d Time.OPENING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime timeBeforeClosing \u003d Time.CLOSING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime timeBeforeOpening \u003d Time.OPENING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(timeBeforeOpening));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime timeAfterClosing \u003d Time.CLOSING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(timeAfterClosing));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(timeBeforeOpening));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(timeAfterClosing));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // valid times"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(LocalTime.NOON));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(timeAfterOpening));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(timeBeforeClosing));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testTime.isBefore(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is before input --\u003e true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isBefore(new Time(LocalTime.of(15, 0))));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isBefore(new Time(timeBeforeClosing)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is equal to input --\u003e false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(LocalTime.NOON)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is after input --\u003e false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(LocalTime.of(11, 0))));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(timeAfterOpening)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testTime.isAfter(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is after input --\u003e true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isAfter(new Time(LocalTime.of(11, 0))));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isAfter(new Time(timeAfterOpening)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is equal to input --\u003e false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(LocalTime.NOON)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is before input --\u003e false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(LocalTime.of(15, 0))));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(timeBeforeClosing)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time timeTest \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time timeTestCopy \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(timeTest.equals(timeTestCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(timeTest.equals(timeTest));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(5));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(new Time(LocalTime.of(13, 0))));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class to help with building Appointment objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2020, 12, 23);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String DEFAULT_PERSON_IC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private String patientId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an {@code AppointmentBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patientId \u003d DEFAULT_PERSON_IC;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder(Appointment appointmentToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d appointmentToCopy.getDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d appointmentToCopy.getStartTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patientId \u003d appointmentToCopy.getPatientId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code Date} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the start time of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withStartTime(LocalTime time) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.startTime \u003d new Time(time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the patient\u0027s {@code IC} for the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withPatientId(String patientId) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment(date, startTime, patientId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAppointments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TypicalAppointments {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_ONE \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 1, 1))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(9, 0))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatientId(\"S9234567A\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_TWO \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 5, 12))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(11, 30))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatientId(\"T0034567B\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_THREE \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 1, 1))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(20, 0))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatientId(\"S9734567H\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_FOUR \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 5, 22))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(14, 0))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatientId(\"T0234567K\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_FIVE \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 5, 22))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(15, 0))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatientId(\"S9234567A\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment APPOINTMENT_SIX \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2020, 4, 1))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withStartTime(LocalTime.of(11, 30))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatientId(\"T0034567B\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private TypicalAppointments() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //  * Returns an {@code AppointmentBook} with all the typical Appointments."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // public static AddressBook getTypicalAppointmentBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //     AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //     for (Appointment Appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //         ab.addAppointment(Appointment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //     return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                APPOINTMENT_ONE, APPOINTMENT_TWO, APPOINTMENT_THREE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                APPOINTMENT_FOUR, APPOINTMENT_FIVE, APPOINTMENT_SIX));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 60
    }
  }
]
