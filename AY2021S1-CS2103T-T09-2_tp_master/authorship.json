[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* This is **Software Engineering (SE) project to help students plan and schedule workouts**.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * as a tracker to help students track their BMI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * as a planner to help students plan their workout sessions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _fitNUS_) used for helping students plan workouts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* It is named `fitNUS`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "khor-jingqian": 1,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "khor-jingqian": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "### Tan Xi Zhe"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "\u003cimg src\u003d\"images/patricktan6.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "[[github](http://github.com/patricktan6)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "[[portfolio](team/patricktan6.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Khor Jing Qian"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cimg src\u003d\"images/khor-jingqian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[[github](http://github.com/khor-jingqian)] [[portfolio](team/khor-jingqian.md)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "### Wu Licheng"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cimg src\u003d\"images/licheng-wu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[[github](https://github.com/Licheng-Wu)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[[portfolio](team/wu-licheng.md)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### Iqbal Imran"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cimg src\u003d\"images/iqbxl.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[[github](http://github.com/iqbxl)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[[portfolio](team/iqbxl.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### Nicholas Yeo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "\u003cimg src\u003d\"images/nicholasyeo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[[github](http://github.com/nicholasyeo)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[[portfolio](team/nicholasyeo.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Responsibilities: Code Quality"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "patricktan6": 5,
      "nicholasyeo": 5,
      "-": 33,
      "khor-jingqian": 4,
      "Licheng-Wu": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS is tailored for **NUS students** that are interested in staying healthy and keeping fit. It is suitable for **all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitness levels** and is equipped with a **customisable timetable** for you to manage your time wisely and slot in your"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "workout routines with ease."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "This developer guide is for users who are interested in our design philosophy and for future developers of fitNUS."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. `Logic` uses the `FitNusBookParser` class to parse the user command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"exercise_delete 1\")` API call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `ExerciseDeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* stores the fitNUS data."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExercise\u003e`, `ObservableList\u003cRoutine\u003e` and `ObservableList\u003cLesson\u003e`  that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* can save the fitNUS data in json format and read it back."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Create routine"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The feature to create a routine in fitNUS is implemented using `RoutineCreateCommand` class, which inherits from"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`Command` class. The argument is supplied after parsing the user input by the `RoutineCreateCommandParser` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "It is important to note that the Routine object in question must not already exist within fitNUS."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is an example usage scenario and how the routine-creating mechanism behaves at each step."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The user types into fitNUS `routine_create r/Leg Workout`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "This input is passed to `LogicManager` as a String and from there, the input is parsed by the `parseCommand`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "method of `FitNusParser`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`parseCommand` identifies that this is a command to create a Routine, so it calls the `parse` method of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`RoutineCreateCommandParser` on the input."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Within `parse`, the name of the routine is produced by `ParserUtil` parsing the given argument. This method then creates"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "the Routine object and returns it as an argument in the `RoutineCreateCommand`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`LogicManager` then calls the `execute` method of this returned `RoutineCreateCommand` to add the Routine into fitNUS."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` then saves the updated fitNUS data to the storage."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is the sequence diagram showing how the routine creation command is executed:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Create](./images/RoutineAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Add Routine to Timetable"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `TimetableAddRoutineCommandParser` and `TimetableAddRoutineCommand` classes parse and execute the user input"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "to add a routine to the timetable in fitNUS."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `TimetableAddRoutineCommandParser` class takes in the user input and parses them to return a"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`TimetableAddRoutineCommand` object that contains the routine, day and duration. The `TimetableAddRoutineCommand` class"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "then executes the command by storing the slot in the timetable."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that for the command to be successful, the routine to be added has to exist in fitNUS."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The user types into fitNUS `timetable_add_routine r/Leg workout d/Monday T/1600-1800`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` takes in this input as a String and calls the `parseCommand` method of `FitNusParser` to parse this string."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`parseCommand` identifies that this is a command add a Routine to Timetable, so it calls the `parse` method of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`TimetableAddRoutineCommandParser` on the input."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `parse` method calls the necessary methods of `ParserUtil` to parse the given argument and produce the name, day,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "and duration. It uses the name to create the Routine object and returns this object, the day, and the duration as an"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "argument in `TimetableAddRoutineCommand`.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that this Routine object is a placeholder, the actual Routine object in fitNUS is yet to be found."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` calls the `execute` method of this returned `TimetableAddRoutineCommand` to add the Routine into the timetable.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that the `execute` method retrieves the actual Routine object in fitNUS before adding it to the timetable."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` then saves the updated fitNUS data to the storage."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Given below is the Sequence Diagram for interactions within the Logic component for the"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "execute(\"timetable_add_routine r/Leg Workout d/Monday T/1600-1700\") API call."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "![TimetableAddRoutineSequenceDiagram](images/TimetableAddRoutineSequenceDiagram.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Find exercises"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The find exercises feature is implemented using `FindExercisesCommandParser`, as well as the following command:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `FindExercisesCommand`, to be executed when the user inputs the command into fitNUS."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`FindExercisesCommandParser` takes in the user input and parses them to return a FindExercisesCommand containing the"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "corresponding predicate for finding the exercises. When executed, `FindExercisesCommand` will set the predicate of"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "the respective `FilteredList` for exercises in `ModelManager` such that only exercises matching the predicate will be"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "displayed in the list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Given below is an example usage scenario and how the find exercise mechanism behaves at each step."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The user types into fitNUS `find_exercises bench`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "This input is passed to `LogicManager` as a String and from there, the input is parsed by the `parseCommand`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "method of `FitNusParser`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`parseCommand` identifies that this is a command to find exercises, so it calls the `parse` method of"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`FindExercisesCommandParser` on the input."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Within `parse`, the keywords to match are added to a `List`, and an `ExerciseNameContainsKeywordsPredicate` object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "is created based on this list. A `FindExercisesCommand` object is created using this"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`ExerciseNameContainsKeywordsPredicate` object."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`LogicManager` then calls the `execute` method of this returned `FindExercisesCommand`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Within `execute`, `ModelManager`\u0027s `updateFilteredExerciseList` method is called with the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`ExerciseNameContainsKeywordsPredicate` object as its argument. This filters out the relevant exercises."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The GUI then lists the filtered exercises."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Given below is the Sequence Diagram for interactions within the Logic component for the execute(\"find_exercises bench\")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "API call."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "![FindExercisesSequenceDiagram](images/FindExercisesSequenceDiagram.png)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Delete lesson"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The delete lesson feature is implemented using `LessonDeleteCommandParser`, as well as the following command:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `LessonDeleteCommand`, to be executed when the user inputs the command into fitNUS."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LessonDeleteCommandParser` takes in the user input and parses them to return a `LessonDeleteCommand` object. The"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LessonDeleteCommand` class then executes the command by deleting the lesson from the respective `FilteredList` for"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "lessons in `ModelManager`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Given below is an example usage scenario and how the delete lesson mechanism behaves at each step."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The user types into fitNUS `lesson_delete 1`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "This input is passed to `LogicManager` as a String and from there, the input is parsed by the `parseCommand`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "method of `FitNusParser`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`parseCommand` identifies that this is a command to delete lesson, so it calls the `parse` method of"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LessonDeleteCommandParser` on the input."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Within `parse`, the name of the lesson is produced by `ParserUtil` parsing the given argument. This method then creates"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "the Lesson object."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LogicManager` then calls the `execute` method of this returned `LessonDeleteCommand`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Within `execute`, `ModelManager`\u0027s `updateFilteredLessonList` method is called. This removes the unwanted lesson."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The GUI then lists the deleted lesson."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* has a need to manage their busy schedule"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* interested in fitness, or aspiring to start"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* is an NUS student"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Value proposition**: provide a platform for NUS students of any fitness experience to conveniently plan their workout"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "around their classes."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | student who has no knowledge of working out|view what exercise routines the application has|choose the right one for me"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "| `* * *`  | busy student                               | add workout routines into my schedule | have the time to exercise"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "| `* * *`  | student                                    | delete a workout routine       | keep my schedule up-to-date"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | varsity NUS athlete                        | customise my routine               | better target specific muscle groups"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | health-conscious individual                 | log my BMI              | keep better track of my health."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "(For all use cases below, the **System** is the `fitNUS` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Use case: Create a new routine**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests for the current list of routines"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows the list of routines"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "3.  User requests to create a new routine"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "4.  fitNUS adds that routine to its list of routines"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 3a. The given routine name already exists."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Use case: Delete a routine**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests to list routines"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows a list of routines"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "3.  User requests to delete a specific routine in the list"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "4.  fitNUS deletes the routine"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Use case: Add exercise to routine**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests to list routines"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows a list of routines"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "3.  User requests to view exercises in a specific routine"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "4.  fitNUS shows a list exercises in that specific routine"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "5.  User adds the exercise"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 5a. The given exercise name already exists."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 5a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Use case: Delete exercise from routine**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests to list routines"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows a list of routines"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "3.  User requests to view exercises in a specific routine"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "4.  fitNUS shows a list exercises in that specific routine"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "5.  fitNUS deletes the exercise"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 5a. The given index of exercise to delete is invalid."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 5a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case: List all routines in fitNUS**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User requests for all the routines available."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "2.  fitNUS displays all the routines that are available, if there are any."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case: View details of a certain routine**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User requests to view a certain routine."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "2.  fitNUS displays all information of the specified routine."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1a.   Index given by user is invalid."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1a1.  fitNUS shows an error message."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1b.   No routine exists within fitNUS."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1b1.  fitNUS informs the user that there are no routines to view."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Use case: Add completed routine to schedule**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "1.  User requests to view current schedule."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "2.  fitNUS shows the user\u0027s schedule for the day."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "3.  User requests to add a specific routine to a specific slot in schedule."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "4.  fitNUS adds the routine to schedule."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3a. Routine requested by user does not exist."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3b. The slot to add the routine is invalid."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3b1. fitNUS shows an error message."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3c. The slot to add the routine is already in use."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3c1. fitNUS informs the user to input another slot."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Use case: Delete routine from schedule**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "1.  User requests to view current schedule."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "2.  fitNUS shows the user\u0027s schedule for the day."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "3.  User requests to delete a routine from a specific slot in schedule."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "4.  fitNUS deletes the routine from schedule."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3a. The slot requested is not assigned to any routine."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3a1. fitNUS informs the user that the slot is empty."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3b. The slot requested is invalid."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3b1. fitNUS shows an error message."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Use case: View timetable**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "1.  User requests to view their timetable."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "2.  fitNUS displays their timetable."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* 1a.   No timetable exists within fitNUS."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    * 1a1.  fitNUS informs the user that there is no timetable to view yet."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "4.  The system should respond under a second."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "5.  The system should be able to be used by a fitness novice, in the sense that the fitness terms used in fitNUS should not"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "confuse anyone."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "6. The system should remember the details entered by the user during the session, and be carried forward to the next time."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "7. Schedule should be clear and easy to read for the user, and not display too much information at once."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Deleting a Routine"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Deleting a Routine"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Prerequisites: Routine must already exist in fitNUS. In this case, the first Routine is the one to be deleted."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `routine_delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: First Routine is deleted from the list. Successful message will be shown."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `routine_delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `routine_delete`, `routine_delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 41,
      "nicholasyeo": 98,
      "-": 275,
      "khor-jingqian": 91,
      "Licheng-Wu": 126
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS is tailored for **NUS students** that are interested in staying healthy and keeping fit. It is suitable for **all"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitness levels** and is equipped with a **customisable timetable** for you to manage your time wisely and slot in your"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "workout routines with ease."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "fitNUS is extremely easy to use, all you have to do is type in your commands in the command box, and the information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "will be reflected in the user interface for ease of viewing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "This User Guide aims to showcase the features that fitNUS provides, as well as **step-by-step instructions**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "regarding how to make use of these features."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Download the latest `fitNUS.jar` from [here](https://github.com/AY2021S1-CS2103T-T09-2/tp/releases)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your fitNUS."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the above should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. Here are some sample commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   * **`exercise_add`**`n/Curls t/Upper` : Creates an Exercise named \"Curls\" with an \"Upper\" tag."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   * **`routine_create`**`r/Upper Body Session` : Creates a Routine named \"Upper Body Session\"."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   * **`routine_add `**`r/Upper Body Session e/Curls` : Adds an Exercise named \"Curls\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   to a Routine named \"Upper Body Session\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   * **`timetable_add_routine`**`r/Upper Body Session d/Monday T/1600-1800` : Adds the Routine \"Upper Body Session\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   to your timetable on Monday at 1600HRS - 1800HRS."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Please note the following formatting and notations that you will encounter as you read on about fitNUS features:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Formatting | Meaning | Examples"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "e/EXAMPLE | The character before the slash is a prefix, and the capital letters that comes after the slash is your input | n/Leg Workout"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[ x/X ] | Square brackets signify optional fields that you can consider using| [t/Compound]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`mark-up` | Grey highlight of a word signifies the actual input that you can use | `exercise_delete 1`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Call Outs | Red boxes will be drawn up around areas of interest to alert you | -"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3.1 Exercise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "An Exercise is the foundation of fitNUS. It represents a certain exercise that you can perform and you can glean more"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "information about it from the tags under it."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.1.1 Create new exercise : `exercise_add`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Creates a new exercise in fitNUS with the given exercise name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `exercise_add n/EXERCISE_NAME [t/TAG]`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `exercise_add n/Bench Press t/Upper` Creates a new exercise with the name \"Bench Press\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "and tag \"Upper\"."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Successful outcome of adding an exercise \"Bench Press\":**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "![Exercise Add](./images/exercise_add.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.1.2 Delete exercise : `exercise_delete`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes an existing exercise in fitNUS corresponding to the given index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `exercise_delete INDEX`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `exercise_delete 1` Deletes the exercise at index 1 in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Before deleting the first exercise:**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Exercise Delete](./images/exercise_delete_before.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**After deleting the first exercise:**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Note that the first exercise is now \"Pull Ups\" and no longer \"Bench Press\"."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Exercise Delete](./images/exercise_delete_after.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### 3.1.3 Find exercises : `find_exercises`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Finds all exercises in fitNUS whose names contain any of the specified keywords."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `find_exercises KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* `find_exercises bench` Lists all exercises with names matching \"bench\"."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before finding exercises with \"bench\":**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that fitNUS currently displays 3 exercises."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Find Exercises before](./images/exercise_find_before.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**After finding exercises with \"bench\":**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that fitNUS now lists only 1 exercise and displays a success message for you."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Find Exercises](./images/exercise_find_afterpng.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### 3.1.4 List exercises : `list_exercises`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Lists all existing exercises in fitNUS for you to view."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `list_exercises`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before listing all exercises:**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that you are viewing only 1 exercise as of now."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![List Exercises](./images/list_exercises.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**After listing all exercises:**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![List Exercises](./images/list_exercises_after.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3.2 Routine"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Routine is the next building block in fitNUS. It is a collection of Exercise items, and you can customise a"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Routine however you want to, by adding or deleting Exercises from it. You will be able to add Routines to your"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Timetable, but we will cover more of this later."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.2.1 Create new routine : `routine_create`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Creates a new routine in fitNUS with the given routine name."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `routine_create r/ROUTINE_NAME`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `routine_create r/Leg Workout` Creates a new routine with the name \"Leg Workout\"."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Successful outcome of creating a routine \"Leg Workout\":**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Create](./images/routine_create.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.2.2 Delete routine : `routine_delete`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes an existing routine in fitNUS corresponding to the given index."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `routine_delete INDEX`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `routine_delete 3` Deletes the routine with index 3 in the list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before deleting the third routine:**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that fitNUS currently displays 3 routines."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Delete](./images/routine_delete.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**After deleting the third routine:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that fitNUS now displays only 2 routines, and the third routine \"Full Body Workout\" is now removed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Delete After](./images/routine_delete_after.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.2.3 Add exercise to routine : `routine_add`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Adds an existing exercise to a specific routine in fitNUS."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `routine_add r/NAME_OF_TARGET_ROUTINE e/EXERCISE_NAME`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* `routine_add r/Full Workout e/Squat` Adds an exercise named \"Squat\" to the routine \"Full Workout\"."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before adding \"Squat\" to \"Full Workout\":**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Note that \"Squat\" and \"Full Workout\" already exist in fitNUS."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Add Exercise](./images/routine_add.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**After adding \"Squat\" to \"Full Workout\"**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that \"Squat\" now belongs to \"Full Workout\" as a tagging, and fitNUS displays a success message."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Add Exercise](./images/routine_add_after.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.2.4 Delete exercise from routine : `routine_delete_exercise`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Removes an exercise from a specific routine in fitNUS."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `routine_delete_exercise r/NAME_OF_TARGET_ROUTINE e/EXERCISE_NAME`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Following from the previous example:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `routine_delete_exercise r/Full Workout e/Squat` Deletes the exercise \"Squat\" from the routine \"Full Workout\"."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Note how \"Squat\" is no longer found under \"Full Workout\"."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Delete Exercise](./images/routine_delete_exercise.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.2.5 View routine details : `routine_view`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Views the details of a certain routine in fitNUS."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `routine_view INDEX`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `routine_view 2` Views the routine with the index 2."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Before input:**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Note how you can see 3 different routines."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine View](./images/routine_view.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**After input:**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Note how you can only see the routine that was at the second index which is \"Lower Body\"."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine View After](./images/routine_view_after.png)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.2.6 List routines : `routine_list`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Lists out all the routines in fitNUS."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `routine_list`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Following from the previous feature, you may want to list out all the routines in fitNUS after you are done viewing"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\"Lower Body\"."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Result:**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine List](./images/routine_list.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### 3.2.7 Find routines : `find_routines`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Finds all routines with matching keyword given."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `find_routines KEYWORD`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* `find_routines chest` Finds all routines with the keyword \"chest\" in its name, regardless of uppercase or lowercase."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Result:**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Find Routines Result](./images/routine_find_after.png)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3.3 Lesson"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS also boasts a customisable timetable for you to use. You can add Lessons to your timetable to better keep track"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "of your time and never forget another training session."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.3.1 Create new lesson : `lesson_add`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Creates a new lesson in fitNUS with the given lesson name."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `lesson_add n/EXERCISE_NAME [t/TAG]`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `lesson_add n/CS2100 t/Thursday t/0900 t/1hours` Creates a new lesson with the name \"CS2100\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "and tags \"Thursday\", \"0900\" and \"1hours\"."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Successful outcome of adding a lesson \"CS2100\":**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "![Lesson Add](./images/lesson_add.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.3.2 Delete lesson : `lesson_delete`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes an existing lesson in fitNUS corresponding to the given index."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `lesson_delete INDEX`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* `lesson_delete 2` Deletes the lesson at index 2 in the list."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before deleting the lesson:**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Lesson Delete Before](./images/lesson_delete_before.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**After deleting lesson at the second index:**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Note that the lesson at the second index, \"CS2101\", is now removed from fitNUS."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Lesson Delete After](./images/lesson_delete_after.png)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### 3.3.3 Find lessons : `find_lessons`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Finds all lessons in fitNUS whose names contain any of the specified keywords."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `find_lessons KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `find_lessons CS2103T` Lists all lessons with names matching \"CS2103T\"."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before finding \"CS2103T\":**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Find Lessons](./images/find_lessons.png)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**After finding \"CS2103T\":**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Find Lessons](./images/find_lessons_after.png)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### 3.3.4 List lessons : `list_lessons`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "After finding a certain lesson, you may want to view all the lessons registered in fitNUS again."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `list_lessons`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Following from the previous feature, after viewing \"CS2103T\", you may list out all lessons in fitNUS."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Result:**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![List Lessons](./images/list_lessons.png)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3.4 Timetable"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "You can add both Routines and Lessons to your timetable to get an overview of your week. You can switch"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "between the Timetable and Homepage tabs by clicking on the interface."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.4.1 Add routine to timetable : `timetable_add_routine`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds a complete routine into the timetable in fitNUS."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `timetable_add_routine r/ROUTINE_NAME d/DAY_OF_THE_WEEK T/TIMING`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `timetable_add_routine r/Leg Workout d/Monday T/1600-1800`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds routine \"Leg Workout\" to timetable on Monday, 1600-1800."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Timetable Add Routine](./images/timetable_add_routine.png)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.4.2 Add lesson to timetable : `timetable_add_lesson`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds a lesson into the timetable in fitNUS."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `timetable_add_lesson n/LESSON_NAME d/DAY_OF_THE_WEEK T/TIMING`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `timetable_add_lesson n/CS2103T d/Monday T/1200-1400`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds lesson \"CS2103T\" to timetable on Monday, 1200-1400."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "![Timetable Add Lesson](./images/timetable_add_lesson.png)`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.4.3 Delete routine or lesson from schedule : `timetable_delete`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes a routine or lesson from the timetable in fitNUS."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `timetable_delete d/DAY_OF_THE_WEEK t/TIMING`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `timetable_delete d/Monday t/1600-1800`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes the routine or lesson scheduled on Monday, 1600-1800."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Timetable Delete](./images/timetable_delete.png)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.4.4 View timetable : `timetable_view`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Views the timetable in fitNUS."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `timetable_view`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `timetable view` Views timetable."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3.5 BMI"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS allows you to keep track of your height and weight in order to better keep track of your progression of your"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "health journey."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.5.1 Add or edit height : `height`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds the specified height in centimetres to fitNUS."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Format: `height h/HEIGHT`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "* `height h/170` Adds or edits the height of the user, which is 170 cm."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Add height](./images/height.png)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.5.2 Add or edit weight : `weight`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds the specified weight in kilograms to fitNUS."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Format: `weight w/WEIGHT`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "* `weight w/70` Adds or edits the weight of the user, which is 70 kg."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Add weight](./images/weight.png)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.5.3 View BMI : `bmi`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Calculates and displays the user\u0027s BMI based on the height and weight input."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Format: `bmi`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "* `bmi` Views BMI."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3.6 Miscellaneous"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "These are some essential commands that you can use fitNUS that are not linked to any of our features."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.6.1 Help: `help`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Links you to the User Guide where there is comprehensive summary of all command in fitNUS. The link will appear in a"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "pop-up."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "![Help](./images/help.png)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "#### 3.6.2 Exit: `exit`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Saves fitNUS data and closes the application."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 3.7 Saving the data"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Data in fitNUS is saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 3.8 Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## 4. Command summary"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 4.1 Exercise"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Create Exercise** | `exercise_add n/EXERCISE_NAME [t/TAG]` | `exercise_add n/Bench Press t/Upper`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Exercise** | `exercise_delete INDEX` | `exercise_delete 1`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Find Exercises** | `find_exercises KEYWORD [MORE_KEYWORDS]` | `find_exercises Bench Press`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**List Exercises** | `list_exercises`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 4.2 Routine"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Create Routine** | `routine_create r/ROUTINE_NAME` | `routine_create r/Leg Day Session`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Routine** | `routine_delete INDEX` | `routine delete 10`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**View Routine details** | `routine view INDEX` | `routine view 2`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Add Exercise to Routine** | `routine_add r/NAME_OF_TARGET_ROUTINE e/EXERCISE_NAME` | `routine_add r/Leg Day Session e/Squats`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Exercise from Routine** | `routine_delete_exercise r/NAME_OF_TARGET_ROUTINE e/EXERCISE_NAME` | `routine_delete_exercise r/Leg Day Session e/Squats`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**List Routines** | `routine list`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 4.3 Lesson"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Create Lesson** | `lesson_add n/EXERCISE_NAME [t/TAG]` | `lesson_add n/CS2100 t/Thursday t/0900 t/1hours`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Lesson** | `lesson_delete INDEX` | `lesson_delete 1`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**List Lessons** | `list_lessons`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Find Lessons** | `find_lessons KEYWORD [MORE_KEYWORDS]` | `find_lessons CS2103T`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 4.4 Timetable"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Add Routine to Timetable** | `timetable_add_routine r/ROUTINE_NAME d/DAY_OF_THE_WEEK T/TIMING` | `timetable_add_routine add r/Leg Day Session d/Monday T/1600-1800`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Add Lesson to Timetable** | `timetable_add_lesson n/LESSON_NAME d/DAY_OF_THE_WEEK T/TIMING` | `timetable_add_lesson n/CS2103T d/Monday T/1200-1400`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Routine or Lesson from Timetable** | `timetable_delete d/DAY_OF_THE_WEEK T/TIMING` | `timetable_delete d/Monday T/1600-1800`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**View timetable** | `timetable view`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 4.5 BMI"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Add or edit Height** | `height h/HEIGHT` | `height h/170`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Add or edit Weight** | `weight w/WEIGHT` | `weight w/70`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**View BMI** | `bmi`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### 4.6 Miscellaneous"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Action | Format |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "--------|-------|"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Link to User Guide** | `help`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Save and exit fitNUS** | `exit`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous fitNUS home folder."
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 205,
      "patricktan6": 21,
      "-": 92,
      "khor-jingqian": 175,
      "Licheng-Wu": 16
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"exercise_add n/Bicep\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"exercise_add n/Bicep\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addExercise(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveFitNus(fitnus)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "khor-jingqian": 4
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":ExerciseDeleteCommandParser\" as ExerciseDeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \"d:ExerciseDeleteCommand\" as ExerciseDeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[-\u003e LogicManager : execute(\"exercise_delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"exercise_delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e ExerciseDeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create ExerciseDeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser -\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand --\u003e ExerciseDeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser --\u003e FitNusParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "destroy ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e ExerciseDeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand -\u003e Model : getFilteredExerciseList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Model --\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand -\u003e Model : exerciseDelete(index)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Model --\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "CommandResult --\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "khor-jingqian": 36
    }
  },
  {
    "path": "docs/diagrams/FindExercisesSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":FindExercisesCommandParser\" as FindExercisesCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \"f:FindExercisesCommand\" as FindExercisesCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[-\u003e LogicManager : execute(\"find_exercises bench\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"find_exercises bench\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "create FindExercisesCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e FindExercisesCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FindExercisesCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e FindExercisesCommandParser : parse(\"bench\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "create FindExercisesCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommandParser -\u003e FindExercisesCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand --\u003e FindExercisesCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FindExercisesCommandParser --\u003e FitNusParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FindExercisesCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "destroy FindExercisesCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "LogicManager -\u003e FindExercisesCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand-\u003e Model : updateFilteredExerciseList(predicate)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Model --\u003e FindExercisesCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "CommandResult --\u003e FindExercisesCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 10,
      "Licheng-Wu": 59
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class FitNusParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager --\u003e\"1\" FitNusParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d ExerciseAddCommand, \\nFindExercisesCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "khor-jingqian": 4
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Interface ReadOnlyFitNus \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class FitNus"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class ReadOnlyFitNus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Exercise {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Exercise"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class UniqueExerciseList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Routine {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Routine"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class UniqueRoutineList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Lesson {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Lesson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class UniqueLessonList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus .up.|\u003e ReadOnlyFitNus"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ModelManager o--\u003e \"1\" FitNus"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" UniqueExerciseList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" UniqueLessonList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueExerciseList o--\u003e \"*\" Exercise"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Exercise *--\u003e Name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Exercise *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" UniqueRoutineList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueRoutineList o--\u003e \"*\" Routine"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Routine --\u003e \"*\" Exercise"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ModelManager --\u003e\"1\" Exercise : filtered list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "khor-jingqian": 29
    }
  },
  {
    "path": "docs/diagrams/RoutineAddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":RoutineCreateCommandParser\" as RoutineCreateCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \"r:RoutineCreateCommand\" as RoutineCreateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[-\u003e LogicManager : execute(\"routine_create r/Leg Workout\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"routine_create r/Leg Workout\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create RoutineCreateCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e RoutineCreateCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e RoutineCreateCommandParser : parse(\"r/Leg Workout\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create RoutineCreateCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser -\u003e RoutineCreateCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand --\u003e RoutineCreateCommandParser : r"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser --\u003e FitNusParser : r"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "destroy RoutineCreateCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser --\u003e LogicManager : r"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e RoutineCreateCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand -\u003e Model : addRoutine(r)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Model --\u003e RoutineCreateCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "CommandResult --\u003e RoutineCreateCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 69
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Interface FitNusStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class JsonFitNusStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "StorageManager o--\u003e FitNusStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonFitNusStorage .left.|\u003e FitNusStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonFitNusStorage .down.\u003e JsonSerializableFitNus"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonSerializableFitNus .right.\u003e JsonAdaptedExercise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonAdaptedExercise .up.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonSerializableFitNus .down.\u003e JsonAdaptedRoutine"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonAdaptedRoutine .up.\u003e JsonAdaptedExercise"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonSerializableFitNus .right.\u003e JsonAdaptedLesson"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonAdaptedLesson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "khor-jingqian": 12
    }
  },
  {
    "path": "docs/diagrams/TimetableAddRoutineSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":TimetableAddRoutineCommandParser\" as TimetableAddRoutineCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \"t:TimetableAddRoutineCommand\" as TimetableAddRoutineCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[-\u003e LogicManager : execute(\"timetable_add_routine r/Leg Workout d/Monday T/1600-1700\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"timetable_add_routine r/Leg Workout d/Monday T/1600-1700\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "create TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "FitNusParser -\u003e TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "FitNusParser -\u003e TimetableAddRoutineCommandParser : parse(\"r/Leg Workout d/Monday T/1600-1700\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "create TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser -\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand --\u003e TimetableAddRoutineCommandParser : t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser --\u003e FitNusParser : t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "destroy TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "FitNusParser --\u003e LogicManager : t"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "LogicManager -\u003e TimetableAddRoutineCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand -\u003e Model : retrieveRoutine(r)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Model --\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand -\u003e Model : addSlotToTimetable(slot)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Model --\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "CommandResult --\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 74
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class ExerciseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class RoutineListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class LessonListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class RoutineCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class ExerciseCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class LessonCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "MainWindow *-down-\u003e ExerciseListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "MainWindow *-down-\u003e RoutineListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "MainWindow *-down-\u003e LessonListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseListPanel -down-\u003e ExerciseCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineListPanel -down-\u003e RoutineCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonListPanel -down-\u003e LessonCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseCard ..\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCard ..\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonCard ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "khor-jingqian": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_ROUTINES_LISTED_OVERVIEW \u003d \"%1$d routines listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_EXERCISES_LISTED_OVERVIEW \u003d \"%1$d exercises listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_LESSONS_LISTED_OVERVIEW \u003d \"%1$d lessons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_INVALID_ROUTINE_DISPLAYED_INDEX \u003d \"The routine index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "-": 12,
      "khor-jingqian": 2,
      "Licheng-Wu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code charChain}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   Ignores case, a partial char match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *       containsCharIgnoreCase(\"ABc\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *       containsCharIgnoreCase(\"def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *       containsCharIgnoreCase(\"ABc\", \"AB\") \u003d\u003d true // a partial char match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param charChain cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static boolean containsCharIgnoreCase(String sentence, String charChain) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(charChain);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String preppedSentence \u003d sentence.trim().toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String preppedCharChain \u003d charChain.trim().toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        checkArgument(!preppedCharChain.isEmpty(), \"CharChain parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        checkArgument(preppedCharChain.split(\"\\\\s+\").length \u003d\u003d 1, \"CharChain parameter should be a \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + \"single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return preppedSentence.contains(preppedCharChain);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 14,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of exercises */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of routines */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cRoutine\u003e getFilteredRoutineList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lessons */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of slots */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of slots, filtered by chosen day */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList(String day);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of calorie logs */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 4,
      "-": 50,
      "khor-jingqian": 8,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return model.getFilteredRoutineList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return model.getFilteredLessonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return model.getFilteredSlotList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return model.getFilteredSlotList(day);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return model.getFilteredDailyCalorie();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "nicholasyeo": 7,
      "-": 81,
      "khor-jingqian": 12,
      "Licheng-Wu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddHeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddHeightCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"height\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds user\u0027s height (in cm) to fitNUS. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_HEIGHT + \"HEIGHT\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_HEIGHT + \"172.5\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Height added: %.2f cm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String MESSAGE_INVALID_HEIGHT \u003d \"This is not a valid height\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private final double height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Creates an AddHeightCommand to add the specified height in centimetres."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddHeightCommand(double height) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (height \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_HEIGHT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        model.addHeight(height);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, height));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || (other instanceof AddHeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                \u0026\u0026 this.height \u003d\u003d ((AddHeightCommand) other).height);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "patricktan6": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddWeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddWeightCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"weight\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds user\u0027s weight (in kg) to fitNUS. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_WEIGHT + \"WEIGHT\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_WEIGHT + \"70.8\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Weight added: %.2f kg\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String MESSAGE_INVALID_WEIGHT \u003d \"This is not a valid weight\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private final double weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Creates an AddWeightCommand to add the specified weight in kilograms."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddWeightCommand(double weight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (weight \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_WEIGHT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        model.addWeight(weight);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, weight));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || (other instanceof AddWeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                \u0026\u0026 this.weight \u003d\u003d ((AddWeightCommand) other).weight);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "patricktan6": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BmiCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class BmiCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bmi\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the user\u0027s BMI. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Keep grinding! Your BMI is %.2f\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String MESSAGE_INVALID_BMI \u003d \"Your BMI is not available. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Please make sure that you have updated your height and weight.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Creates a BmiCommand to get the BMI Index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public BmiCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        double bmi \u003d model.getBmi();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (Double.isNaN(bmi)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_BMI);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, bmi));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "patricktan6": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalorieAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds a DailyCalorie to fitNUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieAddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calorie_add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the user\u0027s caloric intake to today\u0027s sum. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_CALORIE + \"1000 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calories successfully added: %1$s\" + \"\\nToday\u0027s calories are: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The calories that you are adding is too large! fitNUS is unable to \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"calculate such large values.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final int toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates an CalorieAddCommand to add the specified {@code DailyCalorie}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieAddCommand(int calories) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        toAdd \u003d calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int todayCalories \u003d model.getCalories();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (todayCalories \u003e Integer.MAX_VALUE - toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addCalories(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        todayCalories +\u003d toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + todayCalories, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof CalorieAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 toAdd \u003d\u003d (((CalorieAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalorieMinusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds an Daily Calorie to fitNUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieMinusCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calorie_minus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \": Deducts the specified calorie amount from today\u0027s sum. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_CALORIE + \"1000 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calories successfully deducted: %1$s\" + \"\\nToday\u0027s calories are: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"You are deducting a sum that is greater than today\u0027s calories!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final int toDeduct;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates an CalorieMinusCommand to add the specified {@code DailyCalorie}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieMinusCommand(int calories) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        toDeduct \u003d calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int todayCalories \u003d model.getCalories();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (todayCalories \u003c toDeduct) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.minusCalories(toDeduct);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        todayCalories -\u003d toDeduct;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + todayCalories, toDeduct));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof CalorieMinusCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 toDeduct \u003d\u003d (((CalorieMinusCommand) other).toDeduct));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "khor-jingqian": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"FitNUS has been cleared. You can start afresh now!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExerciseAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Adds an exercise to fitNUS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseAddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to fitNUS. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EMAIL + \"EXERCISE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EMAIL + \"Bench Press \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"Chest \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"Triceps\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in fitNUS\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates an ExerciseAddCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseAddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        toAdd \u003d exercise;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (model.hasExercise(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.addExercise(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof ExerciseAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ExerciseAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "Licheng-Wu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExerciseDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes an exercise identified using it\u0027s displayed index from fitNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \": Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof ExerciseDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ExerciseDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExerciseEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROUTINES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Edits the details of an existing exercise in fitNUS."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseEditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"by the index number used in the displayed exercise list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EXERCISE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EMAIL + \"Shoulder Press \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"Deltoids\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the address book.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param index of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseEditCommand(Index index, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.editExerciseDescriptor \u003d new EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise) \u0026\u0026 model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                                                 EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Name updatedName \u003d editExerciseDescriptor.getName().orElse(exerciseToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExerciseDescriptor.getTags().orElse(exerciseToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new Exercise(updatedName, updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof ExerciseEditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand e \u003d (ExerciseEditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * corresponding field value of the exercise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public EditExerciseDescriptor() {}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public EditExerciseDescriptor(EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (!(other instanceof EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            EditExerciseDescriptor e \u003d (EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "khor-jingqian": 2,
      "Licheng-Wu": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExerciseFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Finds and lists all exercises in fitNUS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class ExerciseFindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all exercises whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" bench shoulder leg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final ExerciseNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates an ExerciseFindCommand to find the specified {@code ExerciseNameContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ExerciseFindCommand(ExerciseNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                String.format(Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof ExerciseFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((ExerciseFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 10,
      "Licheng-Wu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExerciseListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Lists all exercises in fitNUS to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class ExerciseListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "Licheng-Wu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting fitNUS as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String NO_COMMAND_MESSAGE \u003d \"There are no commands containing this keyword. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"A brief description of all possible commands is listed below.\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"help:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Shows program usage instructions and format for all commands.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Additionally, use a keyword to search for a group of commands.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: help OR help [COMMAND_KEYWORD]\\n\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String CLEAR_MESSAGE \u003d \"clear:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Clears all data entries from fitNUS.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: clear\\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"exit:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Terminates the program.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exit\\n\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ADD_HEIGHT_MESSAGE \u003d \"height:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds user\u0027s height (in cm) to fitNUS.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: height h/HEIGHT\\n\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ADD_WEIGHT_MESSAGE \u003d \"weight:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds user\u0027s weight (in kg) to fitNUS.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: weight w/WEIGHT\\n\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String BMI_MESSAGE \u003d \"bmi:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Views the user\u0027s BMI.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: bmi\\n\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String CALORIE_ADD_MESSAGE \u003d \"calorie_add:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds the user\u0027s caloric intake to today\u0027s sum.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: calorie_add c/CALORIE\\n\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String CALORIE_MINUS_MESSAGE \u003d \"calorie_minus:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deducts the specified calorie amount from today\u0027s sum.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: calorie_minus c/CALORIE\\n\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_ADD_MESSAGE \u003d \"exercise_add:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an exercise to fitNUS.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_add e/EXERCISE [t/TAG]\\n\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_DELETE_MESSAGE \u003d \"exercise_delete:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_delete INDEX (must be a positive integer)\\n\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_EDIT_MESSAGE \u003d \"exercise_edit:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Edits the details of the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_edit INDEX (must be a positive integer) [e/EXERCISE] [t/TAG]\\n\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_FIND_MESSAGE \u003d \"exercise_find:\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Finds all exercises whose names contain any of the specified keywords (case-insensitive) and displays\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_find KEYWORD [MORE_KEYWORDS]\\n\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_LIST_MESSAGE \u003d \"exercise_list:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Displays a list of all exercises in fitNUS.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_list\\n\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_CREATE_MESSAGE \u003d \"routine_create:\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Creates a new routine in fitNUS.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_create r/ROUTINE\\n\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_DELETE_MESSAGE \u003d \"routine_delete:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the routine identified by the index number used in the displayed routine list.\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_delete INDEX (must be a positive integer)\\n\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_FIND_MESSAGE \u003d \"routine_find:\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Finds all routines whose names contain any of the specified keywords (case-insensitive) and displays\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_find KEYWORD [MORE_KEYWORDS]\\n\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_LIST_MESSAGE \u003d \"routine_list\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Displays a list of all routines in fitNUS.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_list\\n\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_ADD_EXERCISE_MESSAGE \u003d \"routine_add_exercise:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an existing exercise to a routine in fitNUS.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_add_exercise r/ROUTINE e/EXERCISE\\n\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_DELETE_EXERCISE_MESSAGE \u003d \"routine_delete_exercise:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the exercise from the specified routine.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_delete_exercise r/ROUTINE e/EXERCISE\\n\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_VIEW_EXERCISE_MESSAGE \u003d \"routine_view_exercise:\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Views all exercises contained in a routine in fitNUS.\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_view_exercise INDEX (must be a positive integer)\\n\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_ADD_MESSAGE \u003d \"lesson_add:\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds a lesson to fitNUS.\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_add n/LESSON [t/TAG]\\n\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_DELETE_MESSAGE \u003d \"lesson_delete:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_delete INDEX (must be a positive integer)\\n\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_EDIT_MESSAGE \u003d \"lesson_edit:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Edits the details of the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_edit INDEX (must be a positive integer) [n/LESSON] [t/TAG]\\n\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_FIND_MESSAGE \u003d \"lesson_find:\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Finds all lessons whose names contain any of the specified keywords (case-insensitive) and displays\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_find KEYWORD [MORE_KEYWORDS]\\n\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_LIST_MESSAGE \u003d \"lesson_list:\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Displays a list of all lessons in fitNUS.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_list\\n\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String TIMETABLE_ADD_ROUTINE_MESSAGE \u003d \"timetable_add_routine:\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an existing routine to the timetable in fitNUS.\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: timetable_add_routine r/ROUTINE d/DAY T/TIME\\n\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String TIMETABLE_ADD_LESSON_MESSAGE \u003d \"timetable_add_lesson:\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an existing lesson to the timetable in fitNUS.\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: timetable_add_lesson n/LESSON d/DAY T/TIME\\n\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String TIMETABLE_DELETE_SLOT_MESSAGE \u003d \"timetable_delete_slot:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the slot identified by its day and time.\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: timetable_delete_slot d/Day T/TIME\\n\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String STANDARDIZED_HELP_MESSAGE \u003d HELP_MESSAGE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + CLEAR_MESSAGE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXIT_MESSAGE"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ADD_HEIGHT_MESSAGE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ADD_WEIGHT_MESSAGE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + BMI_MESSAGE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + CALORIE_ADD_MESSAGE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + CALORIE_MINUS_MESSAGE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_ADD_MESSAGE"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_DELETE_MESSAGE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_EDIT_MESSAGE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_FIND_MESSAGE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_LIST_MESSAGE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_CREATE_MESSAGE"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_DELETE_MESSAGE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_FIND_MESSAGE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_LIST_MESSAGE"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_ADD_EXERCISE_MESSAGE"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_DELETE_EXERCISE_MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_VIEW_EXERCISE_MESSAGE"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_ADD_MESSAGE"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_DELETE_MESSAGE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_EDIT_MESSAGE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_FIND_MESSAGE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_LIST_MESSAGE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + TIMETABLE_ADD_ROUTINE_MESSAGE"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + TIMETABLE_ADD_LESSON_MESSAGE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + TIMETABLE_DELETE_SLOT_MESSAGE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final LinkedHashMap\u003cString, String\u003e privateMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static Set\u003cString\u003e privateSet;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static String filteredSearch;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // for testing in HelpCommandTest class"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a HelpCommand to filter out the {@code String}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public HelpCommand(String keyword) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        addMessagesToMap();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateSet \u003d keySet();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static String getFilteredSearch() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return filteredSearch;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds all help messages to the private HashMap."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private void addMessagesToMap() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"help\", HELP_MESSAGE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"clear\", CLEAR_MESSAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exit\", EXIT_MESSAGE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"height\", ADD_HEIGHT_MESSAGE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"weight\", ADD_WEIGHT_MESSAGE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"bmi\", BMI_MESSAGE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"calorie_add\", CALORIE_ADD_MESSAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"calorie_minus\", CALORIE_MINUS_MESSAGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_add\", EXERCISE_ADD_MESSAGE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_delete\", EXERCISE_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_edit\", EXERCISE_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_find\", EXERCISE_FIND_MESSAGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_list\", EXERCISE_LIST_MESSAGE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_create\", ROUTINE_CREATE_MESSAGE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_delete\", ROUTINE_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_find\", ROUTINE_FIND_MESSAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_list\", ROUTINE_LIST_MESSAGE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_add_exercise\", ROUTINE_ADD_EXERCISE_MESSAGE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_delete_exercise\", ROUTINE_DELETE_EXERCISE_MESSAGE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_view_exercise\", ROUTINE_VIEW_EXERCISE_MESSAGE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_add\", LESSON_ADD_MESSAGE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_delete\", LESSON_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_edit\", LESSON_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_find\", LESSON_FIND_MESSAGE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_list\", LESSON_LIST_MESSAGE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"timetable_add_routine\", TIMETABLE_ADD_ROUTINE_MESSAGE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"timetable_add_lesson\", TIMETABLE_ADD_LESSON_MESSAGE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"timetable_delete_slot\", TIMETABLE_DELETE_SLOT_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a set out of the key elements contained in the private HashMap"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @return a set having the keys of the HashMap"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Set\u003cString\u003e keySet() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return privateMap.keySet();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Gives a String of usage instructions for all commands containing the keyword as a char sequence."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param keyword is the char sequence"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @return String that shows all commands containing the keyword"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private String printIfCharSequence(String keyword) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(privateSet);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (String command : privateSet) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (!command.contains(keyword)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            result \u003d result + privateMap.get(command);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private void setFilteredSearch() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            filteredSearch \u003d STANDARDIZED_HELP_MESSAGE;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            filteredSearch \u003d printIfCharSequence(keyword);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (filteredSearch.isEmpty()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            filteredSearch \u003d NO_COMMAND_MESSAGE + STANDARDIZED_HELP_MESSAGE;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        setFilteredSearch();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 229,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LessonAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Adds a lesson to user\u0027s timetable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonAddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to fitNUS. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_NAME + \"LESSON \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_NAME + \"CS2103T \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"lecture \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"consult\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in your timetable\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a LessonAddCommand to add the specified {@code Lesson}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonAddCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        toAdd \u003d lesson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (model.hasLesson(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.addLesson(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 toAdd.equals(((LessonAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LessonDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes a lesson identified using it\u0027s displayed index from fitNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \": Deletes the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((LessonDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LessonEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Edits the details of an existing lesson in FitNUS."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonEditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the lesson identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"by the index number used in the displayed lesson list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"LESSON] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_NAME + \"CS1231 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"tutorial\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in FitNUS.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param index of the lesson in the filtered lesson list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param editLessonDescriptor details to edit the lesson with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonEditCommand(Index index, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(editLessonDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!lessonToEdit.isSameLesson(editedLesson) \u0026\u0026 model.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.setLesson(lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates and returns a {@code Lesson} with the details of {@code lessonToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * edited with {@code editLessonDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static Lesson createEditedLesson(Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name updatedName \u003d editLessonDescriptor.getName().orElse(lessonToEdit.getName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editLessonDescriptor.getTags().orElse(lessonToEdit.getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson(updatedName, updatedTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!(other instanceof LessonEditCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand e \u003d (LessonEditCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Stores the details to edit the lesson with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * corresponding field value of the lesson."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public EditLessonDescriptor() {}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public EditLessonDescriptor(EditLessonDescriptor toCopy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (!(other instanceof EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            EditLessonDescriptor e \u003d (EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LessonFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Finds and lists all lessons in fitNUS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonFindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all lessons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" GES1035 geq cs\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final LessonNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a LessonFindCommand to find the specified {@code LessonNameContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonFindCommand(LessonNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                String.format(Messages.MESSAGE_LESSONS_LISTED_OVERVIEW, model.getFilteredLessonList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((LessonFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LessonListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Lists all lessons in fitNUS to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lessons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimetableAddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddLessonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable_add_lesson\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing lesson to the timetable in fitNUS. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_NAME + \"LESSON \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_NAME + \"CS2030 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"1600-1800\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Slot added to Timetable: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_LESSON \u003d \"This lesson does not exist in fitNUS\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"This slot already exists in your timetable\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"This slot overlaps with another slot in your timetable\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Lesson lesson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Creates an RoutineAddCommand to add the specified {@code Routine}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddLessonCommand(Lesson lesson, Day day, Duration duration) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(lesson, day, duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!model.hasLesson(lesson)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_LESSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson lessonToAdd \u003d model.retrieveLesson(lesson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(lessonToAdd, day, duration);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (model.hasSlot(slot)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else if (model.hasOverlappingSlot(slot)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        model.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, slot));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof TimetableAddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 lesson.equals(((TimetableAddLessonCommand) other).lesson)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 day.equals(((TimetableAddLessonCommand) other).day)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 duration.equals(((TimetableAddLessonCommand) other).duration));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimetableAddRoutineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddRoutineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable_add_routine\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing routine to the timetable in fitNUS. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"1600-1800\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Slot added to Timetable: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"This slot already exists in your timetable\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"This slot overlaps with another slot in your timetable\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Routine routine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Creates an RoutineAddCommand to add the specified {@code Routine}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddRoutineCommand(Routine routine, Day day, Duration duration) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(routine, day, duration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.routine \u003d routine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!model.hasRoutine(routine)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine routineToAdd \u003d model.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(routineToAdd, day, duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (model.hasSlot(slot)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else if (model.hasOverlappingSlot(slot)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        model.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, slot));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof TimetableAddRoutineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 routine.equals(((TimetableAddRoutineCommand) other).routine)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 day.equals(((TimetableAddRoutineCommand) other).day)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 duration.equals(((TimetableAddRoutineCommand) other).duration));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimetableDeleteSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes a slot from the timetable in fitNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableDeleteSlotCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable_delete_slot\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the slot identified by its day and time. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"1600-1800\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DELETE_SLOT_SUCCESS \u003d \"Deleted Slot: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_SLOT \u003d \"This slot does not exist in your timetable.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Slot slotToFind;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableDeleteSlotCommand(Slot slot) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slotToFind \u003d slot;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e lastShownList \u003d model.getFilteredSlotList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean hasSlot \u003d lastShownList.stream().anyMatch(slotToFind::isSameSlot);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!hasSlot) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_SLOT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slotToDelete \u003d lastShownList.stream().filter(slotToFind::isSameSlot).findFirst().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        model.deleteSlotFromTimetable(slotToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SLOT_SUCCESS, slotToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof TimetableDeleteSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 slotToFind.equals(((TimetableDeleteSlotCommand) other).slotToFind));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineAddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Adds an exercise to a routine in fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineAddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_add_exercise\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing exercise to a routine in fitNUS. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EMAIL + \"EXERCISE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_EMAIL + \"Squats \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exercise added to Routine: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_EXERCISE \u003d \"This exercise does not exist in fitNUS\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the routine!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine routineToAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Exercise exerciseToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineAddExerciseCommand to add the specified {@code Exercise} to the {@code Routine}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineAddExerciseCommand(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineToAdd \u003d routine;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        exerciseToAdd \u003d exercise;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!model.hasRoutine(routineToAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (!model.hasExercise(exerciseToAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            model.addExerciseToRoutine(routineToAdd, exerciseToAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new CommandResult(String.format(String.format(MESSAGE_SUCCESS, routineToAdd), exerciseToAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (DuplicateExerciseException error) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineAddExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 routineToAdd.equals(((RoutineAddExerciseCommand) other).routineToAdd))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 exerciseToAdd.equals(((RoutineAddExerciseCommand) other).exerciseToAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 7,
      "khor-jingqian": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineCreateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Creates a new routine in fitNUS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_create\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new routine in fitNUS. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New routine added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROUTINE \u003d \"This routine already exists in fitNUS\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineCreateCommand to create the specified {@code Routine}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineCreateCommand(Routine routine) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        toAdd \u003d routine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (model.hasRoutine(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROUTINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineCreateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RoutineCreateCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "khor-jingqian": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Deletes a routine identified using it\u0027s displayed index from fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \": Deletes the routine identified by the index number used in the displayed routine list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_DELETE_ROUTINE_SUCCESS \u003d \"Deleted Routine: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineDeleteCommand to delete the specified {@code Index} of the routine"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e lastShownList \u003d model.getFilteredRoutineList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROUTINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.deleteRoutine(routineToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ROUTINE_SUCCESS, routineToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RoutineDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "khor-jingqian": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineDeleteExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes an exercise from a routine in fitNUS."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteExerciseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_delete_exercise\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the exercise from the specified routine. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EMAIL + \"EXERCISE\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_EMAIL + \"Squats \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise from Routine: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"Deleted Exercise from Routine: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_EXERCISE \u003d \"Deleted Exercise from Routine: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine routine;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Exercise exercise;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineDeleteExerciseCommand to delete the specified {@code Exercise} from the {@code Routine}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteExerciseCommand(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routine \u003d routine;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!model.hasRoutine(routine)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (!model.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.deleteExerciseToRoutine(routine, exercise);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                routine), exercise));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineDeleteExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 exercise.equals(((RoutineDeleteExerciseCommand) other).exercise) // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 routine.equals(((RoutineDeleteExerciseCommand) other).routine)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "khor-jingqian": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Finds and lists all routines in fitNUS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class RoutineFindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all routines whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Lower\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineFindCommand to find the specified {@code RoutineNameContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public RoutineFindCommand(RoutineNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String.format(Messages.MESSAGE_ROUTINES_LISTED_OVERVIEW, model.getFilteredRoutineList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof RoutineFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((RoutineFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 9,
      "khor-jingqian": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROUTINES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Lists all routines in fitNUS to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all routines\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "khor-jingqian": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineViewExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Views all exercises for a specified routine in fitNUS."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class RoutineViewExerciseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_view_exercise\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views all exercises contained in a routine in fitNUS. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Routine requested:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS_ROUTINE \u003d \"This routine index is out of bounds!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Index toView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineViewExerciseCommand to view all exercises for the specified {@code Index} of the routine"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public RoutineViewExerciseCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        toView \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e lastShownList \u003d model.getFilteredRoutineList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (toView.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_OUT_OF_BOUNDS_ROUTINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToView \u003d lastShownList.get(toView.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.viewRoutine(routineToView);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof RoutineViewExerciseCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 9,
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddHeightCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddHeightCommandParser implements Parser\u003cAddHeightCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddHeightCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * and returns an AddHeightCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddHeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_HEIGHT)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        double height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new AddHeightCommand(height);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patricktan6": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddWeightCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddWeightCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddWeightCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * and returns an AddWeightCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddWeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WEIGHT)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        double weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new AddWeightCommand(weight);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patricktan6": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.BmiCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.ExerciseFindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.ExerciseListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonFindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewExerciseCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineAddExerciseCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineCreateCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineDeleteCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineDeleteExerciseCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineFindCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineViewExerciseCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case AddHeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new AddHeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case AddWeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new AddWeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case BmiCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new BmiCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case CalorieAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new CalorieAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case CalorieMinusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new CalorieMinusCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        case ExerciseAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return new ExerciseAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case ExerciseDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new ExerciseDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        case ExerciseEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return new ExerciseEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case ExerciseFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new ExerciseFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case ExerciseListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new ExerciseListCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineCreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineCreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case RoutineDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new RoutineDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case RoutineFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new RoutineFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineListCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineAddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineAddExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case RoutineDeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new RoutineDeleteExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case RoutineViewExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new RoutineViewExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonListCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case TimetableAddRoutineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new TimetableAddRoutineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case TimetableAddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new TimetableAddLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case TimetableDeleteSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new TimetableDeleteSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 57,
      "patricktan6": 4,
      "nicholasyeo": 13,
      "-": 57,
      "khor-jingqian": 21,
      "Licheng-Wu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalorieAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new CalorieAddCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieAddCommandParser implements Parser\u003cCalorieAddCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalorieAddCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns an CalorieAddCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALORIE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALORIE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalorieAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int calories \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CalorieAddCommand(calories);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalorieMinusCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new CalorieMinusCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieMinusCommandParser implements Parser\u003cCalorieMinusCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalorieMinusCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns an CalorieMinusCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieMinusCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALORIE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALORIE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalorieMinusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int calories \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CalorieMinusCommand(calories);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Prefix PREFIX_ROUTINE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"T/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Prefix PREFIX_CALORIE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patricktan6": 2,
      "nicholasyeo": 2,
      "-": 15,
      "khor-jingqian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new ExerciseAddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseAddCommandParser implements Parser\u003cExerciseAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseAddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * and returns an ExerciseAddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ExerciseAddCommand(exercise);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "Licheng-Wu": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new ExerciseDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseDeleteCommandParser implements Parser\u003cExerciseDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * and returns a ExerciseDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return new ExerciseDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Parses input arguments and creates a new ExerciseEditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseEditCommandParser implements Parser\u003cExerciseEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseEditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * and returns an ExerciseEditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    ExerciseEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor editExerciseDescriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            editExerciseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExerciseDescriptor::setTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException(ExerciseEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ExerciseEditCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "Licheng-Wu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExerciseFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.ExerciseFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new ExerciseFindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class ExerciseFindCommandParser implements Parser\u003cExerciseFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a ExerciseFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ExerciseFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new ExerciseFindCommand(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "Licheng-Wu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LessonAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonAddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonAddCommandParser implements Parser\u003cLessonAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonAddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonAddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d new Lesson(name, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonAddCommand(lesson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LessonDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonDeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonDeleteCommandParser implements Parser\u003cLessonDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonDeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LessonEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonEditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonEditCommandParser implements Parser\u003cLessonEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonEditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonEditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, LessonEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor editLessonDescriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            editLessonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editLessonDescriptor::setTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException(LessonEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonEditCommand(index, editLessonDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LessonFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.LessonFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonFindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonFindCommandParser implements Parser\u003cLessonFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonFindCommand(new LessonNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses a {@code String day} into a {@code Day}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Day parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day dayEnum \u003d Day.getDayEnum(day.trim().toLowerCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (Day.isUnknownDay(dayEnum)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return dayEnum;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses a {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String[] timeSplit \u003d trimmedDuration.split(\"-\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startHour \u003d Integer.parseInt(timeSplit[0].substring(0, 2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startMinute \u003d Integer.parseInt(timeSplit[0].substring(2, 4));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(startHour, startMinute);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endHour \u003d Integer.parseInt(timeSplit[1].substring(0, 2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endMinute \u003d Integer.parseInt(timeSplit[1].substring(2, 4));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(endHour, endMinute);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(startTime, endTime)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Duration(startTime, endTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Parses {@code String height} into a {@code int}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static double parseHeight(String height) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return Double.parseDouble(trimmedHeight);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Parses {@code String weight} into a {@code int}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static double parseWeight(String weight) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return Double.parseDouble(trimmedWeight);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses a {@code String calorie} into an integer."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the given {@code calorie} is less than or equal to 0."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static int parseCalorie(String calorie) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int trimmedCalorie;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            trimmedCalorie \u003d Integer.parseInt(calorie.trim());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(\"Calorie input is way too large for fitNUS to handle!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (trimmedCalorie \u003c\u003d 0) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(\"Calorie input should never be less than or equal to 0!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return trimmedCalorie;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 48,
      "patricktan6": 18,
      "-": 124,
      "khor-jingqian": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimetableAddLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Parses input arguments and creates a new TimetableAddLessonCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddLessonCommandParser implements Parser\u003cTimetableAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * and returns an RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DAY, PREFIX_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DAY, PREFIX_TIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    TimetableAddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Name lessonName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson lesson \u003d new Lesson(lessonName, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new TimetableAddLessonCommand(lesson, day, duration);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimetableAddRoutineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Parses input arguments and creates a new TimetableAddRoutineCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddRoutineCommandParser implements Parser\u003cTimetableAddRoutineCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * and returns an RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddRoutineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE, PREFIX_DAY, PREFIX_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE, PREFIX_DAY, PREFIX_TIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    TimetableAddRoutineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Name routineName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine routine \u003d new Routine(routineName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new TimetableAddRoutineCommand(routine, day, duration);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimetableDeleteSlotCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Parses input arguments and creates a new TimetableDeleteSlotCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableDeleteSlotCommandParser implements Parser\u003cTimetableDeleteSlotCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * and returns an RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableDeleteSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_TIME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    TimetableDeleteSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slotToFind \u003d new Slot(day, duration);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new TimetableDeleteSlotCommand(slotToFind);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineAddExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineAddExerciseCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineAddExerciseCommandParser implements Parser\u003cRoutineAddExerciseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineAddExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    RoutineAddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name routineName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name exerciseName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d new Routine(routineName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise exercise \u003d new Exercise(exerciseName, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineAddExerciseCommand(routine, exercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineCreateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineCreateCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommandParser implements Parser\u003cRoutineCreateCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineCreateCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineCreateCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineCreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineCreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d new Routine(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineCreateCommand(routine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new RoutineDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteCommandParser implements Parser\u003cRoutineDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns a RoutineDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineDeleteExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineDeleteExerciseCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteExerciseCommandParser implements Parser\u003cRoutineDeleteExerciseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineDeleteExerciseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineDeleteExerciseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    RoutineDeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name routineName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name exerciseName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d new Routine(routineName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise exercise \u003d new Exercise(exerciseName, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineDeleteExerciseCommand(routine, exercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class RoutineFindCommandParser implements Parser\u003cRoutineFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public RoutineFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new RoutineFindCommand(new RoutineNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "khor-jingqian": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineViewExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewExerciseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineViewExerciseCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class RoutineViewExerciseCommandParser implements Parser\u003cRoutineViewExerciseCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineViewExerciseCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineViewExerciseCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public RoutineViewExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new RoutineViewExerciseCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineViewExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 9,
      "khor-jingqian": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.CalorieLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Timetable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.UniqueExerciseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.UniqueLessonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.UniqueRoutineList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final UniqueExerciseList exercises;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final UniqueRoutineList routines;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private double height \u003d Double.NaN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private double weight \u003d Double.NaN;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Timetable timetable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieLog calorieLog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * among constructors."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    //// user-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Adds the height of the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * @param height the height of the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public void addHeight(double height) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Adds the weight of the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * @param weight the weight of the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public void addWeight(double weight) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return this.weight / Math.pow((this.height / 100.0), 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the contents of exercise list with {@code exercises}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.exercises.setExercises(exercises);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of routines list with {@code routines}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routines} must not contain duplicate routines."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines(List\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routines.setRoutines(routines);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the contents of lesson list with {@code lessons}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Replaces the contents of slot list with {@code slots}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code slots} must not contain duplicate slots or overlapping slots."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.setSlots(slots);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        setExercises(newData.getExerciseList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        setRoutines(newData.getRoutineList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        setSlots(newData.getSlotList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addCalorieEntries(newData.getDailyCalorieList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        addHeight(newData.getHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        addWeight(newData.getWeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if an exercise with the same identity as {@code exercise} exists in fitNUS."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return exercises.contains(exercise);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if a routine with the same identity as {@code routine} exists in fitNUS."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return routines.contains(r);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in the timetable."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.contains(lesson);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if the slot is already occupied in the timetable."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be checked."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if the slot is already occupied in the timetable."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return timetable.hasSlot(slot);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if the slot has overlapping duration with another slot in the timetable."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be checked."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if the slot has overlapping duration with another slot in the timetable."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlappingDurationInSlot(Slot slot) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return timetable.hasOverlapDuration(slot);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Adds an exercise to fitNUS."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * The exercise must not already exist in fitNUS."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addExercise(Exercise e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        exercises.add(e);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a lesson to the timetable."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must not already exist in the timetable."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addLesson(Lesson e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.add(e);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.add(routine);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String viewRoutine(int index) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return routines.viewRoutine(index);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in FitNUS."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(editedExercise);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the given lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in FitNUS."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(editedLesson);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.setSlot(target, editedLesson);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Removes {@code key} from {@code fitNUS}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code key} must exist in fitNUS."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void removeExercise(Exercise key) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises.remove(key);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.deleteExercise(key);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Removes {@code key} from {@code fitNUS}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code key} must exist in fitNUS."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void removeLesson(Lesson key) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.remove(key);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.deleteSlot(key);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes {@code key} from {@code fitNUS}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code key} must exist in fitNUS."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void removeRoutine(Routine key) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.remove(key);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.deleteSlot(key);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Removes {@code key} from timetable in {@code fitNUS}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code key} must exist in timetable."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void removeSlotFromTimetable(Slot key) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.deleteSlot(key);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getRoutineList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return routines.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return exercises.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return timetable.getSlotList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getDailyCalorieList() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return calorieLog.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Checks the index given is within the bounds of Routine."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param index index that is input by user."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return False if out of bounds."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean checkBounds(int index) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return index \u003e 0 \u0026\u0026 index \u003c\u003d routines.checkSize();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lists out all of the Routines that fitNUS has."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return String containing all the Routines."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String listRoutines() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return routines.listRoutines();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds an existing Exercise in fitNUS to an existing Routine."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param r Existing Routine."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param e Existing Exercise."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(e);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise retrievedExercise \u003d exercises.retrieveExercise(e);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine retrievedRoutine \u003d routines.retrieveRoutine(r);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.addExercise(retrievedRoutine, retrievedExercise);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Adds a Slot to the Timetable in fitNUS."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be added."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.addSlot(slot);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Lesson object from UniqueLessonList that the user specified."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param lesson Lesson object that the user wants."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Lesson object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return lessons.retrieveLesson(lesson);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Routine object from UniqueRoutineList that the user specified."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param routine Routine object that the user wants."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Routine object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return routines.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes an existing Exercise in fitNUS from an existing Routine."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param r Existing Routine."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param e Existing Exercise."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(e);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise retrievedExercise \u003d exercises.retrieveExercise(e);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine retrievedRoutine \u003d routines.retrieveRoutine(r);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.deleteExerciseFromRoutine(retrievedRoutine, retrievedExercise);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds calories into today\u0027s calorie log."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param calories The amount of calories that the user wants to add."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalories(int calories) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog.addCalories(calories);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deducts calories in today\u0027s calorie log."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param calories The amount of calories that the user wants to deduct."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog.minusCalories(calories);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the number of calories for today."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Number of calories for today."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return calorieLog.getCalories();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Checks if calorie log currently contains a certain daily calorie entry."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param dailyCalorie Specific Daily Calorie object that the user wants to find."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return True if calorie log contains what the user is looking for."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasDailyCalorie(DailyCalorie dailyCalorie) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(dailyCalorie);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return calorieLog.contains(dailyCalorie);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds all the daily calorie entries into the calorie log."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param entries Collection of all the entries of daily calorie."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalorieEntries(List\u003cDailyCalorie\u003e entries) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog.setCalorieLog(entries);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 55,
      "nicholasyeo": 84,
      "patricktan6": 49,
      "-": 119,
      "khor-jingqian": 138,
      "Licheng-Wu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Predicate\u003cRoutine\u003e PREDICATE_SHOW_ALL_ROUTINES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Predicate\u003cLesson\u003e PREDICATE_SHOW_ALL_LESSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Predicate\u003cDailyCalorie\u003e PREDICATE_SHOW_ALL_LOGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise must exist in fitNUS."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Deletes the given lesson."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must exist in fitNUS."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void deleteLesson(Lesson target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns an unmodifiable view of the filtered exercise list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the filtered lesson list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list, filtered by the chosen day"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList(String day);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Updates the filter of the filtered calorie log to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if a exercise with the same details as {@code exercise} exists in fitNUS."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code exercise} must not already exist in fitNUS."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the given exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in FitNUS."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds the given routine."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routine} must not already exist in fitNUS."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void addRoutine(Routine routine);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if a routine with the same identity as {@code routine} exists in fitNUS."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    boolean hasRoutine(Routine r);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds the given exercise to the given routine."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code r} must already exist in fitNUS."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code e} must already exist in fitNUS."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void addExerciseToRoutine(Routine r, Exercise e);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * List out all the routines in fitNUS."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    String listRoutines();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Updates the filter of the filtered routine list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void deleteRoutine(Routine target);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    boolean hasSlot(Slot slot);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    boolean hasOverlappingSlot(Slot slot);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void addSlotToTimetable(Slot slot);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void deleteSlotFromTimetable(Slot target);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    void addHeight(double height);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    void addWeight(double weight);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    double getBmi();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a lesson with the same details as {@code lesson} exists in timetable."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    boolean hasLesson(Lesson lesson);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds the given lesson."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code lesson} must not already exist in timetable."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedLesson}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in FitNUS."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void setLesson(Lesson target, Lesson editedLesson);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cRoutine\u003e getFilteredRoutineList();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Lesson object from UniqueLessonList that the user specified."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param lesson Lesson object that the user wants."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Lesson object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Lesson retrieveLesson(Lesson lesson);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Routine object from UniqueRoutineList that the user specified."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param routine Routine object that the user wants."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Routine object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Routine retrieveRoutine(Routine routine);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes the specified exercise from an existing routine."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routine} must already exist within fitNUS."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code exercise} must already exist within fitNUS."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void deleteExerciseToRoutine(Routine routine, Exercise exercise);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void viewRoutine(Routine routineToView);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void addCalories(int calories);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void minusCalories(int calories);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    int getCalories();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 37,
      "nicholasyeo": 24,
      "patricktan6": 26,
      "-": 84,
      "khor-jingqian": 87,
      "Licheng-Wu": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.SlotDayPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final FilteredList\u003cRoutine\u003e filteredRoutine;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final FilteredList\u003cSlot\u003e filteredSlots;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final FilteredList\u003cDailyCalorie\u003e filteredDailyCalories;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        filteredExercises \u003d new FilteredList\u003c\u003e(this.addressBook.getExerciseList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        filteredRoutine \u003d new FilteredList\u003c\u003e(this.addressBook.getRoutineList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(this.addressBook.getLessonList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        filteredSlots \u003d new FilteredList\u003c\u003e(this.addressBook.getSlotList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        filteredDailyCalories \u003d new FilteredList\u003c\u003e(this.addressBook.getDailyCalorieList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        addressBook.removeExercise(target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        addressBook.removeLesson(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteRoutine(Routine target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.removeRoutine(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void deleteSlotFromTimetable(Slot target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        addressBook.removeSlotFromTimetable(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        addressBook.addExercise(exercise);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        addressBook.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.addRoutine(routine);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalories(int calories) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.addCalories(calories);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredCalorieLog(PREDICATE_SHOW_ALL_LOGS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        filteredDailyCalories.setPredicate(predicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.minusCalories(calories);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return addressBook.getCalories();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredDailyCalories;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return addressBook.hasRoutine(r);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.addExerciseToRoutine(r, e);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.deleteExerciseToRoutine(r, e);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return addressBook.hasExercise(exercise);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String listRoutines() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return addressBook.listRoutines();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public void addHeight(double height) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        addressBook.addHeight(height);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public void addWeight(double weight) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        addressBook.addWeight(weight);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return addressBook.getBmi();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a Lesson into fitNUS."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param lesson Lesson object that is to be added to fitNUS."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        addressBook.addLesson(lesson);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        addressBook.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return addressBook.hasLesson(lesson);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return addressBook.hasSlot(slot);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlappingSlot(Slot slot) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return addressBook.hasOverlappingDurationInSlot(slot);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        addressBook.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return addressBook.retrieveLesson(lesson);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return addressBook.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void viewRoutine(Routine r) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String argument \u003d r.getName().fullName;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] nameKeywords \u003d argument.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        filteredRoutine.setPredicate("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new RoutineNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredRoutine;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Exercise} backed by the internal list of"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Lesson} backed by the internal list of"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return filteredLessons;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredDailyCalories;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return filteredSlots;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        SlotDayPredicate predicate \u003d new SlotDayPredicate(Arrays.asList(day));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ObservableList\u003cSlot\u003e slotObservableList \u003d this.addressBook.getSlotList();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        FilteredList\u003cSlot\u003e filteredSlotsByDay \u003d new FilteredList\u003c\u003e(slotObservableList);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        filteredSlotsByDay.setPredicate(predicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return filteredSlotsByDay;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        filteredRoutine.setPredicate(predicate);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 41,
      "nicholasyeo": 47,
      "patricktan6": 18,
      "-": 151,
      "khor-jingqian": 103,
      "Licheng-Wu": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an unmodifiable view of the exercises list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * This list will not contain any duplicate exercises."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cExercise\u003e getExerciseList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the routines list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This list will not contain any duplicate routines."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cRoutine\u003e getRoutineList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the lessons list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This list will not contain any duplicate lessons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an unmodifiable view of the slots list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This list will not contain any duplicate slots."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    ObservableList\u003cSlot\u003e getSlotList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the daily calorie list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This list will not contain any duplicate daily calorie entries."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getDailyCalorieList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns the user\u0027s height."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    double getHeight();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns the user\u0027s weight."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    double getWeight();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "nicholasyeo": 7,
      "patricktan6": 9,
      "-": 17,
      "khor-jingqian": 15,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"fitnus.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public abstract class Activity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Activity EMPTY_ACTIVITY \u003d new Activity(new Name(\"Empty Activity\")) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs an Activity object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param name The name of the activity."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Activity(Name name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Activity empty() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return EMPTY_ACTIVITY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both activities of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a weaker notion of equality between two activities."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public abstract boolean isSameActivity(Activity otherActivity);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CalorieLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DailyCalorieNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateDailyCalorieException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A list of daily calorie entries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A daily calorie entry is considered unique by comparing using {@code DailyCalorie#isSameDailyCalorie(DailyCalorie)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * daily calorie entries uses DailyCalorie#isSameDailyCalorie(DailyCalorie) for equality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * so as to ensure that the entry being added or updated is unique in terms of identity in the CalorieLog."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * However, the removal of an entry uses DailyCalorie#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * as to ensure that the entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * @see DailyCalorie#isSameDailyCalorie(DailyCalorie)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieLog implements Iterable\u003cDailyCalorie\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cDailyCalorie\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cDailyCalorie\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if the list contains an equivalent DailyCalorie as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean contains(DailyCalorie toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDailyCalorie);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a daily calorie entry to the log."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The DailyCalorie must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add(DailyCalorie toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a calories to an entry in the log."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * If DailyCalorie does not already exist in the list,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * then it must be a different day."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalories(int calories) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        boolean isContained \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : internalList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (entry.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                int index \u003d internalList.indexOf(entry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                entry.addCalories(calories);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.set(index, entry);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                isContained \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!isContained) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (checkSize() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.remove(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            DailyCalorie newDay \u003d new DailyCalorie(LocalDate.now());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            newDay.addCalories(calories);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            internalList.add(newDay);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Collections.sort(internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a calories to an entry in the log."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * If DailyCalorie does not already exist in the list,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * then it must be a different day."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        boolean isContained \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : internalList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (entry.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                int index \u003d internalList.indexOf(entry);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                entry.minusCalories(calories);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.set(index, entry);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                isContained \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!isContained) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DailyCalorieNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the dailyCalorie {@code target} in the list with {@code editedDailyCalorie}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The DailyCalorie identity of {@code editedDailyCalorie} must not be the same as another existing dailyCalorie"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie(DailyCalorie target, DailyCalorie editedDailyCalorie) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(target, editedDailyCalorie);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DailyCalorieNotFoundException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!target.isSameDailyCalorie(editedDailyCalorie) \u0026\u0026 contains(editedDailyCalorie)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.set(index, editedDailyCalorie);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the existing DailyCalorie with DailyCalorie from a replacement CalorieLog."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param replacement CalorieLog to replace this existing one."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories(CalorieLog replacement) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of this list with {@code dailyCalories}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code dailyCalories} must not contain duplicate DailyCalorie entries."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories(List\u003cDailyCalorie\u003e dailyCalories) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(dailyCalories);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!entriesAreUnique(dailyCalories)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(dailyCalories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if {@code dailyCalories} contains only unique Daily Calorie."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private boolean entriesAreUnique(List\u003cDailyCalorie\u003e dailyCalories) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (int i \u003d 0; i \u003c dailyCalories.size() - 1; i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c dailyCalories.size(); j++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if (dailyCalories.get(i).isSameDailyCalorie(dailyCalories.get(j))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes the equivalent DailyCalorie from the list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The DailyCalorie must exist in the list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove(DailyCalorie toRemove) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DailyCalorieNotFoundException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the size of the CalorieLog."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Integer of the size of the CalorieLog."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int checkSize() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setCalorieLog(CalorieLog replacement) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of this list with {@code calorieLog}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code calorieLog} must not contain duplicate dailyCalories."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setCalorieLog(List\u003cDailyCalorie\u003e calorieLog) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(calorieLog);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!calorieLogsAreUnique(calorieLog)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(calorieLog);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Iterator\u003cDailyCalorie\u003e iterator() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof CalorieLog // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 internalList.equals(((CalorieLog) other).internalList));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if {@code entries} contains only unique daily calorie entries."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private boolean calorieLogsAreUnique(List\u003cDailyCalorie\u003e calorieLogs) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (int i \u003d 0; i \u003c calorieLogs.size() - 1; i++) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c calorieLogs.size(); j++) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if (calorieLogs.get(i).isSameDailyCalorie(calorieLogs.get(j))) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the calories for today."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return The calorie count for today."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : internalList) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (entry.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                return entry.getCalories();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 254
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DailyCalorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents a DailyCalorie in fitNUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DailyCalorie implements Comparable\u003cDailyCalorie\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private int calorieSum \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DailyCalorie(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the Date that this DailyCalorie is representing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Date that the object is representing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the calorie sum for the day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return calorieSum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds the calories to the calorie sum."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalories(int calorieAddition) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert (calorieAddition \u003e 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieSum +\u003d calorieAddition;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Minus the calories to the calorie sum."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert(calorieSum \u003e 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieSum -\u003d calories;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both daily calorie log has the same date attached to it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This defines a weaker notion of equality between two daily calorie log."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isSameDailyCalorie(DailyCalorie otherDailyCalorie) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (otherDailyCalorie \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return otherDailyCalorie !\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 otherDailyCalorie.getDate().equals(getDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This defines a stronger notion of equality between two daily calorie logs."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof DailyCalorie)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie otherDailyCalorie \u003d (DailyCalorie) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return otherDailyCalorie.getDate().equals(getDate())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 otherDailyCalorie.getCalories() \u003d\u003d (getCalories());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Objects.hash(date, calorieSum);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        builder.append(\"Daily calorie for: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .append(calorieSum);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int compareTo(DailyCalorie o) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.getDate().compareTo(o.getDate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public enum Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    MONDAY(\"monday\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    TUESDAY(\"tuesday\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    WEDNESDAY(\"wednesday\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    THURSDAY(\"thursday\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    FRIDAY(\"friday\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    UNKNOWN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Day should only be one of the following: Monday, Tuesday, Wednesday, Thursday, Friday\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Map\u003cString, Day\u003e MAPPING \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Day() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        day \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Day(String day) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Day day : Day.values()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            MAPPING.put(day.day, day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Day getDayEnum(String day) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day dayEnum \u003d MAPPING.get(day);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (dayEnum \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return UNKNOWN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return dayEnum;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this day is the same as the other day."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherDay The other day to be checked."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this day is the same as the other day."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameDay(Day otherDay) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherDay \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherDay !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDay.getDay().equals(day);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isUnknownDay(Day day) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day.equals(UNKNOWN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Duration has to be of the following format: HHmm-HHmm e.g. 1600-1800\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_ORDER \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Start time has to be before end time\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(([0-1][0-9])|2[0-3])[0-5][0-9]-(([0-1][0-9])|2[0-3])[0-5][0-9]$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a Duration object with a start and end time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param startTime The start time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param endTime The end time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Duration(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(startTime, endTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidDuration(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this duration is the same as the other duration."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherDuration The other duration to be checked."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this duration is the same as the other duration."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameDuration(Duration otherDuration) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherDuration \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherDuration !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDuration.getStartTime().equals(startTime)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDuration.getEndTime().equals(endTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this duration has overlapping duration as the other duration."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherDuration The other duration to be checked."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this duration has overlapping duration as the other duration."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Duration otherDuration) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(otherDuration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime otherStartTime \u003d otherDuration.getStartTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime otherEndTime \u003d otherDuration.getEndTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean hasSameStartTime \u003d startTime.equals(otherStartTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean hasSameEndTime \u003d endTime.equals(otherEndTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean isStartTimeOverlap \u003d startTime.isAfter(otherStartTime) \u0026\u0026 startTime.isBefore(otherEndTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean isEndTimeOverlap \u003d endTime.isAfter(otherStartTime) \u0026\u0026 endTime.isBefore(otherEndTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean isCompletelyOverlap \u003d startTime.isBefore(otherStartTime) \u0026\u0026 endTime.isAfter(otherEndTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return hasSameStartTime || hasSameEndTime || isStartTimeOverlap || isEndTimeOverlap || isCompletelyOverlap;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(startTime, endTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return startTime.format(formatter) + \"-\" + endTime.format(formatter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Represents an Exercise in fitNUS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Exercise(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if both exercises of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (otherExercise \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 otherExercise.getName().equals(getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return otherExercise.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 otherExercise.getTags().equals(getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExerciseNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Tests that a {@code Exercise}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseNameContainsKeywordsPredicate implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(exercise.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof ExerciseNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 keywords.equals(((ExerciseNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Represents a Lesson in user\u0027s timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Lesson extends Activity {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if both lessons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This defines a weaker notion of equality between two lessons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 otherLesson.getName().equals(getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if both lessons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This defines a weaker notion of equality between two lessons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(otherActivity instanceof Lesson)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) otherActivity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherLesson.getName().equals(getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if both lessons have the same identity and data fields."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return otherLesson.getName().equals(getName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 otherLesson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 90,
      "nicholasyeo": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/LessonNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Tests that a {@code Lesson}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonNameContainsKeywordsPredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructor method that checks if the keywords are found in a lesson."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(keywords !\u003d null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(lesson.getName().fullName, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 keywords.equals(((LessonNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Routine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Routine extends Activity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Set\u003cExercise\u003e exercises;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine(Name name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.exercises \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Set\u003cExercise\u003e getExercises() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.exercises;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds an Exercise into the Routine object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param newExercise an existing Exercise in fitNUS."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExercise(Exercise newExercise) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert(!this.exercises.contains(newExercise));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.exercises.add(newExercise);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes an Exercise from the Routine object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param oldExercise an existing Exercise in this particular Routine object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExercise(Exercise oldExercise) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert(this.exercises.contains(oldExercise));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.exercises.remove(oldExercise);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both routines of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a weaker notion of equality between two routines."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(otherActivity instanceof Routine)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine otherRoutine \u003d (Routine) otherActivity;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherRoutine.getName().equals(getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both routines have the same identity and data fields."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a stronger notion of equality between two routines."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof Routine)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine otherPerson \u003d (Routine) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 otherPerson.getExercises().equals(getExercises());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Objects.hash(name, exercises);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : exercises) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            builder.append(exercise.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 15,
      "khor-jingqian": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RoutineNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineNameContainsKeywordsPredicate implements Predicate\u003cRoutine\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean test(Routine routine) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(routine.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 keywords.equals(((RoutineNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Slot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class Slot implements Comparable\u003cSlot\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Activity activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a new Slot object with an empty Activity. This is used to identify the slot to delete in timetable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param day The day of the slot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param duration The timeslot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot(Day day, Duration duration) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        activity \u003d Activity.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a new Slot object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param activity The activity to be added to timetable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param day The day to add to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param duration The duration to input in the timetable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot(Activity activity, Day day, Duration duration) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(activity, day, duration);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Activity getActivity() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this slot has overlapping duration with the other slot."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherSlot The other slot to be checked."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this slot has overlapping duration with the other slot."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Slot otherSlot) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day.isSameDay(otherSlot.getDay())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 duration.hasOverlapDuration(otherSlot.getDuration());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both slots have the same day and duration."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a weaker notion of equality between two slots."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameSlot(Slot otherSlot) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherSlot \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherSlot !\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDay().isSameDay(day)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDuration().isSameDuration(duration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both slots have the same activity, day and duration."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a stronger notion of equality between two slots."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(other instanceof Slot)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot otherSlot \u003d (Slot) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherSlot.getActivity().equals(activity)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDay().equals(day)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDuration().isSameDuration(duration);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(activity, day, duration);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return activity.getName() + \" on \" + day.toString() + \" \" + duration.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public int compareTo(Slot o) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return this.getDuration().getStartTime().compareTo(o.getDuration().getStartTime());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 104,
      "Licheng-Wu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SlotDayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code Day} matches the day given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class SlotDayPredicate implements Predicate\u003cSlot\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public SlotDayPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(slot.getDay().getDay(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof SlotDayPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 keywords.equals(((SlotDayPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final UniqueSlotList slots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this Slot is already in use in the Timetable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be checked."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this Slot is already in use in the Timetable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return slots.contains(slot);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this slot has overlapping duration with the other slots in timetable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be checked."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this slot has overlapping duration with the other slots in timetable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Slot slot) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return slots.hasOverlapDuration(slot);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.add(slot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void deleteSlot(Slot slot) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.remove(slot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void deleteSlot(Activity activity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.remove(activity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.setSlot(target, editedActivity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.slots.setSlots(slots);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return slots.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * An exercise is considered unique by comparing using {@code Exercise#isSameExercise(Exercise)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * exercises uses Exercise#isSameExercise(Exercise) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * so as to ensure that the exercise being added or updated is unique in terms of identity in the UniqueExerciseList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * However, the removal of an exercise uses Exercise#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * as to ensure that the exercise with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * @see Exercise#isSameExercise(Exercise)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if the list contains an equivalent exercise as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Adds an exercise to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Removes the equivalent exercise from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the contents of this list with {@code exercises}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the Exercise within UniqueExerciseList with the same name."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param e Exercise that is specified by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Exercise that is within fitNUS."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Exercise retrieveExercise(Exercise e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : internalList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (e.isSameExercise(exercise)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                return exercise;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 14,
      "Licheng-Wu": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A lesson is considered unique by comparing using {@code Lesson#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * lessons uses Lesson#isSameActivity(Activity) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * so as to ensure that the lesson being added or updated is unique in terms of identity in the UniqueLessonList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * However, the removal of a lesson uses Lesson#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * as to ensure that the lesson with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * @see Lesson#isSameActivity(Activity)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!target.isSameActivity(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (lessons.get(i).isSameActivity(lessons.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Lesson object from UniqueLessonList that the user specified."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param l Lesson object that the user wants."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Lesson object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Lesson retrieveLesson(Lesson l) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Lesson lesson : internalList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (lesson.isSameActivity(l)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                return lesson;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return l;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 133,
      "nicholasyeo": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueRoutineList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateRoutineException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.RoutineNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A list of routines that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A routine is considered unique by comparing using {@code Routine#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * routines uses Routine#isSameActivity(Activity) for equality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * so as to ensure that the routine being added or updated is unique in terms of identity in the UniqueRoutineList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * However, the removal of an routine uses Routine#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * as to ensure that the routine with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * @see Routine#isSameActivity(Activity)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class UniqueRoutineList implements Iterable\u003cRoutine\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cRoutine\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cRoutine\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if the list contains an equivalent Routine as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean contains(Routine toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a routine to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The Routine must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add(Routine toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateRoutineException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds an existing Exercise within fitNUS into an existing Routine within fitNUS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param r        Existing Routine."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param exercise Existing Exercise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExercise(Routine r, Exercise exercise) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.contains(r)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (routine.isSameActivity(r)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    Set\u003cExercise\u003e routineExercises \u003d routine.getExercises();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    if (routineExercises.contains(exercise)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    routine.addExercise(exercise);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    internalList.set(index, routine);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the toString method of the Routine that the user wants to view."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param index Index of the Routine that the user wants to view."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return The toString method of the Routine that the user wants to see."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String viewRoutine(int index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.get(index - 1).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Lists out all the Routine objects in UniqueRoutineList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return String containing all the Routine object toString method."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String listRoutines() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            result +\u003d routine.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            result +\u003d \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the routine {@code target} in the list with {@code editedRoutine}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The Routine identity of {@code editedRoutine} must not be the same as another existing routine in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine(Routine target, Routine editedRoutine) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(target, editedRoutine);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!target.isSameActivity(editedRoutine) \u0026\u0026 contains(editedRoutine)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateRoutineException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.set(index, editedRoutine);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes the equivalent routine from the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The routine must exist in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove(Routine toRemove) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the size of the UniqueRoutineList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Integer of the size of the UniqueRoutineList."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int checkSize() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the existing Routines with Routines from a replacement UniqueRoutineList."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param replacement UniqueRoutineList to replace this existing one."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines(UniqueRoutineList replacement) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of this list with {@code routines}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routines} must not contain duplicate routines."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines(List\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(routines);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!routinesAreUnique(routines)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateRoutineException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(routines);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Iterator\u003cRoutine\u003e iterator() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof UniqueRoutineList // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRoutineList) other).internalList));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if {@code routines} contains only unique routines."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private boolean routinesAreUnique(List\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (int i \u003d 0; i \u003c routines.size() - 1; i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c routines.size(); j++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (routines.get(i).isSameActivity(routines.get(j))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the Routine object from UniqueRoutineList that the user specified."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param r Routine object that the user wants."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Routine object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine retrieveRoutine(Routine r) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (routine.isSameActivity(r)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                return routine;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return r;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes the specified Exercise from the specified Routine."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param retrievedRoutine  User-specified Routine."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param retrievedExercise User-specified Exercise."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExerciseFromRoutine(Routine retrievedRoutine, Exercise retrievedExercise) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.contains(retrievedRoutine)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if (routine.isSameActivity(retrievedRoutine)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    internalList.remove(routine);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    routine.deleteExercise(retrievedExercise);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    internalList.add(routine);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes specified Exercise from all Routines."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param retrievedExercise User-specified Exercise to remove from all Routines."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExercise(Exercise retrievedExercise) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Set\u003cExercise\u003e routineExercises \u003d routine.getExercises();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            routineExercises.remove(retrievedExercise);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            internalList.set(index, routine);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the edited Exercise by the user in the Routines that contain it."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param target Exercise that the user wants to edit."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param editedExercise Exercise that is the outcome of user\u0027s edits."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Set\u003cExercise\u003e exercises \u003d routine.getExercises();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (exercises.contains(target)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                exercises.remove(target);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                exercises.add(editedExercise);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.set(index, routine);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10,
      "khor-jingqian": 261
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueSlotList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateSlotException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.exceptions.SlotNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.exceptions.SlotOverlapDurationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A list of slots that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A slot is considered unique by comparing using {@code Slot#isSameSlot(Slot)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * slots uses Slot#isSameSlot(Slot) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * so as to ensure that the slot being added or updated is unique in terms of identity in the UniqueSlotList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * However, the removal of a slot uses Slot#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * as to ensure that the slot with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * @see Slot#isSameSlot(Slot)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class UniqueSlotList implements Iterable\u003cSlot\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if the list contains an equivalent Slot as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean contains(Slot toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSlot);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if the list contains a Slot with overlapping duration as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param toCheck The slot to check."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the list contains a Slot with overlapping duration as the Slot to check."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Slot toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasOverlapDuration);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Adds a slot to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * The Slot must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void add(Slot toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new DuplicateSlotException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (hasOverlapDuration(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new SlotOverlapDurationException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        FXCollections.sort(internalList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Removes the equivalent slot from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * The slot must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove(Slot toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assert(internalList.contains(toRemove));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new SlotNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Removes all slots in the list that contains the specified Activity."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param toRemove The Activity to remove."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.removeIf(slot -\u003e slot.getActivity().isSameActivity(toRemove));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Slot slot : internalList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (slot.getActivity().isSameActivity(target)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                int index \u003d internalList.indexOf(slot);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                Slot editedSlot \u003d new Slot(editedActivity, slot.getDay(), slot.getDuration());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                internalList.set(index, editedSlot);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(UniqueSlotList replacement) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Replaces the contents of this list with {@code slots}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code slots} must not contain duplicate slots."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slots);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!areSlotsUnique(slots)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new DuplicateSlotException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (areSlotsOverlapping(slots)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new SlotOverlapDurationException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.setAll(slots);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if {@code slots} contains only unique slots."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean areSlotsUnique(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (int i \u003d 0; i \u003c slots.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c slots.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (slots.get(i).isSameSlot(slots.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if {@code slots} contains no overlapping slots."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean areSlotsOverlapping(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (int i \u003d 0; i \u003c slots.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c slots.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (slots.get(i).hasOverlapDuration(slots.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Iterator\u003cSlot\u003e iterator() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof UniqueSlotList // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSlotList) other).internalList));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 168,
      "Licheng-Wu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DailyCalorieNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DailyCalorieNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DailyCalorieNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(\"Today\u0027s calorie log has not been created!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateDailyCalorieException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DuplicateDailyCalorieException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(\"There is already a log for today\u0027s calorie!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateExerciseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Signals that the operation will result in duplicate Lessons"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * (Lessons are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(\"Operation would result in duplicate lessons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateRoutineException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DuplicateRoutineException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DuplicateRoutineException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateSlotException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class DuplicateSlotException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE \u003d \"Operation would result in duplicate slots in your timetable.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public DuplicateSlotException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/RoutineNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/SlotNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE \u003d \"The slot does not exist in the timetable.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/SlotOverlapDurationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotOverlapDurationException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE \u003d \"Operation would result in overlapping durations in your timetable.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotOverlapDurationException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDailyCalorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "class JsonAdaptedDailyCalorie {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DailyCalorie\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedDailyCalorie(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                              @JsonProperty(\"calories\") String calories) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedDailyCalorie(DailyCalorie source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calories \u003d Integer.toString(source.getCalories());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DailyCalorie toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LocalDate modelLocalDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie \u003d new DailyCalorie(modelLocalDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int modelCalories \u003d Integer.parseInt(calories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelDailyCalorie.addCalories(modelCalories);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return modelDailyCalorie;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given person details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Converts a given {@code Exercise} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s {@code Exercise} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final List\u003cTag\u003e exerciseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            exerciseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(exerciseTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new Exercise(modelName, modelTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given person details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final List\u003cTag\u003e lessonTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            lessonTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(lessonTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson(modelName, modelTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRoutine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "class JsonAdaptedRoutine {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Routine\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String routineName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercisesIncluded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedRoutine(@JsonProperty(\"routineName\") String routineName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                             @JsonProperty(\"exercisesIncluded\") List\u003cJsonAdaptedExercise\u003e tagged) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routineName \u003d routineName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.exercisesIncluded.addAll(tagged);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedRoutine(Routine source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineName \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        exercisesIncluded.addAll(source.getExercises().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final List\u003cExercise\u003e routineExercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (JsonAdaptedExercise exercise : exercisesIncluded) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            routineExercises.add(exercise.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (routineName \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!Name.isValidName(routineName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final Name modelName \u003d new Name(routineName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Set\u003cExercise\u003e modelExercise \u003d new HashSet\u003c\u003e(routineExercises);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine modelRoutine \u003d new Routine(modelName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : modelExercise) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            modelRoutine.addExercise(exercise);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return modelRoutine;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 2,
      "khor-jingqian": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSlot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Jackson-friendly version of {@link Slot}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class JsonAdaptedSlot {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String TYPE_ROUTINE \u003d \"routine\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String TYPE_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Slot\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String activityName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagsForLesson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercisesForRoutine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code JsonAdaptedSlot} with the given slot details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public JsonAdaptedSlot(@JsonProperty(\"activityName\") String activityName,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"duration\") String duration,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"tagsForLesson\") List\u003cJsonAdaptedTag\u003e tags,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"exercisesForRoutine\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.activityName \u003d activityName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (type.equals(TYPE_LESSON)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (tags !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                tagsForLesson.addAll(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (exercises !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                exercisesForRoutine.addAll(exercises);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Converts a given {@code Slot} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public JsonAdaptedSlot(Slot source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        activityName \u003d source.getActivity().getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        type \u003d source.getActivity() instanceof Routine"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ? TYPE_ROUTINE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                : TYPE_LESSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        day \u003d source.getDay().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        duration \u003d source.getDuration().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (type.equals(TYPE_LESSON)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Lesson lesson \u003d (Lesson) source.getActivity();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            tagsForLesson.addAll(lesson.getTags()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Routine routine \u003d (Routine) source.getActivity();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            exercisesForRoutine.addAll(routine.getExercises()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Converts this Jackson-friendly adapted slot object into the model\u0027s {@code Slot} object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (activityName \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Name.isValidName(activityName)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (Day.isUnknownDay(Day.getDayEnum(day))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Name modelName \u003d new Name(activityName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Activity modelActivity;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (type.equals(TYPE_LESSON)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final List\u003cTag\u003e lessonTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (JsonAdaptedTag tag : tagsForLesson) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                lessonTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(lessonTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            modelActivity \u003d new Lesson(modelName, modelTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final List\u003cExercise\u003e routineExercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (JsonAdaptedExercise exercise : exercisesForRoutine) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                routineExercises.add(exercise.toModelType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final Set\u003cExercise\u003e modelExercise \u003d new HashSet\u003c\u003e(routineExercises);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Routine modelRoutine \u003d new Routine(modelName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (Exercise exercise : modelExercise) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                modelRoutine.addExercise(exercise);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            modelActivity \u003d modelRoutine;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Day modelDay \u003d Day.getDayEnum(day);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Duration modelDuration \u003d parseDuration(duration);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Slot(modelActivity, modelDay, modelDuration);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Duration parseDuration(String toParse) throws IllegalValueException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String[] timeSplit \u003d toParse.split(\"-\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startHour \u003d Integer.parseInt(timeSplit[0].substring(0, 2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startMinute \u003d Integer.parseInt(timeSplit[0].substring(2, 4));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(startHour, startMinute);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endHour \u003d Integer.parseInt(timeSplit[1].substring(0, 2));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endMinute \u003d Integer.parseInt(timeSplit[1].substring(2, 4));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(endHour, endMinute);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(startTime, endTime)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Duration(startTime, endTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@JsonRootName(value \u003d \"fitnus\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_ROUTINE \u003d \"Routines list contains duplicate routine(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_SLOT \u003d \"Slot list contains duplicate slot(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_DAILYCALORIE \u003d \"Calorie log contains duplicate calorie log(s).\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cJsonAdaptedRoutine\u003e routines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cJsonAdaptedDailyCalorie\u003e dailyCalories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private double height;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                       @JsonProperty(\"exercises\") List\u003cJsonAdaptedExercise\u003e exercises,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                       @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                                       @JsonProperty(\"routines\") List\u003cJsonAdaptedRoutine\u003e routines,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                       @JsonProperty(\"slots\") List\u003cJsonAdaptedSlot\u003e slots,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                       @JsonProperty(\"dailyCalories\") List\u003cJsonAdaptedDailyCalorie\u003e dailyCalories,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                                       @JsonProperty(\"height\") double height,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                                       @JsonProperty(\"weight\") double weight) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routines.addAll(routines);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.slots.addAll(slots);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.dailyCalories.addAll(dailyCalories);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises.addAll(source.getExerciseList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.addAll(source.getLessonList().stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.addAll(source.getRoutineList().stream().map(JsonAdaptedRoutine::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.addAll(source.getSlotList().stream().map(JsonAdaptedSlot::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dailyCalories.addAll(source.getDailyCalorieList().stream().map(JsonAdaptedDailyCalorie::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        height \u003d source.getHeight();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        weight \u003d source.getWeight();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (JsonAdaptedExercise jsonAdaptedExercise : exercises) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            Exercise exercise \u003d jsonAdaptedExercise.toModelType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (addressBook.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            addressBook.addExercise(exercise);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (addressBook.hasLesson(lesson)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            addressBook.addLesson(lesson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (JsonAdaptedRoutine jsonAdaptedRoutine : routines) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Routine routine \u003d jsonAdaptedRoutine.toModelType();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (addressBook.hasRoutine(routine)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ROUTINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            addressBook.addRoutine(routine);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (JsonAdaptedSlot jsonAdaptedSlot : slots) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Slot slot \u003d jsonAdaptedSlot.toModelType();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (addressBook.hasSlot(slot)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            addressBook.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e calorieLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (JsonAdaptedDailyCalorie jsonAdaptedDailyCalorie: dailyCalories) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            DailyCalorie dailyCalorie \u003d jsonAdaptedDailyCalorie.toModelType();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (addressBook.hasDailyCalorie(dailyCalorie)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DAILYCALORIE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            calorieLog.add(dailyCalorie);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Collections.sort(calorieLog);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addressBook.addCalorieEntries(calorieLog);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        addressBook.addHeight(height);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        addressBook.addWeight(weight);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 14,
      "nicholasyeo": 13,
      "patricktan6": 11,
      "-": 58,
      "khor-jingqian": 35,
      "Licheng-Wu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalorieGraph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieGraph extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"CalorieGraph.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalorieGraph.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ObservableList\u003cDailyCalorie\u003e calorieLog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final XYChart.Series\u003cString, Number\u003e series;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private LineChart\u003cString, Number\u003e graph;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Constructs CalorieGraph"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param calorieLog"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieGraph(ObservableList\u003cDailyCalorie\u003e calorieLog) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.calorieLog \u003d calorieLog;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        series \u003d new XYChart.Series\u003cString, Number\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        xAxis.setLabel(\"Day\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        yAxis.setLabel(\"Daily Calories\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.setTitle(\"Calorie Graph\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.setLegendVisible(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.getData().add(series);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog.addListener((ListChangeListener\u003cDailyCalorie\u003e) change -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            update();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        series.getData().clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : calorieLog) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            series.getData().add("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    new XYChart.Data\u003c\u003e(entry.getDate().getDayOfWeek().toString(), entry.getCalories())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public final Exercise exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name.setText(exercise.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercise.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 exercise.equals(card.exercise);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Panel containing the list of exercises."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ListView\u003cExercise\u003e exerciseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code ExerciseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t09-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the full user guide: \" + USERGUIDE_URL + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"A summarized version of the user guide with all the commands is displayed below.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String summarizedGuide \u003d HelpCommand.STANDARDIZED_HELP_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private TextArea commandMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        commandMessage.setText(summarizedGuide);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setGuide(String summarizedGuide) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(summarizedGuide);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        commandMessage.setText(summarizedGuide);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 18,
      "-": 100,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HomePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class HomePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"HomePanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseListPanel exerciseListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private RoutineListPanel routineListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private CalorieGraph lineChart;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane routineListPanelPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane exerciseListPanelPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane lessonListPanelPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private HBox graph;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Constructs HomePanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public HomePanel(Logic logic) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(logic.getFilteredLessonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        routineListPanelPlaceholder.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Insets.EMPTY)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        routineListPanel \u003d new RoutineListPanel(logic.getFilteredRoutineList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        routineListPanelPlaceholder.getChildren().add(routineListPanel.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        lineChart \u003d new CalorieGraph(logic.getFilteredDailyCalorie());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.getChildren().add(lineChart.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 8,
      "Licheng-Wu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String FXML \u003d \"LessonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code LessonCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name.setText(lesson.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lesson.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String FXML \u003d \"LessonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LessonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code LessonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonListPanel(ObservableList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessonListView.setItems(lessonList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson} using a {@code LessonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private HomePanel homePanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private TimetablePanel timetablePanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane homeContentPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane timetableContentPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private TabPane tabPanePlaceHolder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        lessonListPanel \u003d new LessonListPanel(logic.getFilteredLessonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        homePanel \u003d new HomePanel(logic);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        homeContentPlaceholder.getChildren().add(homePanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        timetablePanel \u003d new TimetablePanel(logic);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        timetableContentPlaceholder.getChildren().add(timetablePanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        routineListPanelPlaceholder.setBackground"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        (new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //                Insets.EMPTY)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        routineListPanel \u003d new RoutineListPanel(logic.getFilteredRoutineList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        //        routineListPanelPlaceholder.getChildren().add(routineListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tabPanePlaceHolder.setMinWidth(530);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tabPanePlaceHolder.setMinHeight(50);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        VBox.setVgrow(tabPanePlaceHolder, Priority.ALWAYS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Handles the MainWindow if the Help command is used."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void handleHelpHelper(String summarizedGuide) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        helpWindow.setGuide(HelpCommand.getFilteredSearch());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                handleHelpHelper(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 12,
      "-": 188,
      "khor-jingqian": 2,
      "Licheng-Wu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoutineCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"RoutineListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public final Routine routine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineCard(Routine routine, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routine \u003d routine;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        name.setText(routine.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routine.getExercises().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .sorted(Comparator.comparing(exercise -\u003e exercise.getName().fullName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .forEach(exercise -\u003e tags.getChildren().add(new Label(exercise.getName().fullName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof RoutineCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCard card \u003d (RoutineCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 routine.equals(card.routine);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoutineListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Panel containing the list of routines."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"RoutineListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoutineListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ListView\u003cRoutine\u003e routineListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ListView\u003cInteger\u003e lv;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates a {@code RoutineListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineListPanel(ObservableList\u003cRoutine\u003e routineList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineListView.setItems(routineList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineListView.setCellFactory(listView -\u003e new RoutineListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Routine} using a {@code RoutineCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    class RoutineListViewCell extends ListCell\u003cRoutine\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        protected void updateItem(Routine routine, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            super.updateItem(routine, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (empty || routine \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                setGraphic(new RoutineCard(routine, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SlotCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * An UI component that displays information of a {@code Slot}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class SlotCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"SlotListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public final Slot slot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code SlotCode} with the given {@code Slot} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public SlotCard(Slot slot, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name.setText(slot.getActivity().getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        time.setText(slot.getDuration().getStartTime().toString() + \" - \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + slot.getDuration().getEndTime().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof SlotCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        SlotCard card \u003d (SlotCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 slot.equals(card.slot);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SlotListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Panel containing the list of slots."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class SlotListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"SlotListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SlotListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ListView\u003cSlot\u003e slotListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code SlotListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public SlotListPanel(ObservableList\u003cSlot\u003e slotList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        slotListView.setItems(slotList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        slotListView.setOrientation(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        slotListView.setCellFactory(listView -\u003e new SlotListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Slot} using a {@code SlotCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    class SlotListViewCell extends ListCell\u003cSlot\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        protected void updateItem(Slot slot, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            super.updateItem(slot, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (empty || slot \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(new SlotCard(slot, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimetablePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class TimetablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"TimetablePanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel mondayListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel tuesdayListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel wednesdayListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel thursdayListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel fridayListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane mondayListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane tuesdayListPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane wednesdayListPanelPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane thursdayListPanelPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane fridayListPanelPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Constructs TimetablePanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public TimetablePanel(Logic logic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        mondayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Monday\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        mondayListPanelPlaceholder.getChildren().add(mondayListPanel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tuesdayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Tuesday\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tuesdayListPanelPlaceholder.getChildren().add(tuesdayListPanel.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        wednesdayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Wednesday\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        wednesdayListPanelPlaceholder.getChildren().add(wednesdayListPanel.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        thursdayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Thursday\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        thursdayListPanelPlaceholder.getChildren().add(thursdayListPanel.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        fridayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Friday\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        fridayListPanelPlaceholder.getChildren().add(fridayListPanel.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/fitnus.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/resources/view/CalorieGraph.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cLineChart fx:id\u003d\"graph\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003cxAxis \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003cyAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/LineChart\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 14
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ".list-cell:filled:selected #routineCardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-border-color: #4b7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 5 1 5 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#routineCardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#timetable {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFF000;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#calories {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#sideBox {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     -fx-background-color: #FF7F50;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#headers {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-text-fill: #FFFFFF"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#bmi {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #ADD8E6;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#logo {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFF123;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#routineListPanel {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 349,
      "khor-jingqian": 38,
      "Licheng-Wu": 3
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 33
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cListView fx:id\u003d\"exerciseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cfx:root height\u003d\"600.0\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cAnchorPane stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003cHBox stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                            \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"help-label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003cTextArea fx:id\u003d\"commandMessage\" editable\u003d\"false\" layoutX\u003d\"-1.0\" layoutY\u003d\"43.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                  text\u003d\"\\$commandGuide\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                  AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"43.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 20,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/HomePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cHBox fx:id\u003d\"graph\" prefHeight\u003d\"350\" prefWidth\u003d\"610\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefHeight\u003d\"350\" prefWidth\u003d\"610\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u003cLabel wrapText\u003d\"\" text\u003d\"${\u0027HEIGHT: 170CM\\nWEIGHT: 70KG\\nBMI: 24.2\\nPlaceholder text. TO BE IMPLEMENTED\u0027}\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cHBox prefWidth\u003d\"450\" prefHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefWidth\u003d\"340\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel text\u003d\"Exercises:\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefWidth\u003d\"340\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel text\u003d\"Routines:\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefWidth\u003d\"340\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel text\u003d\"Lessons:\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cHBox prefHeight\u003d\"350.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"exerciseList\" minWidth\u003d\"200\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"exerciseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"routineList\" minWidth\u003d\"200\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"routineListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"lessonList\" minWidth\u003d\"200\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"lessonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 18,
      "Licheng-Wu": 50
    }
  },
  {
    "path": "src/main/resources/view/LessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 33
    }
  },
  {
    "path": "src/main/resources/view/LessonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"fitNUS\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cImage url\u003d\"@/images/fitnus.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cHBox fx:id\u003d\"tabsContainer\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "          \u003cVBox id\u003d\"tabsVBox\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPanePlaceHolder\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                     VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                     tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                     stylesheets\u003d\"@css/Tab.css\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003cTab text\u003d\"HOME\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"homeContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003cTab text\u003d\"TIMETABLE\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"timetableContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"75\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "-": 43,
      "khor-jingqian": 6,
      "Licheng-Wu": 18
    }
  },
  {
    "path": "src/main/resources/view/RoutineListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cHBox id\u003d\"routineCardPane\" fx:id\u003d\"routineCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 33
    }
  },
  {
    "path": "src/main/resources/view/RoutineListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cVBox id\u003d\"routineListPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cListView fx:id\u003d\"routineListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/resources/view/SlotListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"40\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 34
    }
  },
  {
    "path": "src/main/resources/view/SlotListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cListView fx:id\u003d\"slotListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 8
    }
  },
  {
    "path": "src/main/resources/view/TimetablePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cHBox\u003e\u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cVBox prefWidth\u003d\"50\" prefHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"50\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Mon\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Tue\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Wed\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Thur\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Fri\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cVBox prefHeight\u003d\"430.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"mondayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"mondayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"tuesdayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"tuesdayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"wednesdayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"wednesdayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"thursdayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"thursdayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"fridayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"fridayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 71
    }
  },
  {
    "path": "src/main/resources/view/css/Tab.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-margin: 0 -15 0 5;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 0 0 0 5;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-background-color: #313133;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 11 0 13 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-radius: 10 10 0 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-width: 1px 1px 3px 1px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-color: #383838 #383838 #e0e0e0 #383838;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-min-width: 100px;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-open-tab-animation: NONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-close-tab-animation: NONE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-text-fill: #8DBE6A;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 0px 5px 0px 5px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-width: 1px 1.5px 4px 1px;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-color: #2AC3CB #2AC3CB salmon #2AC3CB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 36
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \"name\" : \"bench\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"CS2103T\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"routines\" : ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"routineName\" : \"Knee Workout\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"cs2103t\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"lesson\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"monday\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [  ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"dailyCalories\" : ["
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"date\" : \"2020-10-26\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"calories\" : \"1000\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 8,
      "-": 13,
      "khor-jingqian": 12,
      "Licheng-Wu": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \"name\" : \"bench\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"CS2103T\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"routines\" : ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"routineName\" : \"Knee Workout\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"cs2103t\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"lesson\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"monday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [  ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"dailyCalories\" : ["
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"date\" : \"2020-10-26\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"calories\" : \"1000\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 8,
      "-": 7,
      "khor-jingqian": 12,
      "Licheng-Wu": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \"name\" : \"bench\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"CS2103T\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"routines\" : ["
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"routineName\" : \"Knee Workout\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"cs2103t\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"lesson\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"monday\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [  ],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"dailyCalories\" : ["
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"date\" : \"2020-10-26\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \"calories\" : \"1000\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 8,
      "-": 45,
      "khor-jingqian": 12,
      "Licheng-Wu": 4
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"addressBookFilePath\" : \"fitnus.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"addressBookFilePath\" : \"fitnus.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/fitnus.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    //---------------- Tests for containsCharIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharChain parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharChain parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Valid equivalence partitions for CharChain:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - any charChain"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - charChain containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - charChain with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - one charChain"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - multiple charChains"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - charChain matches any part of sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - matches multiple charChains"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - query charChain does not match any part of sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(StringUtil.containsCharIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(StringUtil.containsCharIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than CharChain"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(StringUtil.containsCharIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // CharChain bigger than sentence word"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 31,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public String listRoutines() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void deleteRoutine(Routine target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        public void addHeight(double height) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        public void addWeight(double weight) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        public double getBmi() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean hasOverlappingSlot(Slot slot) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void deleteSlotFromTimetable(Slot slot) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void deleteExerciseToRoutine(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void viewRoutine(Routine routineToView) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addCalories(int calories) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public int getCalories() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 29,
      "nicholasyeo": 36,
      "patricktan6": 15,
      "-": 197,
      "khor-jingqian": 76,
      "Licheng-Wu": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_NAME_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_NAME_CS2106 \u003d \"CS2106\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_TAG_EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_TAG_LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String listRoutines() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteRoutine(Routine target) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addHeight(double height) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addWeight(double weight) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasOverlappingSlot(Slot slot) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteSlotFromTimetable(Slot slot) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExerciseToRoutine(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void viewRoutine(Routine routineToView) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalories(int calories) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 280
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RoutineCreateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RoutineCreateCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubAcceptingRoutines modelStub \u003d new ModelStubAcceptingRoutines();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CommandResult commandResult \u003d new RoutineCreateCommand(LEG_DAY).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(String.format(RoutineCreateCommand.MESSAGE_SUCCESS, LEG_DAY), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Collections.singletonList(LEG_DAY), modelStub.routinesAdded);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand command \u003d new RoutineCreateCommand(LEG_DAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                RoutineCreateCommand.MESSAGE_DUPLICATE_ROUTINE, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand addLegDayCommand \u003d new RoutineCreateCommand(LEG_DAY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand addUpperBodyCommand \u003d new RoutineCreateCommand(UPPER_BODY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addLegDayCommand.equals(addLegDayCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand addLegDayCommandCopy \u003d new RoutineCreateCommand(LEG_DAY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addLegDayCommand.equals(addLegDayCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addLegDayCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addLegDayCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different routines -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addLegDayCommand.equals(addUpperBodyCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub used to contain a single Routine."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubWithRoutine extends ModelStub {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final Routine routine;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubWithRoutine(Routine routine) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.routine \u003d routine;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public boolean hasRoutine(Routine routine) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return this.routine.isSameActivity(routine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub that accepts any Routine added to it."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubAcceptingRoutines extends ModelStub {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final ArrayList\u003cRoutine\u003e routinesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public boolean hasRoutine(Routine routine) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return routinesAdded.stream().anyMatch(routine::isSameActivity);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            routinesAdded.add(routine);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.person.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cRoutine\u003e routines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cSlot\u003e slots \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cDailyCalorie\u003e calorieLog \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        private final double height \u003d Double.NaN;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        private final double weight \u003d Double.NaN;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cRoutine\u003e getRoutineList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return routines;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return slots;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getDailyCalorieList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return calorieLog;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        public double getHeight() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            return height;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        public double getWeight() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            return weight;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "nicholasyeo": 7,
      "patricktan6": 11,
      "-": 102,
      "khor-jingqian": 15,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calorie/CalorieLogTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.CalorieLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DailyCalorieNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateDailyCalorieException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieLogTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate testDate1 \u003d LocalDate.of(2020, 10, 28);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate testDate2 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d1 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d2 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d3 \u003d new DailyCalorie(testDate2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieLog l1 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieLog l2 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals_differentCalorieLog_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.equals(l2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals_differentCalorieLogWithDifferentDailyCalorie_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.equals(l2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals_differentCalorieLogWithSameDailyCalorie_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l2.add(d1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.equals(l2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_nullCalorieLog_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.contains(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_dailyCalorieNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.contains(d1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_dailyCalorieInList_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.contains(d1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_dailyCalorieWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.contains(d2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_nulldailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.add(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_duplicateDailyCalorie_throwsDuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l1.add(d1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_nullTargetDailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalorie(null, d1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_nullEditedDailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalorie(d1, null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_targetDailyCalorieNotInList_throwsDailyCalorieNotFoundException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DailyCalorieNotFoundException.class, () -\u003e l1.setDailyCalorie(d1, d1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieIsSameDailyCalorie_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalorie(d1, d1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieHasSameIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalorie(d1, d2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalorie(d1, d2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieHasNonUniqueIdentity_throwsDuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d3);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l1.setDailyCalorie(d1, d3));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_nullDailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.remove(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_dailyCalorieDoesNotExist_throwsDailyCalorieNotFoundException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DailyCalorieNotFoundException.class, () -\u003e l1.remove(d1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_existingDailyCalorie_removesDailyCalorie() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.remove(d1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedCalorieLog, l1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_nullUniqueDailyCalorieList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalories((CalorieLog) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_uniqueDailyCalorieList_replacesOwnListWithProvidedCalorieLog() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalories(expectedCalorieLog);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalories((List\u003cDailyCalorie\u003e) null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e dailyCalorieList \u003d Collections.singletonList(d1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalories(dailyCalorieList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedCalorieLog, l1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_listWithDuplicateDailyCalories_throwsDuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e listWithDuplicateDailyCalories \u003d Arrays.asList(d1, d1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l1.setDailyCalories(listWithDuplicateDailyCalories));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e l1"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calorie/DailyCalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.DailyCalorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DailyCalorieTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate testDate1 \u003d LocalDate.of(2020, 10, 28);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d1 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d2 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameDailyCalorie() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d2.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.isSameDailyCalorie(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d2.isSameDailyCalorie(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate, different calories -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d1.addCalories(10);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate, same calories -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.addCalories(10);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LocalDate testDate2 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie d3 \u003d new DailyCalorie(testDate2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values with no calories -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.equals(d2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.equals(d1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d2.equals(d2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d2.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate, different DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.addCalories(1500);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(d2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different LocalDate, same DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(d3));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different LocalDate, different DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d2.equals(d3));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(BENCH_PRESS.isSameExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(SQUATS.isSameExercise(SQUATS));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.isSameExercise(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(SQUATS.isSameExercise(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void asObservableLessonList_modifyLessonList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e lesson.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void isSameLesson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.isSameLesson(GES1028));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.isSameLesson(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.isSameLesson(editedGes1028));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same name, different tags -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.isSameLesson(editedGes1028));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson ges1028Copy \u003d new LessonBuilder(GES1028).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.equals(ges1028Copy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.equals(GES1028));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(CS2106));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(editedGes1028));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(editedGes1028));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/routine/RoutineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameRoutine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(UPPER_BODY.isSameActivity(UPPER_BODY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY.isSameActivity(LEG_DAY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(UPPER_BODY.isSameActivity(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(LEG_DAY.isSameActivity(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same Name, one has Exercise and the other does not -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine editedRoutine \u003d LEG_DAY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name editedName \u003d new Name(\"Leg Extensions\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise typicalExercise \u003d new Exercise(editedName, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        editedRoutine.addExercise(typicalExercise);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY.isSameActivity(editedRoutine));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name copyName \u003d new Name(\"Leg Day\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(copyName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(LEG_DAY.equals(copyRoutine));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(LEG_DAY.equals(LEG_DAY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(UPPER_BODY.equals(UPPER_BODY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different routine -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(UPPER_BODY));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(UPPER_BODY.equals(copyRoutine));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different exercises -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name editedName \u003d new Name(\"Leg Extensions\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise typicalExercise \u003d new Exercise(editedName, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        copyRoutine.addExercise(typicalExercise);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(copyRoutine));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 5,
      "khor-jingqian": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/routine/UniqueRoutineListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.UniqueRoutineList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateRoutineException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.exceptions.RoutineNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class UniqueRoutineListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final UniqueRoutineList uniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_routineNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(uniqueRoutineList.contains(LEG_DAY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_routineInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(uniqueRoutineList.contains(LEG_DAY));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_routineWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name copyName \u003d new Name(\"Leg Day\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(copyName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(uniqueRoutineList.contains(copyRoutine));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_duplicateRoutine_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e uniqueRoutineList.add(LEG_DAY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_nullTargetRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutine(null, LEG_DAY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_nullEditedRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutine(LEG_DAY, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_targetRoutineNotInList_throwsRoutineNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(RoutineNotFoundException.class, () -\u003e uniqueRoutineList.setRoutine(LEG_DAY, LEG_DAY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineIsSameRoutine_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutine(LEG_DAY, LEG_DAY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name copyName \u003d new Name(\"Leg Day\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(copyName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutine(LEG_DAY, copyRoutine);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(copyRoutine);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutine(LEG_DAY, UPPER_BODY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineHasNonUniqueIdentity_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e uniqueRoutineList.setRoutine(LEG_DAY, UPPER_BODY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_routineDoesNotExist_throwsRoutineNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(RoutineNotFoundException.class, () -\u003e uniqueRoutineList.remove(LEG_DAY));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_existingRoutine_removesRoutine() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.remove(LEG_DAY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_nullUniqueRoutineList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutines((UniqueRoutineList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_uniqueRoutineList_replacesOwnListWithProvideduniqueRoutineList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutines(expectedUniqueRoutineList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutines((List\u003cRoutine\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e routineList \u003d Collections.singletonList(UPPER_BODY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutines(routineList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_listWithDuplicateRoutines_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e listWithDuplicateRoutines \u003d Arrays.asList(LEG_DAY, LEG_DAY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e uniqueRoutineList.setRoutines(listWithDuplicateRoutines));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueRoutineList"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1101R;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1521;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void readAndSaveFitNus_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFitNus.json\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        AddressBook original \u003d getTypicalFitNus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        original.addLesson(MA1101R);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        original.removeLesson(GES1028);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        original.addLesson(MA1521);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 30,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"fitnus.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class to help with building Lesson objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS1234\"; //\"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code LessonBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(lessonToCopy.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Sets the {@code Name} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson(name, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercises.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Exercise BENCH_PRESS \u003d new Exercise(new Name(\"Bench Press\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Exercise SQUATS \u003d new Exercise(new Name(\"Squats\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private TypicalExercises() {} // prevents instantiation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical exercises."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            ab.addExercise(exercise);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalExercises() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENCH_PRESS, SQUATS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2030;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.person.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class containing a list of {@code Lesson} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GES1028 \u003d new LessonBuilder().withName(\"GES1028\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(\"auditorium\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GEH1030 \u003d new LessonBuilder().withName(\"GEH1030\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(\"music\", \"auditorium\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GET1011 \u003d new LessonBuilder().withName(\"GET1011\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GER1000 \u003d new LessonBuilder().withName(\"GER1000\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(\"auditorium\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GEQ1000 \u003d new LessonBuilder().withName(\"GEQ1000\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson IS1103 \u003d new LessonBuilder().withName(\"IS1103\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson PC1141 \u003d new LessonBuilder().withName(\"PC1141\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson MA1101R \u003d new LessonBuilder().withName(\"MA1101R\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson MA1521 \u003d new LessonBuilder().withName(\"MA1521\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // Manually added - Lesson\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson CS2030 \u003d new LessonBuilder().withName(VALID_LESSON_NAME_CS2030)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson CS2106 \u003d new LessonBuilder().withName(VALID_LESSON_NAME_CS2106)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(VALID_LESSON_TAG_LECTURE, VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private TypicalLessons() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical lessons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static AddressBook getTypicalFitNus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (Lesson lesson : getTypicalLessons()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            ab.addLesson(lesson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static List\u003cLesson\u003e getTypicalLessons() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GES1028, GEH1030, GET1011, GER1000, GEQ1000, IS1103, PC1141));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRoutines.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.person.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class TypicalRoutines {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Routine LEG_DAY \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Routine UPPER_BODY \u003d new Routine(new Name(\"Upper Body\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private TypicalRoutines() {} // prevents instantiation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : getTypicalRoutines()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ab.addRoutine(routine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static AddressBook getPopulatedAddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : getRoutinesWithExercise()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            ab.addRoutine(routine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static List\u003cRoutine\u003e getTypicalRoutines() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new ArrayList\u003cRoutine\u003e(Arrays.asList(LEG_DAY, UPPER_BODY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static List\u003cRoutine\u003e getRoutinesWithExercise() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LEG_DAY.addExercise(new Exercise(new Name(\"Squats\"), new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Set\u003cTag\u003e typicalTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        typicalTags.add(new Tag(\"Dumbbell exercise\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UPPER_BODY.addExercise(new Exercise(new Name(\"Bicep Curls\"), typicalTags));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new ArrayList\u003cRoutine\u003e(Arrays.asList(LEG_DAY, UPPER_BODY));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 56
    }
  }
]
